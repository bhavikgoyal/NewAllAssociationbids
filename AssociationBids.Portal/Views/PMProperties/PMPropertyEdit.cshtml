@model AssociationBids.Portal.Model.PropertyModel
@{
    ViewBag.Title = "PMPropertyEdit";
    Layout = "~/Views/Shared/_PropertyManagerLayout.cshtml";
}
<script src="~/Content/themes/assets/js/vendors/jquery-3.2.1.min.js"></script>
<!-- app-content-->

<div class="app-content  my-3 my-md-5">
    <div class="side-app">

        <!-- page-header -->
        <div class="page-header">
            <ol class="breadcrumb">
                <!-- breadcrumb -->
                <li class="breadcrumb-item active" aria-current="page"><a href="PMPropertiesList">Properties</a></li>
                <li class="breadcrumb-item"><a href="PropertiesView">Property Details</a></li>
                <li class="breadcrumb-item active" aria-current="page">Edit Properties</li>
            </ol><!-- End breadcrumb -->

        </div>
        <div class="alert alert-danger" id="Error" style="display:block; margin-top: 20px;">
            <strong><span class="errormessage"></span></strong>
        </div>
        <!-- End page-header -->
        @using (Html.BeginForm("PMPropertyEdit", "PMProperties", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
        <div class="row">
            <div class="col-12">
                <div class="card">

                    <div class="card-body">

                        <div class="row">
                            <div class="col-md-12">
                                <div class="text-right"><a id="btndelete" href="#" class="btn btn-icon btn-danger"><i class="fe fe-trash"></i> Delete</a></div>
                            </div>
                        </div>
                        <hr />

                        <div class="row">
                            @Html.HiddenFor(model => model.PropertyKey)
                            @Html.HiddenFor(model => model.CompanyKey)
                            @Html.HiddenFor(model => model.ResourceKey)

                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">
                                        Title
                                        @Html.ValidationMessageFor(model => model.Title, "*", new { @class = "text-danger" })
                                    </label>
                                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "Title" , @onfocusout = "checkVali()" } })
                                </div>
                            </div><!-- end of col -->

                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">
                                        # No. of Units
                                        @Html.ValidationMessageFor(model => model.NumberOfUnits, "*", new { @class = "text-danger" })
                                    </label>
                                    @Html.EditorFor(model => model.NumberOfUnits, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "NumberOfUnits", @oninput= "checkVali()" } })
                                </div>
                            </div><!-- end of col -->
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-label">Description</label>
                                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", placeholder = "Description" })
                                </div>
                            </div><!-- end of col -->

                        </div><!-- end of row -->



                        <hr />
                        <div class="row">


                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">
                                        Address 1
                                        @Html.ValidationMessageFor(model => model.Address, "*", new { @class = "text-danger" })
                                    </label>
                                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "Address", @onfocusout = "checkVali()" } })
                                </div>
                            </div><!-- end of col -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Address 2</label>
                                    @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "Address 2" } })
                                </div>
                            </div><!-- end of col -->

                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label">
                                        City
                                        @Html.ValidationMessageFor(model => model.City, "*", new { @class = "text-danger" })
                                    </label>
                                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "City", @onfocusout = "checkVali()" } })
                                </div>
                            </div><!-- end of col -->
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label">
                                        State
                                        @Html.ValidationMessageFor(model => model.State, "*", new { @class = "text-danger" })
                                    </label>
                                    @Html.DropDownList("State", new SelectList(ViewBag.lststate, "Value", "Text"), new { @data_rel = "Choose_one", @class = "form-control", placeholder = "Please Select..." , @onchange = "checkVali()" })
                                </div>
                            </div><!-- end of col -->

                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label">
                                        Zip
                                        @Html.ValidationMessageFor(model => model.Zip, "*", new { @class = "text-danger" })
                                    </label>
                                    @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "Zip" , @onfocusout = "checkVali()" } })
                                </div>
                            </div><!-- end of col -->
                        </div>

                        <div class="row">
                            <div class="bidreq-box" style="width: 100%;">

                                <h4 class="box-title">Default Bid Request Amount</h4>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="form-label">Bid Request Amount</label>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        <i class="fa fa-dollar tx-16 lh-0 op-6"></i>
                                                    </div>
                                                </div><!-- input-group-prepend -->
                                                @Html.EditorFor(model => model.BidRequestAmount, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "BidRequestAmount" } })
                                            </div>
                                        </div>
                                    </div><!-- end of col -->
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="form-label">
                                                Min. Insurance Amount
                                                @Html.ValidationMessageFor(model => model.MinimumInsuranceAmount, "*", new { @class = "text-danger" })
                                            </label>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        <i class="fa fa-dollar tx-16 lh-0 op-6"></i>
                                                    </div>
                                                </div><!-- input-group-prepend -->
                                                @Html.EditorFor(model => model.MinimumInsuranceAmount, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", autocomplete = "off", placeholder = "MinimumInsuranceAmount" } })
                                            </div>
                                        </div>
                                    </div><!-- end of col -->

                                </div><!-- end of row-->
                            </div><!-- end of bidreq-box -->
                        </div>


                    </div><!--end of card body -->

                    <div id="lblresult">

                    </div>
                    @Html.Hidden("Latitude", "")
                    @Html.Hidden("Longitude", "")
                    <div class="card-footer">

                        <div class="button-row d-flex mt-4">
                            <a href="@Request.UrlReferrer" class="btn btn-default" title="Cancel">Cancel</a>

                            @*<input  class="btn btn-primary ml-auto" id="btnsubmit" type="button" onclick="return validation()" title="Update" value="Update" /><i class="fa fa-loppy-o"></i>*@
                            <input  class="btn btn-primary ml-auto" id="btnNext" type="submit"  title="Update" value="Update"  /><i class="fa fa-loppy-o"></i>
                        </div>



                    </div>

                </div>
            </div>
        </div>
        }

    </div><!--End side app-->
    <!--footer-->
    <footer class="footer">
        <div class="container">
            <div class="row align-items-center flex-row-reverse">
                <div class="col-lg-12 col-sm-12   text-center">
                    Copyright © 2020 Association Bids. All rights reserved.
                </div>
            </div>
        </div>
    </footer>
    <!-- End Footer-->

</div>
<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDXnGGS4mlkx0DnmdnFUVLQ-0i58GSknZ8&sensor=false"></script>
<!-- End app-content-->
<script>
    debugger;

    $(document).ready(function () {
        $("#lblresult").hide();
        document.getElementById('lblresult').innerHTML = '';
        $('#Latitude').val('');
        $('#Longitude').val('');
        checkPoratl();
        $(".chosen-select").chosen();
        $('#loader').show();
        $('.errormessage').html('');
        $('#Error').hide();
        $('#HeaderId').hide();
        $("#news_date").datepic
        $('#Errormanager').hide();
        $('#loader').hide();
        $("#Pmpro").closest('li').addClass('active');
        $("#Pmpro1").addClass('active');
        $(".advance_search").click(function () {
            $("#advancesearch3").toggle(500);
        });
        $(".overlayclose").click(function () {
            $("#advancesearch3").hide();
        });


        function checkVali() {
            $('#btnNext').prop('disabled', false);
            if ($('#Title').val() == "") {
                ////debugger;
                $('#btnNext').prop('disabled', true);
                $(window).scrollTop(0)
                return false;
            }
            var checknumber = $('#NumberOfUnits').val();
            if (jQuery.isNumeric(checknumber) == false)
        /*else if ($('#NumberOfUnits').val() == "0")*/ {
                $('#btnNext').prop('disabled', true);
                $(window).scrollTop(0)
                return false;
            }
            else if ($('#Address').val() == "") {
                $('#btnNext').prop('disabled', true);
                $(window).scrollTop(0)
                return false;
            }
            else if ($('#Zip').val() == "") {
                $('#btnNext').prop('disabled', true);
                $(window).scrollTop(0)
                return false;
            }
            else if ($('#State').val() == "0") {
                $('#btnNext').prop('disabled', true);
                $(window).scrollTop(0)
                return false;
            }
            else {
                $('#btnNext').prop('disabled', false);
            }
        }
    });
    $("#btncancel").click(function () {
        var a = $("#PropertyKey").val();

        window.location.href = 'PropertiesView?PropertyKey=' + $("#PropertyKey").val();

    });
    $("#btnNext").click(function () {
        debugger;
        if ($('#Title').val() == "") {
            ////debugger;
            errormessage = $('.errormessage').html("Please enter mandatory fields.");
            $('#Error').show();
            $(window).scrollTop(0)
            return false;
        }
        var checknumber = $('#NumberOfUnits').val();
        if (jQuery.isNumeric(checknumber) == false)
        {
            errormessage = $('.errormessage').html("Please enter mandatory fields.");
            $('#Error').show();
            $(window).scrollTop(0)
            return false;
        }
        else if ($('#Address').val() == "") {
            errormessage = $('.errormessage').html("Please enter mandatory fields.");
            $('#Error').show();
            $(window).scrollTop(0)
            return false;
        }
        else if ($('#Zip').val() == "") {
            errormessage = $('.errormessage').html("Please enter mandatory fields.");
            $('#Error').show();
            $(window).scrollTop(0)
            return false;
        }
        else if ($('#State').val() == "0") {
            errormessage = $('.errormessage').html("Please enter mandatory fields.");
            $('#Error').show();
            $(window).scrollTop(0)
            return false;
        }
        if ($('#MinimumInsuranceAmount').val() == "" || $('#MinimumInsuranceAmount').val() == null || $('#MinimumInsuranceAmount').val() == "$0.00") {
            errormessage = $('.errormessage').html("Please enter mandatory fields.");
            $('#Error').show();
            $(window).scrollTop(0);
            return false;

        }
        var lat = $('#Latitude').val();

        var mySetting = '@System.Configuration.ConfigurationManager.AppSettings["MapCheck"].ToString()';
        if (mySetting == "Active") {
            if (lat == null || lat == "") {
                var Isvalid = false;
                $('.errormessage').html('');
                $("#Error").hide();

                var geocoder = new google.maps.Geocoder();
                var con = $('#Address').val();
                var Adde = $('#Address2').val();
                var city = $('#City').val();
                var zip = $('#Zip').val();
                var res = document.getElementById('lblresult');
                var com = city + ',' + $('#State').val();

                geocoder.geocode({
                    componentRestrictions: {

                        country: 'USA',
                        postalCode: zip
                    }
                },
                    function (results, status) {
                        debugger;
                        if (status == 'OK') {

                            var marker = new google.maps.Marker({

                                position: results[0].geometry.location


                            });
                            res.innerHTML = "Latitude : " + results[0].geometry.location.lat() + "<br/>Longitude :" +
                                results[0].geometry.location.lng();
                            $('#Latitude').val(results[0].geometry.location.lat());
                            $('#Longitude').val(results[0].geometry.location.lng());
                            $("#btnNext").click();


                        }
                        else {
                            $('.errormessage').html('Invalid address, please enter accurate address');
                            $('#Error').show();
                            $(window).scrollTop(0);
                            Isvalid = false;
                        }
                    });



                if (Isvalid == true) {
                    debugger;
                    return true;
                }
                else {
                    return false;
                }

            }
            else {
                return true;
            }
        }
        else
        {
            return true;
        }


    });

    function checkPoratl() {

        $.ajax({
            url: '@Url.Action("checkPortal", "PMProperties")',
            cache: false,
            data:
            {
                PropertyKey: $('#PropertyKey').val()
            },
            success: function (response) {
                debugger;

                if (response == false) {
                    window.location.href = '@Url.Action("Index", "Login")';
                }

                else {

                }

            }
        });
    }


    $("#btndelete").click(function () {
        //alert("Delete");
        if (confirm('Are you sure you want to delete this record?')) {
            window.location.href = 'Delete?PropertyKey=' + $("#PropertyKey").val();
            return true;
        }
        else {
            return false;
        }
    });
    //$(document).ready(function () {
    //    document.getElementById('lblresult').innerHTML = '';
    //    $('#Latitude').val('');
    //    $('#Longitude').val('');

    //    $(".chosen-select").chosen();
    //    $('#loader').show();
    //    $('.errormessage').html('');
    //    $('#Error').hide();
    //    $('#HeaderId').hide();
    //    $("#news_date").datepic
    //    $('#Errormanager').hide();
    //    $('#loader').hide();
    //    $(".advance_search").click(function () {
    //        $("#advancesearch3").toggle(500);
    //    });
    //    $(".overlayclose").click(function () {
    //        $("#advancesearch3").hide();
    //    });

    //});

    function validation() {
        debugger;

        $('#loader').show();
        $('.errormessage').html('');

        if ($('#Title').val() == "") {
            $('.errormessage').html('Please Enter Mandatory Fields.');
            $('#Error').show();
            $(window).scrollTop(0);
            return false;
        }

        else if ($('#NumberOfUnits').val() == "0") {
            $('.errormessage').html('Please Enter Mandatory Fields.');
            $('#Error').show();
            $(window).scrollTop(0);
            return false;
        }

        else if ($('#Address').val() == "") {
            $('.errormessage').html('Please Enter Mandatory Fields.');
            $('#Error').show();
            $(window).scrollTop(0);
            return false;
        }


        else {
            var mySetting = '@System.Configuration.ConfigurationManager.AppSettings["MapCheck"].ToString()';
            if (mySetting == true) {
                var geocoder = new google.maps.Geocoder();
                var con = $('#Address').val();
                var Adde = $('#Address2').val();
                var city = $('#City').val();
                var zip = $('#Zip').val();
                var res = document.getElementById('lblresult');
                var com = con + ', ' + city + ', ' + $('#State').val() + ', ' + zip;
                console.log()

                if (res.innerHTML.length == 0) {
                    geocoder.geocode({
                        componentRestrictions: {

                            country: 'USA',
                            postalCode: zip
                        }
                    }, function (results, status) {

                        if (status == 'OK') {
                            res.innerHTML = "Latitude : " + results[0].geometry.location.lat() + "<br/>Longitude :" +
                                results[0].geometry.location.lng();
                            $('#Latitude').val(results[0].geometry.location.lat());
                            $('#Longitude').val(results[0].geometry.location.lng());
                            $("#btnNext").click();
                        } else {
                            $('.errormessage').html('Invalid address, please enter accurate address');
                            $('#Error').show();
                            $(window).scrollTop(0);
                            Isvalid = false;
                        }
                    });
                    return false;
                }
                else {
                    $('#Error').hide();
                    return true;
                }
                $('#Error').hide();
            }
            else
            {
                return true;
            }
            }
            return false;
        
    };

    function readURL(input) {
        debugger;
        $("#divFileUploader table tbody tr:eq(0)").show();
        for (var i = 0; i < input.files.length; i++) {
            var cln = $("#divFileUploader table tbody tr:eq(0)").clone(true);
            $(".upd-fl", cln).html(input.files[i].name);
            $("#divFileUploader table").append(cln);
        }
        $("#divFileUploader table tbody tr:eq(0)").hide();
    }

    function removeman(me) {

        if ($(".manspan").text() == "") {
            $("#managerdiv table tbody tr:eq(0)").hide();
        }
        else {
            $(me).closest("tr").remove();
        }

    }


    function Manager() {
        debugger;

        var options = [];
        options.push('0');

        $('#ManagerChoosen1_chosen').hide();
        // $('.chosen-choices').hide();
        $('#dataTableExample tbody tr:not(:first-child)').each(function (i, e) {
            options.push($(e).find('td:eq(0)').find('span.manspanId').html());
        });
        $('#ManagerChoosen').val(options).trigger("liszt:updated");
        $('#ManagerChoosen').val(options).trigger("chosen:updated");
    }
</script>

