USE [AssociationBids]
GO
/****** Object:  StoredProcedure [dbo].[_site_temp_selectVendors]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[_site_temp_selectVendors]
@companykey int
As
Begin
	Select c.CompanyKey,R.ResourceKey,c.Address,c.Address2,c.City,c.State,c.Zip
	,r.Address as r_Address,r.Address2 as r_Address2,r.City as r_City,r.State as r_State,r.Zip as r_Zip,
	sa.ServiceAreaKey,sa.Radius
	from Resource r
	join Company c on c.CompanyKey = r.CompanyKey
	join ServiceArea sa on sa.VendorKey = c.CompanyKey
	where (@companykey = 0 or c.CompanyKey = @companykey)
End
GO
/****** Object:  StoredProcedure [dbo].[_site_Temp_updateLocation]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[_site_Temp_updateLocation]
@serviceareakey int,
@vendorkey int,
@address varchar(500),
@address2 varchar(500),
@city varchar(100),
@state varchar(20),
@zip varchar(20),
@lat decimal(8,6),
@long decimal(8,6),
@radius int
as
Begin
	update ServiceArea set 	Address = @address,Address2 = @address2,City = @city,State = @state, Zip = @zip,
	Radius = @radius,Latitude = @lat,Longitude = @long
	where VendorKey = @vendorkey
End
GO
/****** Object:  StoredProcedure [dbo].[_site_VendorManager_GetAll_CompanyManagement]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE Procedure [dbo].[_site_VendorManager_GetAll_CompanyManagement]
AS
BEGIN

--select CompanyKey,Name as CompanyName,Status from Company where CompanyTypeKey in
-- (Select LookUpKey from LookUp where LookUpTypeKey in
-- (Select LookUpTypeKey from LookUpType where Title = 'Company Type') and Title in('Management Company')
-- and Status in (select LookUpKey from LookUp where LookUpTypeKey = (select LookUpTypeKey from LookUpType
-- where Title = 'Status') and Title = 'Approved'))


 select companyKey,name as CompanyName,Status  from Company as cp
 inner join lookup as lu on cp.CompanyTypeKey = lu.lookupkey 
 inner join LookUpType as lp on lu.lookuptypekey = lp.LookUpTypeKey inner join LookUp as LK on  Lk.LookUpKey=cp.CompanyTypeKey where LK.Title='Management Company' order by CompanyName asc
 --where lp.title = 'Company Type' and lu.title = 'Management Company' and
 --lp.title = 'Status' and lu.title = 'Approved'
END

select * from LookUp
GO
/****** Object:  StoredProcedure [dbo].[_site_VendorManager_Update_InvitedVendor]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[_site_VendorManager_Update_InvitedVendor]
@CompanyKey int,
@ResourceKey int,
@CompanyName nvarchar(500),
@Address nvarchar(max),
@Address2 nvarchar(max),
@City nvarchar(200),
@State nvarchar(2),
@Zip nvarchar(150),
@FirstName nvarchar(100),
@LastName nvarchar(100),
@Cellphone nvarchar(50),
@Email nvarchar(500)

AS
BEGIN
if(@State='0')
begin
set @State=null
end
update Company Set Name = @CompanyName,Address = @Address,Address2 = @Address2,City = @City,State = @State,
	Zip = @Zip,LastModificationTime =  GETDATE() where CompanyKey = @CompanyKey;

update Resource Set FirstName = @FirstName,LastName = @LastName,CellPhone = @Cellphone,Email = @Email,
	City = @City,State = @State,Zip = @Zip,Address = @Address,Address2 = @Address2,LastModificationTime =  GETDATE()
	where ResourceKey = @ResourceKey


END
GO
/****** Object:  StoredProcedure [dbo].[api_ABNotification_GetAcceptRejectBid]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_ABNotification_GetAcceptRejectBid 2098

CREATE Procedure [dbo].[api_ABNotification_GetAcceptRejectBid]
@UserKey int
As
Begin
	declare @ResourceKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	select * from ABNotification ab
	join BidRequest br on ab.ObjectKey = br.BidRequestKey
	where (ab.NotificationType = 'BidReqStatusAccept' 
	or ab.NotificationType = 'BidReqStatusReject' 
	or ab.NotificationType = 'BidReqStatusRejByAcceptOther')
	and ab.ModuleKey in(100,106) and ab.Status = '900'
	and ab.ForResource = @ResourceKey

End
GO
/****** Object:  StoredProcedure [dbo].[api_ABNotification_GetNotificationModule]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--api_ABNotification_GetNotificationModule 2099
CREATE Procedure [dbo].[api_ABNotification_GetNotificationModule]
@UserKey int
As
Begin
	declare @ResourceKey int
	declare @portalkey int
	declare @ckey int
	select @ResourceKey = ResourceKey from [user] where Userkey = @UserKey
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	if(@portalkey = 2)
	Begin
		select ab.ModuleKey,l.Title,Count(*) as Total,(select top 1 m.Title from Module m where m.ModuleKey = ab.ModuleKey) as ModuleName from ABNotification ab
		join Lookup l on l.Lookupkey = Status
		where ModuleKey in (100,106) and ForResource = @ResourceKey and Status = 900
		Group By ModuleKey,l.Title Having Count(*) >= 1 
	End
	Else if(@portalkey = 3)
	Begin
		select ab.ModuleKey,l.Title,Count(*) as Total,(select top 1 m.Title from Module m where m.ModuleKey =ab.ModuleKey) as ModuleName from ABNotification ab
		join LookUp l on l.LookUpKey = Status
		where ModuleKey in(100,106) and ForResource = @ResourceKey and Status = 900
		and NotificationType != 'BidReqStatusReject' and NotificationType != 'BidReqStatusRejByAcceptOther'
		Group By ModuleKey,l.Title Having COUNT(*) >= 1
	End

End
GO
/****** Object:  StoredProcedure [dbo].[api_ABNotification_SelectAllByModuleAndType]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- site_ABNotification_SelectAllByModuleAndType 1062,0,''
CREATE Procedure [dbo].[api_ABNotification_SelectAllByModuleAndType]
@ResourceKey int,
@ModuleKey int = 0,
@NotificationType varchar(200) = ''
AS
Begin
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	print(@portalkey)
	if(@portalkey = 1)
	begin
	
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Invoices' or Title = 'Register')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
		order by ab.DateAdded desc
	end
	else if(@portalkey = 2)
	Begin
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Bid Requests' or Title = 'Work Orders')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
	End
	Else if(@portalkey = 3)
	Begin

		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Bid Requests' or Title = 'Work Orders')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
	End
End
GO
/****** Object:  StoredProcedure [dbo].[api_ABNotification_SelectAllByModuleAndTypeByResource]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- site_ABNotification_SelectAllByModuleAndType 1062,0,''
CREATE Procedure [dbo].[api_ABNotification_SelectAllByModuleAndTypeByResource]
@ResourceKey int,
@ModuleKey int = 0,
@NotificationType varchar(200) = ''
AS
Begin
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	print(@portalkey)
	if(@portalkey = 1)
	begin
	
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ByResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Invoices' or Title = 'Register')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
		order by ab.DateAdded desc
	end
	else if(@portalkey = 2)
	Begin
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ByResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Bid Requests' or Title = 'Work Orders')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
	End
	Else if(@portalkey = 3)
	Begin

		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ByResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Bid Requests' or Title = 'Work Orders')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
	End
End
GO
/****** Object:  StoredProcedure [dbo].[api_ABNotification_SelectAllNotifications]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--api_ABNotification_SelectAllNotifications 6395
CREATE Procedure [dbo].[api_ABNotification_SelectAllNotifications]
@UserKey int
As
Begin
declare @ResourceKey int
	declare @portalkey int
	declare @ckey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	if(@portalkey = 2)
	begin
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		(case when ab.ModuleKey in (100,106) then (select top 1 Title from BidRequest where ab.ObjectKey = BidRequestKey) else '' End) as ObjectTitle,
		isnull((select top 1 BidVendorKey from BidVendor where VendorKey = (select top 1 CompanyKey from Resource where ResourceKey = ab.ByResource)),0) as BidVendorKey,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in(100,106) and ab.Status = 900
		order by ab.DateAdded desc
	end
	else if(@portalkey = 3)
	begin
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		(case when ab.ModuleKey in (100,106) then (select top 1 Title from BidRequest where ab.ObjectKey = BidRequestKey)
		when ab.ModuleKey = 302 then (select top 1 PolicyNumber from Insurance where ab.ObjectKey = InsuranceKey) else '' End) as ObjectTitle,
		0 as BidVendorKey,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in(100,106,300,301,302)  and ab.Status = 900
		order by ab.DateAdded desc
	end
End
GO
/****** Object:  StoredProcedure [dbo].[api_ABNotification_SelectByObjectAndModule]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[api_ABNotification_SelectByObjectAndModule]
@ObjectKey int,
@ModuleKey int,
@UserKey int = 0
AS
Begin
declare @isAll int
declare @ResourceKey int
if(@UserKey = 0)
Begin
set @ResourceKey = 0
end
Else
Begin
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
End
	select @isAll = case when(@ResourceKey = 0) then 0 else 1 end
	if(@isAll = 0)
	Begin
	select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ab.ModuleKey = @ModuleKey and ab.ObjectKey = @ObjectKey
		order by ab.DateAdded desc
	End
	Else
	Begin
	select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey = @ModuleKey and ab.ObjectKey = @ObjectKey
		order by ab.DateAdded desc
	End
End
GO
/****** Object:  StoredProcedure [dbo].[api_ABNotification_SelectByType]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_ABNotification_SelectByType 2098,100,'BidReqMsg'
CREATE Procedure [dbo].[api_ABNotification_SelectByType]
@UserKey int,
@ModuleKey int,
@Type varchar(50)
As
Begin
	declare @ResourceKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	select * from AbNotification 
	where ForResource = @ResourceKey 
	and NotificationType = @Type 
	and ModuleKey = @ModuleKey
	and Status = 900
End
GO
/****** Object:  StoredProcedure [dbo].[api_Bid_Note_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_Bid_Note_Insert 2530,2098,'Hello',0,0
CREATE Procedure [dbo].[api_Bid_Note_Insert]
@BidRequestKey int,
@UserKey int,
@Note nvarchar(max),
@NoteKey int OUTPUT,
@errorCode int OUTPUT
As
Begin
declare @ModuleKey int
declare @ResourceKey int

select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
if(@ResourceKey != 0)	
	Begin 
		select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey
		if(@ModuleKey is not null and @ModuleKey > 0)
		Begin
		insert into Note(ModuleKey,ResourceKey,ObjectKey,Description,LastModificationTime,Status)
		values(@ModuleKey,@ResourceKey,@BidRequestKey,@Note,GETDATE(),101)

		set @NoteKey = @@IDENTITY
		End
		set @errorCode = @@ERROR
	End
Else
	BEGIN
		Set @errorCode = 1
	END
End
GO
/****** Object:  StoredProcedure [dbo].[api_Bid_UpdateStatus]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[api_Bid_UpdateStatus]
--api_Bid_UpdateStatus 2626,4254,0,'','12/12/2000','submmited',0
@BidVendorKey int,
@UserKey int,
@Total money,
@Description nvarchar(max),
@LastModificationTime datetime,
@Status nvarchar(100),
@errorCode int output
AS
BEGIN
declare @ResourceKey int
select top(1) @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
declare @MessageStatus nvarchar(100)
(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title=@Status)
print(@MessageStatus)
declare @BidVenderstats nvarchar(100)
select top(1) @BidVenderstats= lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status') and Title=@Status

Declare @BidVenderstatsReject  nvarchar(50)
-----1-------------------------------------------------------------------------------
if(@Status='Accepted')
begin
print(1)
select top(1) @BidVenderstatsReject= lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title='Rejected'
select top(1) @BidVenderstats= lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title=@Status
Update  BidVendor Set BidVendorStatus=@BidVenderstatsReject where BidVendorStatus=@BidVenderstats and BidRequestKey in (Select BidRequestKey From BidVendor where BidVendorKey=@BidVendorKey)

print(@BidVenderstatsReject)
print(@BidVenderstats)

end
-----1-------------------------------------------------------------------------------


-----12-------------------------------------------------------------------------------
if(@Status!='getid')
begin
print(12)
Update  BidVendor Set BidVendorStatus=@BidVenderstats where BidVendorKey=@BidVendorKey
end
------12----------------------------------------------------------------------------------

----123-------------------------------------------------------------------------
		if((Select Count(*) From Bid where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey)>0)
		begin
		if(@Status!='getid')
		begin
		  Update Bid set Total=@Total,Description=@Description,LastModificationTime=@LastModificationTime,BidStatus=@MessageStatus
		  where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey
		  --Update BidVendor set RespondByDate=getdate() where BidVendorKey=@BidVendorKey
		  end
		  end 
----123-------------------------------------------------------------------------

-------1234------------------------------------------------------------------------------------------------
	  if((Select Count(*) From Bid where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey)=0)
	  begin
	  print(1234)
		 ---12345--------------------------
				  if(@Status='getid' )
				  begin
				  print(12345)
					(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title='In Progress')
				  end
		---12345-------------------------
	  insert into Bid (BidVendorKey,ResourceKey,Title,Total,Description,LastModificationTime,BidStatus) 
	  values(@BidVendorKey,@ResourceKey,'',@Total,@Description,@LastModificationTime,@MessageStatus)  

	 -- Update BidVendor set RespondByDate=getdate() where BidVendorKey=@BidVendorKey
	  end
-------1234-------------------------------------------------------------


 select @errorCode = @@ERROR
 --   Select @BidKey= BidKey From Bid  where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey 
	--Select @BidKey as BidKey
 -- Select BidKey From Bid  where BidVendorKey=2007 and ResourceKey=4254
END
GO
/****** Object:  StoredProcedure [dbo].[api_BidDocument_Delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_BidDocument_Delete 2165,2452,0
CREATE Procedure [dbo].[api_BidDocument_Delete]
@ObjectKey int,
@DocumentKey int,
@errorCode int OUTPUT
AS
Begin
	delete from Document where DocumentKey = @DocumentKey and ObjectKey = @ObjectKey

	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidDocument_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--
CREATE Procedure [dbo].[api_BidDocument_Insert]
@ObjectKey int,
@ModuleKey int = 0,
@FileName nvarchar(200),
@FileSize float,
@DocumentKey int output,
@errorCode int output
As
Begin

	if(@ModuleKey = 0)
	begin
		select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @ObjectKey
	end
	if(@ModuleKey != 0)
	Begin
		insert into Document(ModuleKey,ObjectKey,FileName,FileSize,LastModificationTime)
		values(@ModuleKey,@ObjectKey,@FileName,@FileSize,GETDATE())
	End
	select @DocumentKey = @@IDENTITY
	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidDocument_MultiDelete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_BidDocument_MultiDelete 4039,'4718,4720',0
CREATE Procedure [dbo].[api_BidDocument_MultiDelete]
@ObjectKey int,
@DocumentKeys varchar(max),
@errorCode int OUTPUT
AS
Begin

declare @tbl table(ids varchar(max));

insert into @tbl select * from dbo.Split_VarChar(@DocumentKeys,',')

	delete from Document where DocumentKey in(select Convert(int,ids) from @tbl) and ObjectKey = @ObjectKey

	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidReqeust_Approved_Reject]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- api_BidReqeust_Approved_Reject 'Accept',14936,0,0
CREATE Procedure [dbo].[api_BidReqeust_Approved_Reject]
@status VARCHAR(150),
@BidVendorKey int, 
@errorCode INT OUTPUT,
@WorkorderKey INT Output
AS
SET NOCOUNT ON
Begin

declare @bidrequestkey1 int
declare @workkey int = 0
declare @workbidvenkey int
select @bidrequestkey1 = bv.BidRequestKey from BidVendor as bv 
inner join BidRequest as br on br.BidRequestKey  = bv.BidRequestKey
where bv.BidVendorKey = @BidVendorKey
Declare @ModuleKey int
Select top(1) @ModuleKey=ModuleKey From Module where Module.Controller='BidRequest'

if (@status = 'Accept')
begin
declare @statusTypeKey2 int
select  @statusTypeKey2 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Completed') from LookUpType as lu where Title = 'Bid Request Status'

declare @statusTypeKey3 int
select  @statusTypeKey3 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Accepted') from LookUpType as lu where Title = 'Bid Status'

declare @statusTypeKey4 int
select  @statusTypeKey4 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Rejected') from LookUpType as lu where Title = 'Bid Status'


--update BidVendor set BidVendorStatus = @statusTypeKey3 where BidVendorKey = @BidRequestKey
update BidVendor set BidVendorStatus = @statusTypeKey3 where BidVendorKey = @BidVendorKey
update BidVendor set BidVendorStatus = @statusTypeKey4 where BidRequestKey = @bidrequestkey1 and  BidVendorStatus   != @statusTypeKey3

if((select ModuleKey from BidRequest where BidRequestKey = @bidrequestkey1)=@ModuleKey)
begin

update BidRequest set BidRequestStatus = @statusTypeKey2 where BidRequestKey =  @bidrequestkey1
INSERT INTO BidRequest
                         (PropertyKey, ResourceKey, ServiceKey, Title, BidDueDate, StartDate, EndDate, Description, DateAdded, LastModificationTime, BidRequestStatus, DefaultRespondByDate, ModuleKey)
        (select top(1) PropertyKey,ResourceKey,ServiceKey,Title,BidDueDate,StartDate,EndDate,Description,DateAdded,LastModificationTime,601,DefaultRespondByDate,106 from BidRequest where BidRequestKey = @bidrequestkey1)

		select  @workkey = @@IDENTITY
		select @WorkorderKey = @workkey
		print(@WorkorderKey)

INSERT INTO BidVendor
                         (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)
(select top(1) @workkey,VendorKey,ResourceKey,BidVendorID,IsAssigned,RespondByDate ,DateAdded,LastModificationTime,802 from BidVendor where BidVendorKey= @BidVendorKey and BidRequestKey = @bidrequestkey1 and BidVendorStatus = @statusTypeKey3)
select  @workbidvenkey = @@IDENTITY


INSERT INTO Document
                         ( ModuleKey, ObjectKey, FileName, FileSize, LastModificationTime)
select (select ModuleKey from Module where Controller = 'PMWorkOrders'),@workkey,FileName,FileSize,LastModificationTime 
from Document where ObjectKey = @bidrequestkey1  and ModuleKey in ((select ModuleKey from Module where Controller = 'PMBidRequests'),100) 

INSERT INTO Document
                         ( ModuleKey, ObjectKey, FileName, FileSize, LastModificationTime)
select (select ModuleKey from Module where Controller = 'PMWorkOrders'),@workbidvenkey,FileName,FileSize,LastModificationTime 
from Document where ObjectKey = @BidVendorKey  and ModuleKey in ((select ModuleKey from Module where Controller = 'PMBidRequests'),100) 


INSERT INTO Bid
                         (BidVendorKey, ResourceKey, Title, Total, Description, LastModificationTime, BidStatus)
(select (select BidVendorKey from BidVendor where BidVendorKey = @workbidvenkey),ResourceKey,Title,Total,Description,LastModificationTime,802 from Bid where BidVendorKey =@BidVendorKey)



INSERT INTO Note
                         ( ModuleKey, ResourceKey, ObjectKey, Description, LastModificationTime,Status)
select (select ModuleKey from Module where Controller = 'BidRequest'),ResourceKey,@workkey,Description,LastModificationTime,Status from Note where ObjectKey = @bidrequestkey1  and ModuleKey in (select ModuleKey from Module where Controller = 'BidRequest'
) 

INSERT INTO Message
 ( ModuleKey, ResourceKey, ObjectKey, Body, LastModificationTime,MessageStatus)
select (select ModuleKey from Module where Controller = 'WorkOrder'),ResourceKey,@workbidvenkey,Body,LastModificationTime,MessageStatus from Message 
where ObjectKey = @BidVendorKey  and ModuleKey in (select ModuleKey from Module where Controller = 'BidRequest') 

end
set @errorCode = @@ERROR
end

else if @status = 'Reject'
begin
declare @statusTypeKey5 int
select  @statusTypeKey5 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Rejected') from LookUpType as lu where Title = 'Bid Status'
update BidVendor set BidVendorStatus = @statusTypeKey5 where BidVendorKey = @BidVendorKey
set @errorCode = @@ERROR
end
Else
Begin
set @errorCode = 1
End


Declare @Table1 table
(
FileCopyTo nvarchar(max)
)
Declare @Table2 table
(
FilePastTo nvarchar(max)
)
insert into @Table1 select Convert(nvarchar, ObjectKey)+' '+FileName as FileCopyTo
from Document where ObjectKey = @bidrequestkey1  and ModuleKey in (select ModuleKey from Module where Controller = 'PMBidRequests')

insert into @Table2 select Convert(nvarchar, ObjectKey)+' '+FileName as FilePastTo
from Document where ObjectKey = @workkey  and ModuleKey in (select ModuleKey from Module where Controller = 'PMWorkOrders')

select j.FileCopyTo,k.FilePastTo from 
(select a.FileCopyTo  , ROW_NUMBER() over(order by (SELECT 1000)) rownum from @Table1 as a 

) j

inner join 
(select a.FilePastTo, ROW_NUMBER() over(order by (SELECT 1000)) rownum from @Table2 as a) k
on j.rownum = k.rownum

end
GO
/****** Object:  StoredProcedure [dbo].[api_BidRequest_Complete_Close]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[api_BidRequest_Complete_Close]
@Status nvarchar(20),
@BidRequestKey int,
@errorCode int output
As
Begin
if(@Status = 'Completed')
	begin
	Update BidRequest Set BidRequestStatus = (Select LookupKey from Lookup where LookupTypeKey = 6 and Title = @Status)
	where BidRequestKey = @BidRequestKey
	select @errorCode = @@ERROR
	end
	else if(@Status = 'Closed')
	begin
	Update BidRequest Set BidRequestStatus = (Select LookupKey from Lookup where LookupTypeKey = 6 and Title = @Status)
	where BidRequestKey = @BidRequestKey
	select @errorCode = @@ERROR
	end
	else
	begin
	select @errorCode = 2
	end
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidRequest_DO_Submitted]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--api_BidRequest_DO_Submitted 'Submitted',2587,0
CREATE PROCEDURE [dbo].[api_BidRequest_DO_Submitted]

	@status VARCHAR(150),
	@BidRequestKey int, 
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
Begin
Declare @ModuleKey int

select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey

if @status = 'Submitted'
begin

declare @statusTypeKey1 int
select  @statusTypeKey1 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Submitted') from LookUpType as lu where Title = 'Bid Request Status'
update BidRequest set BidRequestStatus = @statusTypeKey1 where BidRequestKey =  @BidRequestKey

set @errorCode = @@ERROR
end
else
begin
 set @errorCode = 1
end
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidRequest_Five_GetVendorsForBidRequestByAlgorithm]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- api_BidRequest_Five_GetVendorsForBidRequestByAlgorithm 2146
CREATE procedure [dbo].[api_BidRequest_Five_GetVendorsForBidRequestByAlgorithm]
@BidRequestkey int,
@Modulekey int = 100
As
begin

declare @count int

select @count = count(1) from BidVendor where BidVendor.BidRequestKey = @BidRequestkey

select @Modulekey = ModuleKey from BidRequest where BidRequestKey = @BidRequestkey

if(@count = 0 and @Modulekey =100)
begin
	insert into BidVendor
	select top 5 @BidRequestkey, cp.CompanyKey, null, '', 0, DATEADD(Day,2,getdate()), getdate(), getdate(), 
	(select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Vendor Status') and LookUp.Title in ('In Progress'))
	 from Company as cp 
	inner join resource as rs on rs.CompanyKey = cp.CompanyKey
	inner join VendorService as vs on cp.CompanyKey = vs.VendorKey and  vs.ServiceKey = (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)
	where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and 
	LookUp.Title in ('Company Vendor','Vendor')) and cp.Status = 101
end


select  Name,bv.BidVendorKey,bv.VendorKey, isnull(Resource.FirstName, '') + ' ' + isnull(Resource.LastName,'') as 'ContactPerson', convert(varchar(10),RespondByDate,101) as RespondByDate,convert(varchar(10),br.BidDueDate,101) as BidDueDate,
isnull((select Total from bid where bid.BidVendorKey = bv.bidvendorkey and bid.BidStatus in (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Status') and LookUp.Title

in ('Submitted','Accepted'))),0) as BidAmount,bv.IsAssigned,
(select top 1 service.Title from Service where Service.ServiceKey = (select BidRequest.ServiceKey from BidRequest where BidRequestKey = @BidRequestkey)) as Service, bv.VendorKey as CompanyKey,
(select top 1 l.Title from [LookUp] l where l.LookUpKey = bv.BidVendorStatus) as BidVendorStatus
from BidVendor bv
inner join BidRequest br on br.BidRequestKey = bv.BidRequestKey
inner join Company c on c.companyKey = bv.VendorKey
inner join Resource on Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1
where bv.BidRequestKey = @BidRequestkey

end
GO
/****** Object:  StoredProcedure [dbo].[api_BidRequest_Five_GetVendorsForBidRequestByAlgorithm_Copy]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






      
        
        
-- [api_BidRequest_Five_GetVendorsForBidRequestByAlgorithm_Copy] 7862,100        
CREATE procedure [dbo].[api_BidRequest_Five_GetVendorsForBidRequestByAlgorithm_Copy]        
@BidRequestkey int    
As        
begin        
        
declare @count int        
        
declare @Modulekey int
DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)      
      
select @LAT = Latitude, @LONG = Longitude from Property where PropertyKey = (select propertykey from bidrequest where BidRequestKey = @BidRequestkey)      
      
SET @geo1= geography::Point(@LAT, @LONG, 4326)     
select @Modulekey = ModuleKey from BidRequest where BidRequestKey = @BidRequestkey
      
select @count = count(1) from BidVendor where BidVendor.BidRequestKey = @BidRequestkey        
        
if(@count = 0 and @Modulekey =100)        
begin        
 insert into BidVendor        
 select top 5 @BidRequestkey, cp.CompanyKey, null, '', 0, (select top 1 DefaultRespondByDate from BidRequest where BidRequestKey = @BidRequestkey), getdate(), getdate(),         
 (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Vendor Status') and LookUp.Title in ('In Progress'))        
  from Company as cp           
 inner join VendorService as vs on cp.CompanyKey = vs.VendorKey and  vs.ServiceKey = (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)        
 --inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey      
 where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and         
 LookUp.Title in ('Company Vendor','Vendor')) and cp.Status = 101     
 order by NEWID()
 --and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5      
      
      
end        
      
Declare @TotalApceptRecord int        
select  @TotalApceptRecord=count(1)        
from BidVendor bv        
inner join Company c on c.companyKey = bv.VendorKey          
where bv.BidRequestKey = @BidRequestkey    
        
        
        
select @TotalApceptRecord as TotalApceptRecord, Name,bv.BidVendorKey,bv.VendorKey,br.ModuleKey,
(select BidDueDate from BidRequest Where BidRequestKey = bv.BidRequestKey) as BidDueDate,
(select top 1 isnull(Resource.FirstName, '') + ' ' + isnull(Resource.LastName,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'ContactPerson',     
convert(varchar(10),bb.LastModificationTime,101) as RespondByDate,convert(varchar(10),br.DefaultRespondByDate,101) as DefaultRespondByDate,  bb.Description as Descrip,      
isnull((select top(1) Total from bid where bid.BidVendorKey = bv.bidvendorkey and bid.BidStatus in (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Status') and LookUp.Title in ('Submitted','Accepted'))),0) as BidAmount,        
(select top 1 service.Title from Service where Service.ServiceKey = (select BidRequest.ServiceKey from BidRequest where BidRequestKey = @BidRequestkey)) as Service, bv.VendorKey as CompanyKey,        
(select top 1 l.Title from [LookUp] l where l.LookUpKey = bv.BidVendorStatus) as BidVendorStatus, (select top 1 l.Title from [LookUp] l where l.LookUpKey = br.BidRequestStatus) as BidRequeststatus,  
(select top 1 isnull(Resource.Email,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Email',
(select top 1 isnull(Resource.Work,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Work',
(select top 1 isnull(Resource.Work2,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Work2',
(select top 1 isnull(Resource.Fax,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Fax',
(select top 1 isnull(Resource.Address,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Address',
(select top 1 isnull(Resource.Address2,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Address2',
(select top 1 isnull(Resource.City,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'City',
(select top 1 isnull(Resource.State,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'State',
(select top 1 isnull(Resource.Zip,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Zip',
c.Website,
bv.IsAssigned 
from BidVendor bv        
inner join Company c on c.companyKey = bv.VendorKey    
inner join BidRequest br on  br.BidRequestKey = bv.BidRequestKey  
left  join  bid   bb  on  bb.BidVendorKey = bv.BidVendorKey
where bv.BidRequestKey = @BidRequestkey 
        

	
end
GO
/****** Object:  StoredProcedure [dbo].[api_BidRequest_GetOpenBidCount]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- api_BidRequest_GetOpenBidCount 3109,0,0
CREATE Procedure [dbo].[api_BidRequest_GetOpenBidCount]
@UserKey int,
@WorkOrderCount int output,
@BidRequestCount int output
AS
Begin
declare @GroupKey int
	declare @ResourceKey int
	declare @CompanyKey int
	declare @portalKey int
	
	select @ResourceKey = ResourceKey from [user] where UserKey = @UserKey
	select @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @PortalKey = PortalKey from Company where CompanyKey = @CompanyKey
	print(@PortalKey)
	if(@portalKey = 2)
	Begin
	select top 1 @GroupKey = GroupKey from GroupMember where ResourceKey = @ResourceKey order by GroupKey asc

	select @WorkOrderCount = count(*) from BidRequest b
	inner join Property p on p.PropertyKey = b.PropertyKey
	where BidRequestStatus in(600,601) and ModuleKey = 106
	and 1 = (select Case when(@GroupKey = 1) then 1 
	else(select case when((select count(*) as c from PropertyResource where ResourceKey = @ResourceKey  and b.PropertyKey = PropertyKey) > 0) then 1 else 0 end)end)

	select @BidRequestCount = count(*) from BidRequest b
	inner join Property p on p.PropertyKey = b.PropertyKey
	where BidRequestStatus in(600,601) and ModuleKey = 100
	and 1 = (select Case when(@GroupKey = 1) then 1 
	else(select case when((select count(*) as c from PropertyResource where ResourceKey = @ResourceKey and b.PropertyKey = PropertyKey) > 0) then 1 else 0 end)end)

	print(@BidRequestCount)
	print(@WorkOrderCount)
	End
	else if(@portalKey = 3)
	Begin
		select @WorkOrderCount = count(*) from BidRequest b
	inner join BidVendor bv on bv.BidRequestKey = b.BidRequestKey
	where bv.BidVendorStatus in(700,701,802) and b.BidRequestStatus in(601)  and ModuleKey = 106
	and bv.VendorKey = @CompanyKey
	
	select @BidRequestCount = count(*) from BidRequest b
	inner join BidVendor bv on bv.BidRequestKey = b.BidRequestKey
	where bv.BidVendorStatus in(700,701) and b.BidRequestStatus in(601) and ModuleKey = 100
	and bv.VendorKey = @CompanyKey
	
	print(@BidRequestCount)
	print(@WorkOrderCount)
	End
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidRequest_GetVendorsForBidRequestByAlgorithm]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- api_BidRequest_GetVendorsForBidRequestByAlgorithm 11042
CREATE procedure [dbo].[api_BidRequest_GetVendorsForBidRequestByAlgorithm]
@BidRequestkey int,
@Modulekey int = 100
As
begin

declare @count int

select @count = count(1) from BidVendor where BidVendor.BidRequestKey = @BidRequestkey

select @Modulekey = ModuleKey from BidRequest where BidRequestKey = @BidRequestkey

DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)                
                
select @LAT =isnull(Latitude,''), @LONG =isnull(Longitude,'') from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @BidRequestkey)                
                
SET @geo1= geography::Point(@LAT, @LONG, 4326)  

if(@count = 0 and @Modulekey =100)
begin
	insert into BidVendor
	select @BidRequestkey, cp.CompanyKey, null, '', 0, DATEADD(Day,2,getdate()), getdate(), getdate(), 
	(select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Vendor Status') and LookUp.Title in ('In Progress'))
	 from Company as cp 
	inner join resource as rs on rs.CompanyKey = cp.CompanyKey
	inner join VendorService as vs on cp.CompanyKey = vs.VendorKey and  vs.ServiceKey = (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)
	inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey  
	where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and 
	LookUp.Title in ('Company Vendor','Vendor')) and cp.Status = 101
	and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5         
       order by NEWID() 
end


select  Name,bv.BidVendorKey,br.BidRequestKey,bv.VendorKey, isnull(Resource.FirstName, '') + ' ' + isnull(Resource.LastName,'') as 'ContactPerson', convert(varchar(10),RespondByDate,101) as RespondByDate,convert(varchar(10),br.BidDueDate,101) as BidDueDate,
isnull((select Total from bid where bid.BidVendorKey = bv.bidvendorkey and bid.BidStatus in (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Status') and LookUp.Title

in ('Submitted','Accepted'))),0) as BidAmount,bv.IsAssigned,
(select top 1 service.Title from Service where Service.ServiceKey = (select BidRequest.ServiceKey from BidRequest where BidRequestKey = @BidRequestkey)) as Service, bv.VendorKey as CompanyKey,
(select top 1 l.Title from [LookUp] l where l.LookUpKey = bv.BidVendorStatus) as BidVendorStatus,
(select top 1 isnull(Resource.ResourceKey,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'ResourceKey'
from BidVendor bv
inner join BidRequest br on br.BidRequestKey = bv.BidRequestKey
inner join Company c on c.companyKey = bv.VendorKey
inner join Resource on Resource.CompanyKey = c.CompanyKey
where bv.BidRequestKey = @BidRequestkey

end
GO
/****** Object:  StoredProcedure [dbo].[api_BidRequest_Rating_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
CREATE PROCEDURE [dbo].[api_BidRequest_Rating_Insert]  
 @Message nvarchar(max),  
 @Rating1 int,
 @UserKey int,  
 @BidRequestKey int,  
 @errorCode int output  
   
  
AS  
SET NOCOUNT ON  
  declare  @vendorKey int  
   declare @ResourceKey int

   select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
  select @vendorKey = (select top(1)  VendorKey from BidVendor where  BidRequestKey = @BidRequestKey)  
  
  
 
  insert  into   VendorRating  (VendorKey, ResourceKey, RatingOne, RatingTwo, RatingThree, RatingFour,RatingFive, LastModificationTime,Message)  
  values (@vendorKey,@ResourceKey,@Rating1,null,null,null,null,getdate(),@Message)  

   
select @errorCode  = @@ERROR  
-- Get the Error Code for the statement just executed.  
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_Delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--api_BidVendor_Delete 5043,0
CREATE Procedure [dbo].[api_BidVendor_Delete]
@BidVendorKey int,
@errorCode int output
AS
Begin
	declare @canDelete int = 2
	select @canDelete = IsAssigned from BidVendor where BidVendorKey = @BidVendorKey
	print(@canDelete)
	if(@canDelete = 1 or @canDelete = 2)
	Begin
		delete from BidVendor where BidVendorKey = @BidVendorKey

		select @errorCode = @@Error
	End
	Else
	Begin
		set @errorCode = 2
	End
	print(@errorCode)
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--api_BidVendor_Insert 4626,3216,2099,'API12345',1,'07/21/2020',0,0
CREATE Procedure [dbo].[api_BidVendor_Insert]
@BidRequestKey int, 
@VendorKey int,
@UserKey int,
@BidVendorID varchar(200),
@IsAssigned bit = 1,
@RespondByDate datetime,
@BidVendorKey int output,
@errorCode int output
	
AS
begin
	
	declare @ResourceKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	declare @ModuleKey int
	declare @statusTypeKey int
	select  @statusTypeKey = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'In Progress') from LookUpType as lu where Title = 'Bid Vendor Status'
	select @ModuleKey = ModuleKey from BidRequest br where br.BidRequestKey = @BidRequestKey
	--print(@ModuleKey)
--insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)
--				values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, @RespondByDate, getdate(), getdate(), @statusTypeKey)

	if(@ModuleKey = 100)
	Begin
		insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)
		values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, @RespondByDate, getdate(), getdate(), @statusTypeKey)

		select @BidVendorKey = @@Identity
	End
	Else
	Begin
		declare @Count int
		select @Count = Count(1) from BidVendor where BidRequestKey = @BidRequestKey
		print(@Count)
		if(@Count = 0)
		Begin
			insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)
			values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, @RespondByDate, getdate(), getdate(), @statusTypeKey)

			select @BidVendorKey = @@Identity
		End
		Else
		Begin
			Update BidVendor Set VendorKey = @VendorKey, ResourceKey = @ResourceKey, BidVendorID = @BidVendorID,
			IsAssigned = @IsAssigned, LastModificationTime = getdate(),BidVendorStatus = @statusTypeKey
			where BidRequestKey = @BidRequestKey

			select @BidVendorKey = BidVendorKey from BidVendor where BidRequestKey = @BidRequestKey
		End
	End
	set @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_Message_Delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[api_BidVendor_Message_Delete]
@MessageKey int,
@errorCode int output
AS
BEGIN
	delete from Message where MessageKey = @MessageKey

	select @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_Message_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- api_BidVendor_Message_Insert 2530,2098,'Hello',0
CREATE Procedure [dbo].[api_BidVendor_Message_Insert]
@BidVendorKey int,
@UserKey int,
@Message nvarchar(max),
@MessageKey int OUTPUT,
@errorCode int OUTPUT
As
Begin
declare @ModuleKey int
declare @BidRequestKey int
declare @ResourceKey int

select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
if(@ResourceKey != 0)	
	Begin 
		select @BidRequestKey = BidRequestKey from BidVendor where BidVendorKey = @BidVendorKey
		select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey

	
		insert into Message(ModuleKey,ResourceKey,ObjectKey,Body,LastModificationTime,MessageStatus)
		values(@ModuleKey,@ResourceKey,@BidVendorKey,@Message,GETDATE(),900)

		set @MessageKey = @@IDENTITY
		set @errorCode = @@ERROR
	End
Else
	BEGIN
		Set @errorCode = 1
	END
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_Note_Delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[api_BidVendor_Note_Delete]
@NoteKey int,
@errorCode int output
AS
BEGIN
	delete from Note where NoteKey = @NoteKey

	select @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_Note_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- api_BidVendor_Note_Insert 2530,2098,'Hello',0
Create Procedure [dbo].[api_BidVendor_Note_Insert]
@BidVendorKey int,
@UserKey int,
@Note nvarchar(max),
@NoteKey int OUTPUT,
@errorCode int OUTPUT
As
Begin
declare @ModuleKey int
declare @BidRequestKey int
declare @ResourceKey int

select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
if(@ResourceKey != 0)	
	Begin 
		select @BidRequestKey = BidRequestKey from BidVendor where BidVendorKey = @BidVendorKey
		select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey

	
		insert into Note(ModuleKey,ResourceKey,ObjectKey,Description,LastModificationTime,Status)
		values(@ModuleKey,@ResourceKey,@BidVendorKey,@Note,GETDATE(),101)

		set @NoteKey = @@IDENTITY
		set @errorCode = @@ERROR
	End
Else
	BEGIN
		Set @errorCode = 1
	END
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_SelectById]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[api_BidVendor_SelectById]
@BidVendorKey int
AS
Begin
	Select * from BidVendor where BidVendorKey = @BidVendorKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_SelectByIdForNotification]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_BidVendor_SelectByIdForNotification 16196
CREATE Procedure [dbo].[api_BidVendor_SelectByIdForNotification]
@BidVendorKey int
AS
Begin
	Select b.BidVendorKey,b.BidRequestKey,b.VendorKey,b.BidVendorID,b.ResourceKey as BidByResource,b.IsAssigned,b.RespondByDate,
	b.DateAdded,b.LastModificationTime,b.BidVendorStatus,r.ResourceKey,r.ResourceTypeKey,r.FirstName,r.LastName,r.Title,r.Email,
	r.CellPhone,r.Work,r.Work2,r.Fax,r.Address,r.Address2,r.City,r.State,r.Zip,r.PrimaryContact,r.Status
	from BidVendor b
	join Resource r on r.CompanyKey = b.VendorKey
	where BidVendorKey = @BidVendorKey and r.PrimaryContact = 1
End
GO
/****** Object:  StoredProcedure [dbo].[api_BidVendor_StatusUpdate]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  PROCEDURE [dbo].[api_BidVendor_StatusUpdate]
@BidVendorKey int,
@Status nvarchar(100),
@errorCode int output
AS
BEGIN
  declare @BidVendorStatus int
  if(@Status = 'Accepted')
  Begin
	Select top(1) @BidVendorStatus = LookUpKey from LookUp where LookUpTypeKey = 7 and Title = 'Interested'
  End
  else if(@Status = 'Rejected')
  Begin
	Select top(1) @BidVendorStatus = LookUpKey from LookUp where LookUpTypeKey = 7 and Title = 'Not Interested'
  End
  Else
  Begin
	set @errorCode = 1
  End
  set @errorCode = 1
  if(@BidVendorStatus != 0)
  Begin
	Update BidVendor set BidVendorStatus= @BidVendorStatus,
	RespondByDate = DATEADD(Day,14,getDate()) 
	where BidVendorKey=@BidVendorKey
	set @errorCode = @@Error
	End

END
GO
/****** Object:  StoredProcedure [dbo].[api_BidWorkorder_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


-- api_BidWorkorder_Insert 2021,2,10,'Demo Bid','08/10/2020','08/10/2020','any desc','Bid',0,0
-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[api_BidWorkorder_Insert]
	@PropertyKey INT,
	@UserKey INT,
	@ServiceKey INT,
	@Title VARCHAR(150),
	@BidDueDate SMALLDATETIME,
	@DefaultResponseDate SMALLDATETIME,
	@Description VARCHAR(MAX),
	@BidType varchar(20),
	@bidRequestKey INT OUTPUT,
	@errorCode INT OUTPUT
AS

SET NOCOUNT ON

Begin

declare @ResourceKey int
declare @ModuleKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
if(@BidType = 'Bid')
	Begin
		select @ModuleKey = ModuleKey from Module where Title = 'Bid Requests'
	end
	else if(@BidType = 'WorkOrder')
	begin
		select @ModuleKey = ModuleKey from Module where Title = 'Work Orders'
	end
	else
	begin
	set @ModuleKey = 0
	end
	if(@ModuleKey != 0)
	begin
		INSERT INTO [BidRequest]
(
	[PropertyKey],
	[ResourceKey],
	[ServiceKey],
	[Title],
	[BidDueDate],
	[DefaultRespondByDate],
	[Description],
	[BidRequestStatus],
	[ModuleKey]
)
VALUES
(
	@PropertyKey,
	@ResourceKey,
	@ServiceKey,
	@Title,
	@BidDueDate,
	@DefaultResponseDate,
	@Description,
	600,
	@ModuleKey
)

	end
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @bidRequestKey = SCOPE_IDENTITY()

print(@bidRequestKey)
print(@ModuleKey)
print(@ResourceKey)

End
GO
/****** Object:  StoredProcedure [dbo].[api_BidWorkorder_InsertUpdate]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


-- api_BidWorkorder_InsertUpdate 7844,4193,2098,2,'Demo Bid Update','10/10/2020','11/10/2020','Update Test','',0,0

CREATE PROCEDURE [dbo].[api_BidWorkorder_InsertUpdate]
@BidReqId int,
	@PropertyKey INT,
	@UserKey INT,
	@ServiceKey INT,
	@Title VARCHAR(150),
	@BidDueDate SMALLDATETIME,
	@DefaultResponseDate SMALLDATETIME,
	@Description VARCHAR(MAX),
	@BidType varchar(20),
	@bidRequestKey INT OUTPUT,
	@errorCode INT OUTPUT
AS

SET NOCOUNT ON

Begin

declare @ResourceKey int
declare @ModuleKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	declare @bkey int = 0
	if(@BidReqId != 0)
		Begin
			select @bkey = BidRequestKey from BidRequest where BidRequestKey = @BidReqId
		End
	
	if(@BidType = 'Bid')
	Begin
		select @ModuleKey = ModuleKey from Module where Title = 'Bid Requests'
	end
	else if(@BidType = 'WorkOrder')
	begin
		select @ModuleKey = ModuleKey from Module where Title = 'Work Orders'
	end
	else
	begin
	set @ModuleKey = 0
	end
	if(@ModuleKey != 0 and @bkey = 0)
	begin
	
		INSERT INTO [BidRequest]
(
	[PropertyKey],
	[ResourceKey],
	[ServiceKey],
	[Title],
	[BidDueDate],
	[DefaultRespondByDate],
	[Description],
	[BidRequestStatus],
	[ModuleKey]
)
VALUES
(
	@PropertyKey,
	@ResourceKey,
	@ServiceKey,
	@Title,
	@BidDueDate,
	@DefaultResponseDate,
	@Description,
	600,
	@ModuleKey
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @bidRequestKey = SCOPE_IDENTITY()
	end
	else if(@bkey > 0)
	Begin
		update BidRequest set PropertyKey = @PropertyKey,ServiceKey = @ServiceKey,Title = @Title,
		BidDueDate = @BidDueDate,DefaultRespondByDate = @DefaultResponseDate,Description = @Description
		where BidRequestKey = @bkey

		-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @bidRequestKey = @bkey
	End


print(@bidRequestKey)
print(@ModuleKey)
print(@ResourceKey)

End
GO
/****** Object:  StoredProcedure [dbo].[api_Document_ByDocumentKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[api_Document_ByDocumentKey]
@DocumentKey int
AS
BEGIn
	select DocumentKey,ModuleKey,ObjectKey,FileName,FileSize,
	(Case When d.ModuleKey = 302 then (select top 1 VendorKey from Insurance where InsuranceKey = d.ObjectKey)
	else 0 End) as CompanyKey
	from Document d where d.DocumentKey = @DocumentKey
	
END
GO
/****** Object:  StoredProcedure [dbo].[api_Document_SelectAll_New]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[api_Document_SelectAll_New]


@ObjectKey int
As
Begin
	Select DocumentKey,FileName,FileSize from Document
	where ModuleKey = 712 and ObjectKey = @ObjectKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_GetBid_BidRequestKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_GetBid_BidRequestKey 77
CREATE Procedure [dbo].[api_GetBid_BidRequestKey]
@BidRequestKey int
As
Begin
	select br.*,s.Title as ServiceTitle from BidRequest br
	join Service s on s.ServiceKey = br.ServiceKey
	where BidRequestKey = @BidRequestKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_GetBidRequest_ByBidVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[api_GetBidRequest_ByBidVendorKey]
@BidVendorKey int
As
Begin
declare @BidRequestKey int
select @BidRequestKey = BidRequestKey from BidVendor where BidVendorKey = @BidVendorKey

	select * from BidRequest where BidRequestKey = @BidRequestKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_GetCompany_ByResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_GetCompany_ByResourceKey 4254
Create Procedure [dbo].[api_GetCompany_ByResourceKey]
@ResourceKey int
AS
Begin
	declare @CompanyKey int
	select @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey

	select * from Company where CompanyKey = @CompanyKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_GetPro_PropertyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[api_GetPro_PropertyKey]
@PropertyKey int
As
Begin
	select * from Property where PropertyKey = @PropertyKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_GetResource_ByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[api_GetResource_ByUserKey]
@UserKey int
AS
Begin
	declare @ResourceKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey

	select * from Resource where ResourceKey = @ResourceKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_getvendorBidFeepaymentDetails]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






 --api_getvendorBidFeepaymentDetails  10979, '13141', 1  
CREATE  Procedure  [dbo].[api_getvendorBidFeepaymentDetails]          
@BidrequestKey int,      
@BidVendorkey nvarchar(max),      
@errorcode int output            
as            
begin     
declare  @Fixedamount int    
declare  @BidAmount  int    
declare  @PricingKey int    
declare  @feetype nvarchar(max)    
declare  @fee  int     
declare  @amount  int     
select   @BidAmount    =  (select  Total  from  bid  where  BidvendorKey = @BidVendorkey)    
select  @PricingKey    =  (select  top(1)PricingKey   from  Pricing    where  PricingTypeKey = 1202 and  COALESCE(StartAmount,0) <= @BidAmount and EndAmount >= @BidAmount  order by  StartAmount desc )     
select  @feetype     =   (select   FeeType   FROM  pricing  where  PricingKey = @PricingKey)    
    
if(@feetype ='Percentage')    
begin    
    
 select  @fee   = (select  Fee  from    Pricing  where  PricingKey =  @PricingKey)    
 select  @amount    = (@fee*@BidAmount/100)    
    
select  pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber, CONVERT(varchar, bv.BidVendorKey) as bvid, bv.vendorKey,br.title as Title,  
(Select LookUpkey from  LookUp where title = 'Bid Fee') as PayMentType, pm.MaskedCCNumber as ccNumber,  (select cast(replace(@amount, '.','') as integer))  as Amt, R.Email,  
R.Zip as PostalCode, R.Address as Line1, r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,R.State As State,  
R.Description as Description from  BidRequest  
 br             
inner  join BidVendor  bv on  bv.BidRequestKey = br.BidRequestKey            
left  join PaymentMethod Pm on  Pm.companyKey = bv.vendorKey             
inner  join   Company  c on   c.CompanyKey =  bv.vendorKey            
inner  join  Resource r on  r.CompanyKey = bv.VendorKey            
where  br.bidrequestKey = @BidrequestKey   and  bv.BidVendorKey = @BidVendorkey  
end    
else    
begin    
Select  @Fixedamount  =  (select  Fee  from    Pricing  where  PricingKey =  @PricingKey)    
select  pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber,  
CONVERT(varchar, bv.BidVendorKey) as bvid, bv.vendorKey,br.title as Title,     
(Select LookUpkey from  LookUp where title = 'Bid Fee') as PayMentType,pm.MaskedCCNumber as ccNumber,  
(select cast(replace(@Fixedamount, '.','') as integer))  as Amt, R.Email,R.Zip as PostalCode, R.Address as Line1,  
r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,  
R.State As State,R.Description as Description from  BidRequest br  
             
inner  join BidVendor  bv on  bv.BidRequestKey = br.BidRequestKey            
left  join PaymentMethod Pm on  Pm.companyKey = bv.vendorKey             
inner  join   Company  c on   c.CompanyKey =  bv.vendorKey            
inner  join  Resource r on  r.CompanyKey = bv.VendorKey            
where  br.bidrequestKey = @BidrequestKey   and  bv.BidVendorKey = @BidVendorkey      
end            
    
select @errorcode = @@error             
end
GO
/****** Object:  StoredProcedure [dbo].[api_Manager_SelectAll]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-- site_Manager_SelectAll 1063,3216,0
CREATE PROCEDURE [dbo].[api_Manager_SelectAll]


AS
SET NOCOUNT ON

BEGIN

begin
	select  0 as PropertyKey,Title,u.ResourceKey,(isnull(FirstName,'') +' ' + ISNULL(Lastname,'')) as Name, Email,CellPhone 
	from Resource as r inner join [User] as u on u.ResourceKey=r.ResourceKey inner join  GroupMember as gm on  gm.ResourceKey = r.ResourceKey
		--where r.CompanyKey in (select ra.companykey from [resource] ra where ra.ResourceKey = @ResourceKey)
	where r.CompanyKey = 3216 and gm.GroupKey = 3
end

END
GO
/****** Object:  StoredProcedure [dbo].[api_Manger_insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[api_Manger_insert]
	@propertyKey int,
	@ResourceKey nvarchar(max)
	

AS
SET NOCOUNT ON

delete from PropertyResource where propertykey=@propertyKey
and resourcekey not in (select Item from dbo.SplitString(@ResourceKey,',')  )

Declare @qry nvarchar(max)
   declare managercur cursor for 
           select Item from dbo.SplitString(@ResourceKey,',')     

             open managercur
           declare @resourcevalue int

  fetch next from managercur into @resourcevalue
  while @@FETCH_STATUS = 0
  begin  
  
  if((select count(1) from PropertyResource where propertykey=@propertyKey and resourcekey = @resourcevalue ) = 0 )
  begin
	  Insert Into PropertyResource(PropertyKey, ResourceKey, DateAdded, Status)  
	  values(convert(varchar, @propertyKey),convert(varchar, @resourcevalue) , GETDATE(), 1)
  end


fetch next from managercur into @resourcevalue

end
close managercur
deallocate managercur

-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[api_Manger_insertNew]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[api_Manger_insertNew]
	@propertyKey int,
	@ResourceKey nvarchar(max)

	

AS
SET NOCOUNT ON

delete from PropertyResource where propertykey=@propertyKey
and resourcekey in (select Item from dbo.SplitString(@ResourceKey,',')  )

Declare @qry nvarchar(max)
   declare managercur cursor for 
           select Item from dbo.SplitString(@ResourceKey,',')     

             open managercur
           declare @resourcevalue int

  fetch next from managercur into @resourcevalue
  while @@FETCH_STATUS = 0
  begin  
  
  if((select count(1) from PropertyResource where propertykey=@propertyKey and resourcekey = @resourcevalue ) = 0 )
  begin
	  Insert Into PropertyResource(PropertyKey, ResourceKey, DateAdded, Status)  
	  values(convert(varchar, @propertyKey),convert(varchar, @resourcevalue) , GETDATE(), 1)
  end


fetch next from managercur into @resourcevalue

end
close managercur
deallocate managercur

-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[api_Manger_Remove]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_BidDocument_Delete 2165,2452,0
CREATE Procedure [dbo].[api_Manger_Remove]
@PropertyKey int,
@ResourceKey int,
@error int OUTPUT
AS
Begin
	delete from PropertyResource where ResourceKey = @ResourceKey and PropertyKey = @PropertyKey

	select @error = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Manger_update]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
create PROCEDURE [dbo].[api_Manger_update]
	@propertyKey int,
	@ResourceKey nvarchar(max)
	

AS
SET NOCOUNT ON

delete from PropertyResource where propertykey=@propertyKey
and resourcekey not in (select Item from dbo.SplitString(@ResourceKey,',')  )

Declare @qry nvarchar(max)
   declare managercur cursor for 
           select Item from dbo.SplitString(@ResourceKey,',')     

             open managercur
           declare @resourcevalue int

  fetch next from managercur into @resourcevalue
  while @@FETCH_STATUS = 0
  begin  
  
  if((select count(1) from PropertyResource where propertykey=@propertyKey and resourcekey = @resourcevalue ) = 0 )
  begin
	  Insert Into PropertyResource(PropertyKey, ResourceKey, DateAdded, Status)  
	  values(convert(varchar, @propertyKey),convert(varchar, @resourcevalue) , GETDATE(), 1)
  end


fetch next from managercur into @resourcevalue

end
close managercur
deallocate managercur

-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[api_Notification_GetAllApi]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[api_Notification_GetAllApi]
--@errorCode INT OUTPUT
AS
begin
SET NOCOUNT ON
  select  m.MessageKey as NotificationID,lu.Title as NotificationType,module.Title as ItemType,module.ModuleKey as ItemId,u.UserKey as UserKey,m.Body  as Message,m.LastModificationTime  as ReceivedOn   from Message as m 
	   inner join Module as module on module.ModuleKey = m.ModuleKey
       inner join Resource as r on r.ResourceKey = m.ResourceKey
       inner join [User] as u on u.ResourceKey = r.ResourceKey
       inner join LookUp as lu on lu.LookUpKey = r.ResourceTypeKey
       inner join LookUpType as lut on lut.LookUpTypeKey = lu.LookUpTypeKey
end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[api_PaymentMethod_Add]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- api_PaymentMethod_Add 'Xyz','Abc','4242','toc_demotoken',2099,101,1,0
CREATE procedure [dbo].[api_PaymentMethod_Add]

@CardHolderFirstName varchar(150),
@CardHolderLastName varchar(150),
@MaskedCCNumber nvarchar(16),
@StripeTokenID nvarchar(500),
@PaymentMethodId nvarchar(500),
@ExpiryMM nvarchar(10),
@ExpiryYY nvarchar(10),
@UserKey int,
@Status int,
@PrimaryMethod Bit ,
@CVV int,

@errorcode  int output,
@PaymentMethodKey int = 0 OUTPUT

as 
begin
declare @AddedByResourceKey int
declare @CompanyKey int
select @AddedByResourceKey = ResourceKey from [User] where UserKey = @UserKey
select @CompanyKey = CompanyKey from Resource where ResourceKey = @AddedByResourceKey
INSERT INTO PaymentMethod
          ([CompanyKey],
			[CardHolderFirstName],
			[CardHolderLastName],
			[MaskedCCNumber],
			[StripeTokenID],
			[PaymentMethodId],
			[AddedOn],
			[AddedByResourceKey],
			[LastModificationTime],
			[Status],
			[PrimaryMethod],
			[CardExpiryMonth],
			[CardExpiryYear],[CvvNumber])

VALUES     (@CompanyKey,@CardHolderFirstName,@CardHolderLastName,@MaskedCCNumber,@StripeTokenID,@PaymentMethodId,GETDATE(),
			@AddedByResourceKey,GETDATE(),@Status,@PrimaryMethod,@ExpiryMM,@ExpiryYY,@CVV)

 
select @errorcode = @@ERROR
select @PaymentMethodKey = @@IDENTITY
if(@PrimaryMethod = 1 and @PaymentMethodKey != 0)
Begin
	print(@PrimaryMethod)
	print(@PaymentMethodKey)
	update PaymentMethod Set PrimaryMethod = 0 where AddedByResourceKey = @AddedByResourceKey and PaymentMethodKey != @PaymentMethodKey 
End
end
GO
/****** Object:  StoredProcedure [dbo].[api_PaymentMethod_ChangePrimaryMethod]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[api_PaymentMethod_ChangePrimaryMethod]
@PaymentMethodKey int,
@UserKey int,
@errorCode int OUTPUT
AS
BEGIN
	declare @AddedByResourceKey int

	select @AddedByResourceKey = ResourceKey from [User] where UserKey = @UserKey

	Update PaymentMethod Set PrimaryMethod = 0 where AddedByResourceKey = @AddedByResourceKey

	update PaymentMethod set PrimaryMethod = 1 where PaymentMethodKey = @PaymentMethodKey

	select @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[api_PaymentMethod_delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[api_PaymentMethod_delete]
@PaymentMethodKey int,
@UserKey int,
@errorCode int output
AS
Begin
	declare @ResourceKey int
	declare @isPrimary bit

	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	select @isPrimary = PrimaryMethod from PaymentMethod where @PaymentMethodKey = @PaymentMethodKey
	if(@isPrimary = 0)
	begin
	delete from PaymentMethod where PaymentMethodKey = @PaymentMethodKey and AddedByResourceKey = @ResourceKey and PrimaryMethod = 0

	select @errorCode = @@ERROR
	end
	else
	begin 
		set @errorCode = 1
	end
End
GO
/****** Object:  StoredProcedure [dbo].[api_PaymentMethod_GetAllByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[api_PaymentMethod_GetAllByUserKey]
@UserKey int
As
Begin
declare @ResourceKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey

select PaymentMethodKey,
CompanyKey,
CardHolderFirstName,
CardHolderLastName,
'XXXX XXXX XXXX ' + SubString([PaymentMethod].[MaskedCCNumber],13,LEN([PaymentMethod].[MaskedCCNumber])-1) as MaskedCCNumber,
AddedOn,
AddedByResourceKey,
Status,
PrimaryMethod,
CardExpiryMonth,
CardExpiryYear,
StripeTokenID
from PaymentMethod
where AddedByResourceKey = @ResourceKey

End
GO
/****** Object:  StoredProcedure [dbo].[api_PaymentMethod_Update]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[api_PaymentMethod_Update]

@CompanyKey int,
@PaymentMethodKey int,
@CardHolderFirstName varchar(150),
@CardHolderLastName varchar(150),
@MaskedCCNumber nvarchar(16),
@StripeTokenID nvarchar(500),
@Status int,
@PrimaryMethod Bit ,

@errorcode  int output


as 
begin
declare @AddedByResourceKey int
select @AddedByResourceKey = AddedByResourceKey from PaymentMethod where PaymentMethodKey = @PaymentMethodKey
Update PaymentMethod Set
          [CompanyKey] = @CompanyKey,
			[CardHolderFirstName] = @CardHolderFirstName,
			[CardHolderLastName] = @CardHolderLastName,
			[MaskedCCNumber] = @MaskedCCNumber,
			[StripeTokenID] = @StripeTokenID,
			[LastModificationTime] = GETDATE(),
			[Status] = @Status,
			[PrimaryMethod] = @PrimaryMethod

			where PaymentMethodKey = @PaymentMethodKey
			
			if(@PrimaryMethod = 1 and @PaymentMethodKey != 0)
			Begin
				update PaymentMethod Set PrimaryMethod = 0 where AddedByResourceKey = @AddedByResourceKey and PaymentMethodKey != @PaymentMethodKey 
			End
		select @errorcode = @@ERROR

end
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetBidRequest]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- api_PM_GetBidRequest 'Bid',2
CREATE Procedure [dbo].[api_PM_GetBidRequest]
@BidType nvarchar(10),
@UserKey int
AS
Begin
	declare @ResourceKey int
	declare @BidRequestKey int
	declare @ModuleKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	if(@BidType = 'Bid')
	Begin
		select @ModuleKey = ModuleKey from Module where Title = 'Bid Requests'
	end
	else if(@BidType = 'WorkOrder')
	begin
		select @ModuleKey = ModuleKey from Module where Title = 'Work Orders'
	end
	else
	begin
	  Set @ResourceKey = 0
	end

	if(@ResourceKey != 0)
	begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.Description, br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as Property, s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidRequest
		where BidRequestStatus not in(select LookUpKey from LookUp where Title = 'In Progress') and 
		ResourceKey = @ResourceKey and ModuleKey = @ModuleKey) as BidCount
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where ResourceKey = @ResourceKey and br.ModuleKey = @ModuleKey;
	end
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetBidRequestDetails]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- api_PM_GetBidRequestDetails 2098,8850
CREATE Procedure [dbo].[api_PM_GetBidRequestDetails]
@UserKey int,
@BidRequestKey int
AS
Begin
	declare @ResourceKey int
	declare @ModuleKey int
	declare @GroupKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	Select top 1 @GroupKey = GroupKey from GroupMember where ResourceKey = @ResourceKey order by GroupKey asc
	Select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey

	 print(@GroupKey)
	 print(@ResourceKey)
	if(@ResourceKey != 0 and @GroupKey = 1)
	begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.Description,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey) as NoOfBids
		,(select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 
		and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as NotificationType
		
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		and br.PropertyKey in (select PropertyKey from Property 
			where CompanyKey in(select CompanyKey from Resource where ResourceKey = @ResourceKey)) and br.BidRequestKey = @BidRequestKey;
	end
	Else if(@ResourceKey != 0)
	Begin
	print(@GroupKey)
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.Description,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidRequest
		where BidRequestStatus not in(select LookUpKey from LookUp where Title = 'In Progress') and 
		ResourceKey = @ResourceKey and ModuleKey = @ModuleKey) as BidCount, (select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey) as NoOfBids
		,(select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 
		and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as NotificationType
		
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where br.PropertyKey in (select PropertyKey from PropertyResource where ResourceKey = @ResourceKey) 
		and br.BidRequestKey = @BidRequestKey;
	end
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetBidRequestDetailsCopy]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- api_PM_GetBidRequestDetailsCopy 2098,7834
CREATE Procedure [dbo].[api_PM_GetBidRequestDetailsCopy]
@UserKey int,
@BidRequestKey int
AS
Begin
	declare @ResourceKey int
	declare @ModuleKey int
	declare @GroupKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	Select @GroupKey = GroupKey from GroupMember where ResourceKey = @ResourceKey

	 print(@GroupKey)
	 print(@ResourceKey)
	if(@ResourceKey != 0 and @GroupKey = 1)
	begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.Description,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey) as NoOfBids
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		and br.PropertyKey in (select PropertyKey from Property 
			where CompanyKey in(select CompanyKey from Resource where ResourceKey = @ResourceKey)) and br.BidRequestKey = @BidRequestKey;
	end
	Else if(@ResourceKey != 0)
	Begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidRequest
		where BidRequestStatus not in(select LookUpKey from LookUp where Title = 'In Progress') and 
		ResourceKey = @ResourceKey and ModuleKey = @ModuleKey) as BidCount, (select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey) as NoOfBids
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where br.PropertyKey in (select PropertyKey from PropertyResource where ResourceKey = @ResourceKey) 
		and br.BidRequestKey = @BidRequestKey;
	end
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetBidRequestDetailsOld]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- api_PM_GetBidRequestDetailsCopy 2098,7834
Create Procedure [dbo].[api_PM_GetBidRequestDetailsOld]
@UserKey int,
@BidRequestKey int
AS
Begin
	declare @ResourceKey int
	declare @ModuleKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	
	if(@ResourceKey != 0)
	begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.Description,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey) as NoOfBids
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where br.ResourceKey = @ResourceKey and br.BidRequestKey = @BidRequestKey;
	end
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetBidRequestList]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- api_PM_GetBidRequestList 'workorder',2098,0,'all'
CREATE Procedure [dbo].[api_PM_GetBidRequestList]
@BidType nvarchar(10),
@UserKey int,
@PropertyKey int,
@Status nvarchar(50)
AS
Begin
	declare @ResourceKey int
	declare @BidRequestKey int
	declare @ModuleKey int
	declare @GroupKey int
	declare @status1 Table (st varchar(20))
	declare @qry nvarchar(max)
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	if(@BidType = 'Bid')
	Begin
		select @ModuleKey = ModuleKey from Module where Title = 'Bid Requests'
	end
	else if(@BidType = 'WorkOrder')
	begin
		select @ModuleKey = ModuleKey from Module where Title = 'Work Orders'
	end
	else
	begin
	  Set @ResourceKey = 0
	end
	
	Select top 1 @GroupKey = GroupKey from GroupMember where ResourceKey = @ResourceKey order by GroupKey asc

	select @qry = case when (@Status = 'open' or @Status = '')  then
		'Select Title from LookUp where Title in(''In Progress'',''Submitted'')'
		when @Status = 'close' then 
		'Select Title from LookUp where Title in(''Completed'',''Closed'')'
		when @Status = 'all' then
		'Select Title from LookUp where Title in(''In Progress'',''Submitted'',''Completed'',''Closed'')'
		End
	
		print(@qry)

	Insert into @status1 Exec(@qry)
	 
	if(@ResourceKey != 0 and @GroupKey = 1)
	begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidRequest
		where BidRequestStatus not in(select LookUpKey from LookUp where Title = 'In Progress') and 
		ResourceKey = @ResourceKey and ModuleKey = @ModuleKey) as BidCount, (select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey and BidVendorStatus not in(select LookUpKey from LookUp where Title = 'In Progress')) as NoOfBids
		,(select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 --and NotificationType = 'BidVendorStatus'
		and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationType
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where br.ModuleKey = @ModuleKey 
		and br.PropertyKey in (select PropertyKey from Property 
			where CompanyKey in(select CompanyKey from Resource where ResourceKey = @ResourceKey)) and
		br.PropertyKey = Case when @PropertyKey != 0 Then @PropertyKey Else br.PropertyKey END
		And l.Title in (select st from @status1)
		order by br.DateAdded desc
		
		
	end
	Else if(@ResourceKey != 0)
	Begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidRequest
		where BidRequestStatus not in(select LookUpKey from LookUp where Title = 'In Progress') and 
		ResourceKey = @ResourceKey and ModuleKey = @ModuleKey) as BidCount, (select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey and BidVendorStatus not in(select LookUpKey from LookUp where Title = 'In Progress')) as NoOfBids
		,(select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 --and NotificationType = 'BidVendorStatus'
		and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey) then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationType
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where br.ModuleKey = @ModuleKey 
		and br.PropertyKey in (select PropertyKey from PropertyResource where ResourceKey = @ResourceKey) and
		br.PropertyKey = Case when @PropertyKey != 0 Then @PropertyKey Else br.PropertyKey END
		And l.Title in (select st from @status1)
		order by br.DateAdded desc
	End
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetBidRequestList_Copy]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- api_PM_GetBidRequestList 'bid',2098,0,'all'
CREATE Procedure [dbo].[api_PM_GetBidRequestList_Copy]
@BidType nvarchar(10),
@UserKey int,
@PropertyKey int,
@Status nvarchar(50)
AS
Begin
	declare @ResourceKey int
	declare @BidRequestKey int
	declare @ModuleKey int
	declare @GroupKey int
	declare @status1 Table (st varchar(20))
	declare @qry nvarchar(max)
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	if(@BidType = 'Bid')
	Begin
		select @ModuleKey = ModuleKey from Module where Title = 'Bid Requests'
	end
	else if(@BidType = 'WorkOrder')
	begin
		select @ModuleKey = ModuleKey from Module where Title = 'Work Orders'
	end
	else
	begin
	  Set @ResourceKey = 0
	end
	
	Select top 1 @GroupKey = GroupKey from GroupMember where ResourceKey = @ResourceKey order by GroupKey asc

	select @qry = case when (@Status = 'open' or @Status = '')  then
		'Select Title from LookUp where Title in(''In Progress'',''Submitted'')'
		when @Status = 'close' then 
		'Select Title from LookUp where Title in(''Completed'',''Closed'')'
		when @Status = 'all' then
		'Select Title from LookUp where Title in(''In Progress'',''Submitted'',''Completed'',''Closed'')'
		End
	
		print(@qry)

	Insert into @status1 Exec(@qry)
	 
	if(@ResourceKey != 0 and @GroupKey = 1)
	begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidRequest
		where BidRequestStatus not in(select LookUpKey from LookUp where Title = 'In Progress') and 
		ResourceKey = @ResourceKey and ModuleKey = @ModuleKey) as BidCount, (select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey and BidVendorStatus not in(select LookUpKey from LookUp where Title = 'In Progress')) as NoOfBids
		,(select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900  and NotificationType = 'BidVendorStatus'
		and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidVendorStatus') as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidVendorStatus') as NotificationType
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where br.ModuleKey = @ModuleKey 
		and br.PropertyKey in (select PropertyKey from Property 
			where CompanyKey in(select CompanyKey from Resource where ResourceKey = @ResourceKey)) and
		br.PropertyKey = Case when @PropertyKey != 0 Then @PropertyKey Else br.PropertyKey END
		And l.Title in (select st from @status1)
		order by br.DateAdded desc
		
		
	end
	Else if(@ResourceKey != 0)
	Begin
		Select br.BidRequestKey,br.ResourceKey,br.ModuleKey,br.Title,br.BidDueDate, br.DateAdded,
		br.StartDate, br.EndDate, br.DefaultRespondByDate,p.PropertyKey,p.Title as PropertyTitle,s.ServiceKey,s.Title as ServiceTitle,
		l.Title as Status, m.Title as BidType,(select COUNT(1) from BidRequest
		where BidRequestStatus not in(select LookUpKey from LookUp where Title = 'In Progress') and 
		ResourceKey = @ResourceKey and ModuleKey = @ModuleKey) as BidCount, (select COUNT(1) from BidVendor
		where BidRequestKey = br.BidRequestKey and BidVendorStatus not in(select LookUpKey from LookUp where Title = 'In Progress')) as NoOfBids
		,(select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 and NotificationType = 'BidVendorStatus'
		and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey) then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidVendorStatus') as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidVendorStatus') as NotificationType
		from BidRequest br
		join Property p on p.PropertyKey = br.PropertyKey
		join Service s on s.ServiceKey = br.ServiceKey
		join LookUp l on l.LookUpKey = br.BidRequestStatus
		join Module m on m.ModuleKey = br.ModuleKey
		where br.ModuleKey = @ModuleKey 
		and br.PropertyKey in (select PropertyKey from PropertyResource where ResourceKey = @ResourceKey) and
		br.PropertyKey = Case when @PropertyKey != 0 Then @PropertyKey Else br.PropertyKey END
		And l.Title in (select st from @status1)
		order by br.DateAdded desc
	End
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetDocumentsForBid]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_PM_GetDocumentsForBid 106,10900
CREATE Procedure [dbo].[api_PM_GetDocumentsForBid]
@ModuleKey int,
@ObjectKey int
As
Begin
--if(@ModuleKey = 100)
--begin

--select * from Document as d where (ModuleKey = (select ModuleKey from Module where Controller = 'PMBidRequests') or ModuleKey = 100)  and d.ObjectKey = @ObjectKey
--end
--else
--begin
--select * from Document as d where (ModuleKey = (select ModuleKey from Module where Controller = 'PMWorkOrders') or ModuleKey = 106)  and d.ObjectKey = @ObjectKey
--end

select * from Document as d 
where ((ModuleKey = (select ModuleKey from Module 
	where Controller = 'PMWorkOrders') or (ModuleKey = (select ModuleKey from Module 
		where Controller = 'PMBidRequests') or ModuleKey = 106 or  ModuleKey = 100))  and d.ObjectKey = @ObjectKey)

End
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetInsurance]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[api_PM_GetInsurance]
@VendorKey int
AS
BEGIN
	Select InsuranceKey,VendorKey,CompanyName,PolicyNumber,InsuranceAmount,EndDate from Insurance
	where VendorKey = @VendorKey
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetMessageByMessageKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_PM_GetMessageByMessageKey 2188
CREATE Procedure [dbo].[api_PM_GetMessageByMessageKey]
@MessageKey int
AS
BEGIN
	Select m.MessageKey,m.ObjectKey,m.ResourceKey,r.FirstName+' '+r.LastName as VendorName,
	(select top 1 Username from [User] where ResourceKey = r.ResourceKey) as UserName,m.Body as Message,m.LastModificationTime,
	m.MessageStatus,l.Title as Status from Message m
	join LookUp l on l.LookUpKey = m.MessageStatus
	join Resource r on r.ResourceKey =  m.ResourceKey
	where MessageKey = @MessageKey
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetMessages]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- api_PM_GetMessages 106,13632,13789
CREATE Procedure [dbo].[api_PM_GetMessages]
@ModuleKey int,
@ObjectKey int,
@UserKey int = 0
AS
BEGIN
declare @ResourceKey int
select @ResourceKey  = ResourceKey from [user] where UserKey = @UserKey
	Select m.MessageKey,m.ResourceKey,m.ObjectKey,r.FirstName+' '+r.LastName as VendorName,
	(select top 1 Email from Resource where ResourceKey = r.ResourceKey) as UserName,m.Body as Message,m.LastModificationTime,
	m.MessageStatus,l.Title as Status 
	
	from Message m
	join LookUp l on l.LookUpKey = m.MessageStatus
	join Resource r on r.ResourceKey = m.ResourceKey
	left join BidVendor bv on bv.BidVendorKey = m.ObjectKey and m.ModuleKey in(100,106)
	where m.ModuleKey = @ModuleKey and m.ObjectKey = @ObjectKey
END
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetNotesForBid]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[api_PM_GetNotesForBid]
@ModuleKey int,
@ObjectKey int
As
Begin
	Select NoteKey,Description,LastModificationTime from Note
	where ModuleKey = @ModuleKey and ObjectKey = @ObjectKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_PM_GetVendorDetails]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_PM_GetVendorDetails 19464,2099
CREATE Procedure [dbo].[api_PM_GetVendorDetails]
@BidRequestKey int,
@UserKey int = 0
AS
BEGIN
declare @ResourceKey int
declare @VendorKey int

select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
select @VendorKey = CompanyKey from Resource where ResourceKey = @ResourceKey

	select bv.BidVendorKey,bv.BidRequestKey,bv.VendorKey,r.ResourceKey,b.BidKey,c.Name as CompanyName,
	b.Description as BidDescription,r.Work,r.Work2,r.Email,r.Fax,r.Address,r.Address2,r.City,
	case When ((select Title from State where StateKey = r.State) = null or (select Title from State where StateKey = r.State) = '') then r.State
	else (select Title from State where StateKey = r.State) end as State,r.State as StateKey,r.Zip,bv.RespondByDate,
	bv.DateAdded,bv.BidVendorStatus,l.Title as Status,r.FirstName+' '+r.LastName as VendorName,b.Total
	,(select COUNT(1) from BidVendor where BidRequestKey = @BidRequestKey and BidVendorStatus not in(
	select LookUpKey from LookUp where Title = 'In Progress' and LookUpTypeKey in(
	select LookUpTypeKey from LookUpType where Title = 'Bid Vendor Status'))) as Count,bv.IsAssigned,
	b.Total, b.BidKey, b.Description as BidDesc, b.LastModificationTime as BidLastModification
	,(select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = br.ModuleKey and Status = 900 
		and ForResource = @ResourceKey and ByResource = r.ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = br.ModuleKey and Status = 900 and ForResource = @ResourceKey and ByResource = r.ResourceKey and ObjectKey = br.BidRequestKey) as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = br.ModuleKey and Status = 900 and ForResource = @ResourceKey and ByResource = r.ResourceKey and ObjectKey = br.BidRequestKey) as NotificationType
		,(select count(*) from ABNotification where ModuleKey = br.ModuleKey and NotificationType = 'BidReqMsg' and Status = 900 and ForResource = @ResourceKey and ByResource = r.ResourceKey and ObjectKey = br.BidRequestKey) as NewMessageCount
	from [BidVendor] bv
	left join BidRequest br on br.BidRequestKey = bv.BidRequestKey
	left join Company c on c.CompanyKey = bv.VendorKey
	left join Resource r on r.CompanyKey = c.CompanyKey
	left join LookUp l on l.LookUpKey = bv.BidVendorStatus
	left join Bid b on b.BidVendorKey = bv.BidVendorKey
	where bv.BidRequestKey = @BidRequestKey

END
GO
/****** Object:  StoredProcedure [dbo].[api_PMVendor_UpdateProfile]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[api_PMVendor_UpdateProfile]
@UserKey int,
@Address nvarchar(max),
@Address2 nvarchar(max),
@City nvarchar(100),
@State nvarchar(10),
@Zip nvarchar(10),
@WorkPhone nvarchar(20),
@WorkPhone2 nvarchar(20),
@CellPhone nvarchar(20),
@EmailId nvarchar(max),
@Title nvarchar(10),
@FirstName nvarchar(100),
@LastName nvarchar(100),
@errorCode int OUTPUT
AS
Begin
	declare @ResourceKey int

	select top(1) @ResourceKey = ResourceKey from [User] where Userkey = @UserKey

	update Resource set Address = @Address,Address2 = @Address2,City = @City, State =  @State, Zip = @Zip, Work = @WorkPhone,
	Work2 = @WorkPhone2,CellPhone = @CellPhone, Email = @EmailId, Title = @Title,FirstName = @FirstName,
	LastName = @LastName,LastModificationTime = getdate() where ResourceKey = @ResourceKey

	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Portal_SelectByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[api_Portal_SelectByUserKey]
@UserKey int
As
Begin
declare @ResourceKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	select p.PortalKey,p.PortalId,p.Title from Portal p 
	join Company c on c.PortalKey = p.PortalKey
	join Resource r on r.CompanyKey = c.CompanyKey
	where r.ResourceKey = @ResourceKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_ProDocument_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--
CREATE Procedure [dbo].[api_ProDocument_Insert]
@ObjectKey int,
@FileName nvarchar(200),
@FileSize float,
@DocumentKey int output,
@errorCode int output
As
Begin

	--declare @ModuleKey int

	--select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @ObjectKey

	--if(@ModuleKey != 0)
	Begin
		insert into Document(ModuleKey,ObjectKey,FileName,FileSize,LastModificationTime)
		values(712,@ObjectKey,@FileName,@FileSize,GETDATE())
	End
	select @DocumentKey = @@IDENTITY
	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Profile_GetProfileDetails]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--api_Profile_GetProfileDetails 3109,0
CREATE Procedure [dbo].[api_Profile_GetProfileDetails]
@UserKey int,
@errorCode int output
AS
Begin
	declare @ResourceKey int
	declare @CompanyKey int
	declare @PortalKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	Select @CompanyKey = CompanyKey From Resource where ResourceKey = @ResourceKey
	select @PortalKey = PortalKey from Company where CompanyKey=@CompanyKey
	
	if(@PortalKey = 3)
	Begin
	select c.CompanyKey,c.Name as CompanyName,c.LegalName,r.Email,r.FirstName,r.LastName,r.Title,r.CellPhone,c.TaxID,r.Address,r.Address2,r.City,r.State,r.Zip,
	r.Work,r.Work2,r.Fax,c.Website,isNull(sa.Radius,1) as Radius
	from Resource r
	join Company c on c.CompanyKey = r.CompanyKey
	left join ServiceArea sa on sa.VendorKey = c.CompanyKey
	where r.ResourceKey = @ResourceKey
	End
End
GO
/****** Object:  StoredProcedure [dbo].[api_Profile_GetProfileDetailsForPM]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--api_Profile_GetProfileDetailsForPM 2098,0
CREATE Procedure [dbo].[api_Profile_GetProfileDetailsForPM]
@UserKey int,
@errorCode int output
AS
Begin
	declare @ResourceKey int
	declare @CompanyKey int
	declare @PortalKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	Select @CompanyKey = CompanyKey From Resource where ResourceKey = @ResourceKey
	select @PortalKey = PortalKey from Company where CompanyKey=@CompanyKey
	
	if(@PortalKey = 2)
	Begin
	select r.Title,r.FirstName + ' '+r.LastName as Name,r.Address,r.Address2,r.City,r.State,r.Zip,
	r.Work,r.Work2,r.CellPhone,r.Email
	from Resource r
	where r.ResourceKey = @ResourceKey
	End
End
GO
/****** Object:  StoredProcedure [dbo].[api_Property_Delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[api_Property_Delete]
@UserKey int,
	@propertyKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON

declare @ResourceKey int
declare @PortalKey int
declare @candelete int
declare @GroupKey int

select @ResourceKey = ResourceKey from [user] where UserKey = @UserKey
select top 1 @GroupKey  = GroupKey from GroupMember where ResourceKey = @ResourceKey order by GroupKey asc

if(@GroupKey = 1)
Begin
delete from [PropertyResource] where PropertyKey = @propertyKey
DELETE FROM Property WHERE PropertyKey = @propertyKey

select @errorCode  = @@ERROR
end
else if(@GroupKey = 3)
Begin
	select @candelete = case when( Exists(select * from PropertyResource where ResourceKey = @ResourceKey and PropertyKey = @propertyKey)) then 1
	else 0 end
	if(@candelete = 1)
	Begin
		delete from [PropertyResource] where PropertyKey = @propertyKey
		DELETE FROM Property WHERE PropertyKey = @propertyKey

		select @errorCode  = @@ERROR
	End
	Else
	Begin
		set @errorCode = 1
	End
End
Else
Begin
	set @errorCode = -1
End



-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[api_Property_GetAll]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[api_Property_GetAll]
@ResourceKey int
AS
begin

declare @GroupKey int
select  @GroupKey =  count(GroupKey) from GroupMember Where ResourceKey= 1063 and  GroupKey = 1
declare @GroupKeyp int
select  @GroupKeyp =  count(GroupKey) from GroupMember Where ResourceKey= 1063 and  GroupKey = 3


if @GroupKey = 1
begin
select PropertyKey, TRIM(Title) as Title 
from [Property] order by Title asc
end
if @GroupKeyp = 1
begin

select distinct TRIM(p.Title) as Title,p.PropertyKey from PropertyResource as pr
inner join Property as p on pr.PropertyKey = p.PropertyKey
where pr.ResourceKey = @ResourceKey
order by Title asc
end








end
GO
/****** Object:  StoredProcedure [dbo].[api_Property_GetAll_New]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[api_Property_GetAll_New]
@UserKey int
AS
begin
declare @ResourceKey int
select @ResourceKey = ResourceKey from [User] Where UserKey = @UserKey

declare @GroupKey int
select  @GroupKey =  count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1
declare @GroupKeyp int
select  @GroupKeyp =  count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 3


if @GroupKey = 1
begin
select PropertyKey, TRIM(Title) as Title 
from [Property] order by Title asc
end
if @GroupKeyp = 1
begin

select distinct TRIM(p.Title) as Title,p.PropertyKey from PropertyResource as pr
inner join Property as p on pr.PropertyKey = p.PropertyKey
where pr.ResourceKey = @ResourceKey
order by Title asc
end








end
GO
/****** Object:  StoredProcedure [dbo].[api_Property_GetManger]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--[api_Property_AddManger] 
CREATE Procedure  [dbo].[api_Property_GetManger]

@PropertyKey int
as
begin
select  r.ResourceKey,(isnull(FirstName,'') +' ' + ISNULL(Lastname,'')) as Name,r.Email,r.CellPhone 
	from Resource as r  inner join  PropertyResource as gm on  gm.ResourceKey = r.ResourceKey  
		--where r.CompanyKey in (select ra.companykey from [resource] ra where ra.ResourceKey = @ResourceKey)
	where gm.PropertyKey=@PropertyKey
end
GO
/****** Object:  StoredProcedure [dbo].[api_Property_getProperty]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[api_Property_getProperty]
	--@UserKey int
AS
SET NOCOUNT ON

--select Gp.GroupKey, * 
BEGIN
--From Property as ps 
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey 
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey
--where ps.PropertyKey = @PropertyKey

SELECT p.PropertyKey, p.Latitude,p.Longitude,p.PropertyKey, p.Title,p.NumberOfUnits,p.Address,p.Address2,p.City,p.State,p.Zip,p.BidRequestAmount,p.MinimumInsuranceAmount,p.Description,D.ObjectKey,D.FileName,D.DocumentKey,D.ModuleKey FROM Property as p inner join Document as D on D.ObjectKey=p.PropertyKey 
	
END
GO
/****** Object:  StoredProcedure [dbo].[api_Property_getPropertyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[api_Property_getPropertyKey]
	--@UserKey int
	@PropertyKey INT
AS
SET NOCOUNT ON

--select Gp.GroupKey, * 
BEGIN
--From Property as ps 
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey 
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey
--where ps.PropertyKey = @PropertyKey

SELECT p.PropertyKey, p.Latitude,p.Longitude,p.PropertyKey, p.Title,p.NumberOfUnits,p.Address,p.Address2,p.City,p.State,p.Zip,p.BidRequestAmount,p.MinimumInsuranceAmount,p.Description,D.ObjectKey,D.FileName,D.DocumentKey,D.ModuleKey FROM Property as p inner join Document as D on D.ObjectKey=p.PropertyKey  WHERE PropertyKey=@PropertyKey
	
END
GO
/****** Object:  StoredProcedure [dbo].[api_Property_GetPropertyList]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_Property_GetPropertyList 6395
CREATE PROCEDURE [dbo].[api_Property_GetPropertyList]
@UserKey int
AS
SET NOCOUNT ON

--select Gp.GroupKey, * 
BEGIN
--From Property as ps 
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey 
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey
--where ps.PropertyKey = @PropertyKey
declare @ResourceKey int
declare @GroupKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey

Select top 1 @GroupKey = GroupKey from GroupMember where ResourceKey = @ResourceKey order by GroupKey asc

if(@GroupKey = 1 and @ResourceKey != 0)
Begin
SELECT p.PropertyKey, p.Latitude,p.Longitude,p.PropertyKey, p.Title,p.NumberOfUnits,p.Address,p.Address2,p.City,
p.State,p.Zip,p.BidRequestAmount,p.MinimumInsuranceAmount,p.Description
FROM Property as p
order by p.Title asc
End
Else if(@ResourceKey != 0)
Begin

SELECT p.PropertyKey, p.Latitude,p.Longitude,p.PropertyKey, p.Title,p.NumberOfUnits,p.Address,p.Address2,p.City,
p.State,p.Zip,p.BidRequestAmount,p.MinimumInsuranceAmount,p.Description
FROM Property as p
where p.PropertyKey in (select PropertyKey from PropertyResource where ResourceKey = @ResourceKey)
order by p.Title asc
End
	
END
GO
/****** Object:  StoredProcedure [dbo].[api_Property_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [site_Property_Insert] 15,'shyam',25,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'desc',1,' Tasksheet  23-04-2020.docx,Tasksheet  24-04-2020.docx,Tasksheet  30-04-2020.docx','21811,21821,22471',1,20,12
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[api_Property_Insert]
	 
	 @UserKey int,
	@Title varchar(150), 
	@NumberOfUnits int, 
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(2),
	@Zip varchar(11),
	@Latitude varchar(max),
	@Longitude varchar(max),
	@BidRequestAmount money,
	@MinimumInsuranceAmount money,
	@Description varchar(max),
	@Propertyvalue INT OUTPUT
	
AS
SET NOCOUNT ON
BEGIN
declare @ResourceKey int
declare @CompanyKey int
 Declare @qry nvarchar(max)   
 select @ResourceKey = ResourceKey from [user] where Userkey = @UserKey
 select @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey

    Insert into Property(CompanyKey,Title, NumberOfUnits, [Address], [Address2], City, [State], Zip,
	BidRequestAmount, MinimumInsuranceAmount, [Description], [Status],[Latitude],[Longitude]) 
	values 
	(@CompanyKey,@Title, @NumberOfUnits, @Address, @Address2, @City, @State, @Zip, 
	@BidRequestAmount, @MinimumInsuranceAmount, @Description, 1,@Latitude,@Longitude)
	declare @PropertyKey int = @@identity 
	   select @Propertyvalue = @@IDENTITY 

	   declare @GroupKey int
	   select @GroupKey = g.GroupKey from [Group] g 
	   join GroupMember gm on g.GroupKey = gm.GroupKey
	   where gm.ResourceKey = @ResourceKey
	   and gm.GroupKey = 3
	   if(@GroupKey = 3)
	   Begin
		insert into PropertyResource(ResourceKey,PropertyKey,DateAdded,Status)
		values(@ResourceKey,@Propertyvalue,GetDate(),1)
	   End
END
GO
/****** Object:  StoredProcedure [dbo].[api_Property_List]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[api_Property_List]
@ResourceKey int
AS
begin
select * from Property as p inner join PropertyResource as Pr on p.PropertyKey=Pr.PropertyKey where p.PropertyKey=1028


end
GO
/****** Object:  StoredProcedure [dbo].[api_Property_SelectOneByPropertyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[api_Property_SelectOneByPropertyKey]
	@PropertyKey INT
AS
SET NOCOUNT ON

--select Gp.GroupKey, * 

--From Property as ps 
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey 
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey
--where ps.PropertyKey = @PropertyKey
BEGIN
SELECT * FROM Property as pr  WHERE PropertyKey=@PropertyKey

END

			
-- Get the Error Code for the statement just executed.
--SELECT @errorCode = @@ERROR
--print(@errorCode)

--[site_Property_SelectOneByPropertyKey] 1023, null
GO
/****** Object:  StoredProcedure [dbo].[api_Property_Update]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [api_Property_Update] 2102,'3216',Vinu@123,1,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'This Is',0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[api_Property_Update]
	 
	
	 @CompanyKey int,
	@Title varchar(150), 
	@NumberOfUnits int, 
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(2),
	@Zip varchar(11),
	@BidRequestAmount money,
	@MinimumInsuranceAmount money,
	@Description varchar(max),
	 @PropertyKey INT,
	@error INT OUTPUT
	


AS
SET NOCOUNT ON
BEGIN
 Declare @qry nvarchar(max)   
    update Property set CompanyKey=@CompanyKey,Title=@Title, NumberOfUnits=@NumberOfUnits, [Address]=@Address, [Address2]=@Address2, City=@City, [State]=@State, Zip=@Zip,
	BidRequestAmount=@BidRequestAmount, MinimumInsuranceAmount=@MinimumInsuranceAmount, [Description]=@Description, [Status]=1 where PropertyKey=@PropertyKey
	  select @error = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[api_Property_UpdateNew]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [api_Property_Update] 2102,'3216',Vinu@123,1,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'This Is',0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[api_Property_UpdateNew]
	 
	@Title varchar(150), 
	@NumberOfUnits int, 
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(2),
	@Zip varchar(11),
	@BidRequestAmount money,
	@MinimumInsuranceAmount money,
	@Description varchar(max),
	@Latitude varchar(max),
	@Longitude varchar(max),
	 @PropertyKey INT,
	@error INT OUTPUT
	


AS
SET NOCOUNT ON
BEGIN
 Declare @qry nvarchar(max)   
    update Property set Title=@Title, NumberOfUnits=@NumberOfUnits, [Address]=@Address, [Address2]=@Address2, City=@City, [State]=@State, Zip=@Zip,
	BidRequestAmount=@BidRequestAmount, MinimumInsuranceAmount=@MinimumInsuranceAmount, [Description]=@Description,
	Latitude = @Latitude,Longitude = @Longitude,[Status]=1 where PropertyKey=@PropertyKey
	  select @error = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[api_PropertyDocument_Delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_BidDocument_Delete 2165,2452,0
CREATE Procedure [dbo].[api_PropertyDocument_Delete]

@DocumentKey int,
@error int OUTPUT
AS
Begin
	delete from Document where DocumentKey = @DocumentKey or ObjectKey = 712

	select @error = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_PropertyMan_Delete]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_BidDocument_Delete 2165,2452,0
create Procedure [dbo].[api_PropertyMan_Delete]
@PropertyKey int,
@ResourceKey int,
@errorCode int OUTPUT
AS
Begin
	delete from PropertyResource where ResourceKey = @ResourceKey and PropertyKey = @PropertyKey

	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Resource_ForgotPassword]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- api_Resource_ForgotPassword 'suraj.avyak@gmail.com',0
CREATE PROCEDURE [dbo].[api_Resource_ForgotPassword]
	 
@Email varchar(150),
@Status int OUTPUT

AS
SET NOCOUNT ON
declare @UserKey int
select Top 1 @UserKey = us.UserKey from [User] as us 
		inner join resource as rs on us.ResourceKey = rs.ResourceKey
		Where rs.Email = @Email
		
	if(@UserKey > 0)
	Begin
update [User] set TokenReset = NEWID(), ResetExpirationDate = getdate() where UserKey = @UserKey

select us.UserKey,us.Username, rs.Email, us.ResetExpirationDate,cp.Name from [resource] as rs 
inner join [user] as us on rs.ResourceKey = us.ResourceKey 
inner join [Company] as cp on rs.CompanyKey = cp.CompanyKey 
where us.UserKey = @UserKey

set @Status = @@ERROR
End
Else
Begin 
	set @Status = -1;
End
GO
/****** Object:  StoredProcedure [dbo].[api_Resource_SelectOneByCompanyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[api_Resource_SelectOneByCompanyKey]  
 @CompanyKey INT,  
 @errorCode INT OUTPUT  
AS  
SET NOCOUNT ON  
SELECT  
 [Resource].[ResourceKey],   
 [Resource].[CompanyKey],   
 [Resource].[ResourceTypeKey],   
 [Resource].[FirstName],   
 [Resource].[LastName],   
 [Resource].[Title],   
 [Resource].[Email],   
 [Resource].[Email2],   
 [Resource].[CellPhone],   
 [Resource].[HomePhone],   
 [Resource].[HomePhone2],   
 [Resource].[Work],   
 [Resource].[Work2],   
 [Resource].[Fax],   
 [Resource].[Address],   
 [Resource].[Address2],   
 [Resource].[City],   
 [Resource].[State] as StateName,
 [Resource].[State],   
 [Resource].[Zip],   
 [Resource].[PrimaryContact],   
 [Resource].[Description],   
 [Resource].[DateAdded],   
 [Resource].[LastModificationTime],   
 [Resource].[Status] ,  
 us.Username,  
 us.AccountLocked,
 c.Name as CompanyName,
 pm.MaskedCCNumber
FROM  
 [Resource]   
 left join [User] as us on us.ResourceKey = Resource.ResourceKey  
 left join Company as c on c.CompanyKey = Resource.CompanyKey  
 left join State as s on s.StateKey = Resource.State  
 left Join  PaymentMethod  pm on pm.CompanyKey =  Resource.CompanyKey
WHERE [Resource].[CompanyKey] = @CompanyKey  
-- Get the Error Code for the statement just executed.  
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[api_Service_GetAll]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[api_Service_GetAll]

AS
SET NOCOUNT ON


select ServiceKey, Title from [Service] order by Title asc
GO
/****** Object:  StoredProcedure [dbo].[api_Service_GetServiceByCompanyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--api_Service_GetServiceByCompanyKey 3217,0
CREATE Procedure [dbo].[api_Service_GetServiceByCompanyKey]
@CompanyKey int,
@errorCode int output
As
Begin
	select vs.VendorServiceKey,s.ServiceKey,s.Title as ServiceTitle from VendorService vs
	join Service s on s.ServiceKey = vs.ServiceKey
	where vs.VendorKey = @CompanyKey
End
GO
/****** Object:  StoredProcedure [dbo].[api_State_SelectAll]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[api_State_SelectAll]

AS
SET NOCOUNT ON
BEGIN
select StateKey, Title from [State]

END
GO
/****** Object:  StoredProcedure [dbo].[api_User_ChangePassword]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[api_User_ChangePassword]
	--@email varchar(200),
	@UserKey int,
	@NewPassword varchar(max),
	@Oldpassword varchar(max),
	@errorCode INT OUTPUT,
	@Status Int OutPut
	
AS
Begin
-- Added UserKey in If Condition --- Roshan
If EXISTS(Select * from [User] Where   [Password] COLLATE Latin1_general_CS_AS=@Oldpassword and UserKey = @UserKey)
Begin
update [user] set Password = @NewPassword, FirstTimeAccess = 0  where UserKey = @UserKey

SELECT @errorCode = @@ERROR
SET @Status=1
End
Else 
Begin
Set @Status=0
End
-- Get the Error Code for the statement just executed.

End
SELECT @errorCode = @@ERROR
Return @Status
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_BidDetails]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- api_Vendor_BidDetails 3204,25,0
CREATE Procedure [dbo].[api_Vendor_BidDetails]
@UserKey int,
@BidRequestKey nvarchar(50),
@errorCode int
As
Begin
declare @ModuleKey int
declare @VendorKey int = 0
declare @CompanyKey int
declare @ResourceKey int
declare @BidVendorModuleKey int
declare @msglookuptype nvarchar(50)

declare @BRStatus nvarchar(100)
select top(1) @BRStatus=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status' ) and Title='Submitted'

declare @MessageStatusNew nvarchar(100)
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status' )and Title='New')


--if(@BidType='BidRequest' OR @BidType = 'Bid')
--begin
--	set @BidType = 'BidRequest'
--Select @ModuleKey=ModuleKey From Module where Controller='BidRequest'
--set @msglookuptype='Bid Vendor Status'
--end
--else if(@BidType='WorkOrder')
--begin
--Select @ModuleKey=ModuleKey From Module where Controller='WorkOrder'
--set @msglookuptype='Bid Vendor Status'
----set @msglookuptype='Bid Status'
--end
select top(1) @BidVendorModuleKey = ModuleKey from Module where controller = 'Bid'

 select top(1) @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
 select top(1) @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey
 select top(1) @VendorKey = VendorKey from BidVendor where ResourceKey = @ResourceKey
 select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey
 if(@VendorKey = 0 OR @VendorKey = null OR @VendorKey = '')
 begin
	set @VendorKey = @CompanyKey
 end

select * 
  ,case when (bidstatus = 'Accepted' or BidStatus = 'Rejected') then BidStatus else Statuslook end as Statuslookup,
  (Select Count(1) From Message Where ObjectKey=i.BidVendorKey and MessageStatus=@MessageStatusNew and ResourceKey not in ((Select ResourceKey From [User] where UserKey=@UserKey))) as NewMsg
  from (Select *, row_number() over(order by Statuslook desc) as  rownum
   From ( select br.BidRequestKey,
  br.ResourceKey,
  br.Title,
	br.ModuleKey as ModuleKey,
   Convert(nvarchar(12), bv.RespondByDate,101) as DefaultRespondByDate,
    Convert(nvarchar(12), br.DateAdded,101) as DateAdded,
 ser.ServiceKey,
 prp.PropertyKey,
  (select top(1) Title from Module m where br.ModuleKey = m.ModuleKey) as BidType,
  br.Description,
 Convert(nvarchar(12), br.BidDueDate,101) as BidDueDate,
  Convert(nvarchar(12), br.StartDate,101) as StartDate,
  (Select top(1) us1.ResourceKey From [User] us1 where us1.UserKey =@UserKey) as LoginResourceKey,
  ser.Title as Service,
  (Select top 1 Name from Company where CompanyKey = prp.CompanyKey) as CompanyName,
  prp.Title as Property,
  prp.NumberOfUnits as NumberOfUnits,
  prp.Address as Address,
  prp.Address2 as Address2,
  prp.City as City,
   (Select top(1) Title From State where StateKey=prp.State) as State,
  prp.Zip as Zip,
 -- res.FirstName + ' ' + res.FirstName as ContactName,
  --res.Work as WorkNumber,
 -- res.Work2 as WorkNumber2, 
 -- res.Email as Email,
  --res.Email2 as Email2,  
  (select top(1) rs.FirstName + '' + rs.LastName from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as ContactName,
  (select top(1) rs.Cellphone from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as CellPhone,
  (select top(1) rs.Work from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber,
  (select top(1) rs.Work2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber2,
  (select top(1) rs.Email from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email,
  (select top(1) rs.Email2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email2,

  (select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 
		and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = @BidRequestKey) as NotificationType
		,
  
  0 as NoofBids,
   BidRequestStatus,
   BidVendorStatus, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status')) as Statuslookup, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status')) as Statuslookup, 
  isnull((select top 1 title from lookup lu where lu.lookupkey = bid.BIdstatus),'') as bidstatus,  
  (select top(1) Title from lookup where 
 ( LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status'))
 

  
  ) as Statuslook, 
  
  @BidVendorModuleKey as ModuleKeyBidVendor,
   bv.BidVendorKey as BidVendorKey, bid.Total, bid.BidKey, bid.Description as BidDesc, Bid.LastModificationTime as BidLastModification
   from [BidRequest] as br
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey
 inner join company as cp on cp.CompanyKey = bv.vendorKey
 inner join Property as prp on prp.PropertyKey = br.PropertyKey
 inner join Service as ser on ser.ServiceKey = br.ServiceKey
 left join bid on bid.bidvendorkey = bv.bidvendorkey 	

   where
  (bv.VendorKey = @VendorKey) and bv.BidRequestKey = @BidRequestKey
  )j)
   i where rownum between  1 and 50
  end

  select @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_BidList]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_Vendor_BidList 3204,'workorder',0,'close'
CREATE Procedure [dbo].[api_Vendor_BidList]
@UserKey int,
@BidType nvarchar(50),
@errorCode int,
@Status nvarchar(50) = 'all'
As
Begin
declare @ModuleKey int
declare @VendorKey int = 0
declare @CompanyKey int
declare @ResourceKey int
declare @BidVendorModuleKey int
declare @msglookuptype nvarchar(50)
declare @status1 Table (st varchar(20))
declare @brst Table (st1 varchar(20))
declare @qry nvarchar(max)
declare @qry1 nvarchar(max)

declare @BRStatus nvarchar(100)
select top(1) @BRStatus=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status' ) and Title='Submitted'

declare @MessageStatusNew nvarchar(100)
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status' )and Title='New')


if(@BidType='BidRequest' OR @BidType = 'Bid')
begin
	set @BidType = 'BidRequest'
Select @ModuleKey=ModuleKey From Module where Controller='BidRequest'
set @msglookuptype='Bid Vendor Status'
end
else if(@BidType='WorkOrder')
begin
Select @ModuleKey=ModuleKey From Module where Controller='WorkOrder'
set @msglookuptype='Bid Vendor Status'
--set @msglookuptype='Bid Status'
end
select top(1) @BidVendorModuleKey = ModuleKey from Module where controller = 'Bid'
if(@ModuleKey != 0)
begin
 select top(1) @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
 select top(1) @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey
 select top(1) @VendorKey = @CompanyKey
 if(@VendorKey = 0 OR @VendorKey = null OR @VendorKey = '')
 begin
	set @VendorKey = @CompanyKey
 end

 select @qry = case when (@Status = 'open' or @Status = '')  then
		'Select Title from LookUp where Title in(''In Progress'',''Interested'',''Submitted'',''Accepted'')'
		when @Status = 'close' then 
		case when (@BidType = 'BidRequest') then
		'Select Title from LookUp where Title in(''Accepted'',''Rejected'',''Not Interested'')'
		else 'Select Title from LookUp where Title in(''Accepted'',''Rejected'',''Not Interested'')' end
		when @Status = 'all' then
		'Select Title from LookUp where Title in(''In Progress'',''Submitted'',''Interested'',''Not Interested'',''Rejected'',''Accepted'')'
		End
	
		print(@qry)

	Insert into @status1 Exec(@qry)

	select @qry1 = case when (@Status = 'open' or @Status = '')  then
		'Select Title from LookUp where Title in(''Submitted'')'
		when @Status = 'close' then 
		'Select Title from LookUp where Title in(''Completed'',''Closed'')'
		when @Status = 'all' then
		'Select Title from LookUp where Title in(''Submitted'',''Completed'',''Closed'')'
		End
	
		print(@qry1)

	Insert into @brst Exec(@qry1)

select * 
  ,case when (BidReqStatus = 'Completed' or BidReqStatus = 'Closed') 
  then BidReqStatus when (bidstatus = 'Accepted' or BidStatus = 'Rejected') then BidStatus else Statuslook end as Statuslookup,
  (Select Count(1) From Message Where ObjectKey=i.BidVendorKey and ( ModuleKey=@ModuleKey) and MessageStatus=@MessageStatusNew and ResourceKey not in ((Select ResourceKey From [User] where UserKey=@UserKey))) as NewMsg
  from (Select *, row_number() over(order by BidRequestKey desc) as  rownum
   From ( select Distinct(br.BidRequestKey),
  br.ResourceKey,
  br.Title,
	br.ModuleKey as ModuleKey,
   Convert(nvarchar(12), br.DefaultRespondByDate,101) as DefaultRespondByDate,
    Convert(nvarchar(12), br.DateAdded,101) as DateAdded,
 ser.ServiceKey,
 prp.PropertyKey,
 @BidType as BidType,
  br.Description,
 Convert(nvarchar(12), br.BidDueDate,101) as BidDueDate,
  Convert(nvarchar(12), br.StartDate,101) as StartDate,
  (Select top(1) us1.ResourceKey From [User] us1 where us1.UserKey =@UserKey) as LoginResourceKey,
  ser.Title as Service,
  cp.Name as CompanyName,
  prp.Title as Property,
  prp.NumberOfUnits as NumberOfUnits,
  prp.Address as Address,
  prp.Address2 as Address2,
  prp.City as City,
   (Select top(1) Title From State where StateKey=prp.State) as State,
  prp.Zip as Zip,
 -- res.FirstName + ' ' + res.FirstName as ContactName,
  --res.Work as WorkNumber,
 -- res.Work2 as WorkNumber2, 
 -- res.Email as Email,
  --res.Email2 as Email2,  
  (Select top(1) resc.FirstName + ' ' + resc.FirstName  From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as ContactName,
  (Select top(1) resc.Cellphone From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as CellPhone,
  (Select top(1) resc.Work From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber,
  (Select top(1) resc.Work2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber2,
  (Select top(1) resc.Email From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email,
  (Select top(1) resc.Email2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email2,

  
  0 as NoofBids,
   BidRequestStatus,
   BidVendorStatus, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status')) as Statuslookup, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status')) as Statuslookup, 
  isnull((select top 1 title from lookup lu where lu.lookupkey = bid.BidStatus),'') as bidstatus,  
  (select top(1) Title from lookup where 
 ( LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (7,8))
 --Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status'

  
  ) as Statuslook, 
  (select Title from LookUp where LookupKey = br.BidRequestStatus) as BidReqStatus,
  @BidVendorModuleKey as ModuleKeyBidVendor,
   bv.BidVendorKey as BidVendorKey,
   (select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 and NotificationType = 'BidReqStatus'
		and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationType
		 
   from [BidRequest] as br
 left join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey
 inner join company as cp on cp.CompanyKey = bv.vendorKey
 inner join Property as prp on prp.PropertyKey = br.PropertyKey
 inner join Service as ser on ser.ServiceKey = br.ServiceKey
 left join bid on bid.BidVendorKey = bv.bidvendorkey 

   where 
  (br.ModuleKey=@ModuleKey)  
  and (br.BidRequestStatus in (select LookUpKey from LookUp where Title in (select st1 from @brst)) and 
  bv.BidVendorStatus in (select LookUpKey from LookUp where Title in (select st from @status1)) 
  and (bv.VendorKey = @VendorKey))
  
  )j)
   i where rownum between  1 and 1000000
  end
  select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_BidList_Copy]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- api_Vendor_BidList 2099,'Bid',0
CREATE Procedure [dbo].[api_Vendor_BidList_Copy]
@UserKey int,
@BidType nvarchar(50),
@errorCode int
As
Begin
declare @ModuleKey int
declare @VendorKey int = 0
declare @CompanyKey int
declare @ResourceKey int
declare @BidVendorModuleKey int
declare @msglookuptype nvarchar(50)

declare @BRStatus nvarchar(100)
select top(1) @BRStatus=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status' ) and Title='Submitted'

declare @MessageStatusNew nvarchar(100)
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status' )and Title='New')


if(@BidType='BidRequest' OR @BidType = 'Bid')
begin
	set @BidType = 'BidRequest'
Select @ModuleKey=ModuleKey From Module where Controller='BidRequest'
set @msglookuptype='Bid Vendor Status'
end
else if(@BidType='WorkOrder')
begin
Select @ModuleKey=ModuleKey From Module where Controller='WorkOrder'
set @msglookuptype='Bid Vendor Status'
--set @msglookuptype='Bid Status'
end
select top(1) @BidVendorModuleKey = ModuleKey from Module where controller = 'Bid'
if(@ModuleKey != 0)
begin
 select top(1) @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
 select top(1) @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey
 select top(1) @VendorKey = @CompanyKey
 if(@VendorKey = 0 OR @VendorKey = null OR @VendorKey = '')
 begin
	set @VendorKey = @CompanyKey
 end

select * 
  ,case when (bidstatus = 'Accepted' or BidStatus = 'Rejected') then BidStatus else Statuslook end as Statuslookup,
  (Select Count(1) From Message Where ObjectKey=i.BidVendorKey and ( ModuleKey=@ModuleKey) and MessageStatus=@MessageStatusNew and ResourceKey not in ((Select ResourceKey From [User] where UserKey=@UserKey))) as NewMsg
  from (Select *, row_number() over(order by BidRequestKey desc) as  rownum
   From ( select Distinct(br.BidRequestKey),
  br.ResourceKey,
  br.Title,
	br.ModuleKey as ModuleKey,
   Convert(nvarchar(12), br.DefaultRespondByDate,101) as DefaultRespondByDate,
    Convert(nvarchar(12), br.DateAdded,101) as DateAdded,
 ser.ServiceKey,
 prp.PropertyKey,
 @BidType as BidType,
  br.Description,
 Convert(nvarchar(12), br.BidDueDate,101) as BidDueDate,
  Convert(nvarchar(12), br.StartDate,101) as StartDate,
  (Select top(1) us1.ResourceKey From [User] us1 where us1.UserKey =@UserKey) as LoginResourceKey,
  ser.Title as Service,
  cp.Name as CompanyName,
  prp.Title as Property,
  prp.NumberOfUnits as NumberOfUnits,
  prp.Address as Address,
  prp.Address2 as Address2,
  prp.City as City,
   (Select top(1) Title From State where StateKey=prp.State) as State,
  prp.Zip as Zip,
 -- res.FirstName + ' ' + res.FirstName as ContactName,
  --res.Work as WorkNumber,
 -- res.Work2 as WorkNumber2, 
 -- res.Email as Email,
  --res.Email2 as Email2,  
  (Select top(1) resc.FirstName + ' ' + resc.FirstName  From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as ContactName,
  (Select top(1) resc.Cellphone From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as CellPhone,
  (Select top(1) resc.Work From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber,
  (Select top(1) resc.Work2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber2,
  (Select top(1) resc.Email From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email,
  (Select top(1) resc.Email2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email2,

  
  0 as NoofBids,
   BidRequestStatus,
   BidVendorStatus, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status')) as Statuslookup, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status')) as Statuslookup, 
  isnull((select top 1 title from lookup lu where lu.lookupkey = bid.BIdstatus),'') as bidstatus,  
  (select top(1) Title from lookup where 
 ( LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status'))
 

  
  ) as Statuslook, 
  
  @BidVendorModuleKey as ModuleKeyBidVendor,
   bv.BidVendorKey as BidVendorKey,
   (select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 and NotificationType = 'BidReqStatus'
		and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationType
		
   from [BidRequest] as br
 left join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey
 inner join company as cp on cp.CompanyKey = bv.vendorKey
 inner join Property as prp on prp.PropertyKey = br.PropertyKey
 inner join Service as ser on ser.ServiceKey = br.ServiceKey
 left join bid on bid.BidVendorKey = bv.bidvendorkey 	

   where 
  (br.ModuleKey=@ModuleKey) and br.BidRequestStatus = @BRStatus  and 
  (bv.VendorKey = @VendorKey)
  
  )j)
   i where rownum between  1 and 1000000
  end
  select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_BidList_New]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  
  
-- api_Vendor_BidList_New 2099,0,1,100
CREATE PROCEDURE [dbo].[api_Vendor_BidList_New]  
@UserKey int,  
@PropertyKey int,  
@BidRequestStatus int,  
@modulekey int  = 100,
@PageSize int = 1000000,                             
@PageIndex int = 1,                             
@Search nvarchar(max) = '',                                
@Sort nvarchar(max) = 'order by BidRequestKey desc' 
AS  
BEGIN  
  declare @qrywhere varchar(max)                      
  declare @qrytotal varchar(max)                       
  declare @qry varchar(max)      
  declare @ResourceKey int
  select @ResourceKey = ResourceKey from [user] where Userkey = @UserKey
    --For Cout total unread message  
declare @MessageStatusNew nvarchar(100)  
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')  
  --@BidRequestStatus 
  --open 1
  --close 2 
  --all 0
declare @ModuleKeyForMessage nvarchar(100)  
if(@modulekey=100)  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'  
end  
else  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'  
  end  
  set @qrytotal =   'declare @total int    
  select  @total  = count(*) from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))   
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 )  
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))'   
  
  set @qry = ' select   *,     
  (Select Count(1) From Message Where  MessageStatus='''+@MessageStatusNew+''' and ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  bv.BidRequestKey in  
    (Select br.BidRequestKey From BidRequest br where br.BidRequestKey =  j.BidRequestKey and ModuleKey='''+@ModuleKeyForMessage+''') and bv.VendorKey not in   
 (Select CompanyKey From Resource where '+Convert(nvarchar(50),'ResourceKey')+'='+ Convert(nvarchar(50), @ResourceKey)+'))) as NewMsg  
  
  from ( select * , @total  as TotalRecord, row_number() over('+@Sort+') as  rownum from (   
  select br.BidRequestKey,br.Title,ps.Title as PropertyName  
  ,(case when convert(varchar(10),br.StartDate,101)=''01/01/1900'' then '''' else convert(varchar(10),br.StartDate,101) end) as StartDate,convert(varchar(10),BidDueDate,101) as BidDueDate  
 ,(select count(1) from Bid b where b.BidVendorKey in (Select BidVendorKey from BidVendor bv where bv.BidRequestKey = br.BidRequestKey) and b.BidStatus  = 801) as NoofBids  
 , (select top 1 l.Title from LookUpType lt inner join [LookUp] l on lt.LookUpTypeKey = l.LookUpTypeKey and l.LookUpKey = br.BidRequestStatus) as BidRequestStatus  ,
   
   (select top 1(select (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@modulekey)+' and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) 
	  THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS priority,
	  (select top 1 (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@modulekey)+' and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.Id) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationId,

(select top 1 (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@modulekey)+' and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.NotificationType) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationType
   from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
  
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))  
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 ) 
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))  
  ) i   
  )j  
  where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)   
      print(@qrytotal + @qry)          
      exec( @qrytotal + @qry)            
end  
  



  --select * from bidrequest where propertykey = 2106 and bidrequeststatus >= 600 and bidrequeststatus <= 601
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_BidListNew]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- api_Vendor_BidListNew 2099,'Bid','open',0
CREATE Procedure [dbo].[api_Vendor_BidListNew]
@UserKey int,
@BidType nvarchar(50),
@Status nvarchar(50),
@errorCode int
As
Begin
declare @ModuleKey int
declare @VendorKey int = 0
declare @CompanyKey int
declare @ResourceKey int
declare @BidVendorModuleKey int
declare @msglookuptype nvarchar(50)
declare @status1 Table (st varchar(20))
declare @qry nvarchar(max)

declare @BRStatus nvarchar(100)
select top(1) @BRStatus=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status' ) and Title='Submitted'

declare @MessageStatusNew nvarchar(100)
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status' )and Title='New')


if(@BidType='BidRequest' OR @BidType = 'Bid')
begin
	set @BidType = 'BidRequest'
Select @ModuleKey=ModuleKey From Module where Controller='BidRequest'
set @msglookuptype='Bid Vendor Status'
end
else if(@BidType='WorkOrder')
begin
Select @ModuleKey=ModuleKey From Module where Controller='WorkOrder'
set @msglookuptype='Bid Vendor Status'
--set @msglookuptype='Bid Status'
end
select top(1) @BidVendorModuleKey = ModuleKey from Module where controller = 'Bid'
if(@ModuleKey != 0)
begin
 select top(1) @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
 select top(1) @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey
 select top(1) @VendorKey = @CompanyKey
 if(@VendorKey = 0 OR @VendorKey = null OR @VendorKey = '')
 begin
	set @VendorKey = @CompanyKey
 end

 select @qry = case when (@Status = 'open' or @Status = '')  then
		'Select Title from LookUp where Title in(''In Progress'',''Interested'',''Submitted'',''Accepted'')'
		when @Status = 'close' then 
		'Select Title from LookUp where Title in(''Rejected'',''Not Interested'')'
		when @Status = 'all' then
		'Select Title from LookUp where Title in(''In Progress'',''Submitted'',''Interested'',''Not Interested'',''Rejected'',''Accepted'')'
		End
	
		print(@qry)

	Insert into @status1 Exec(@qry)

select * 
  ,case when (bidstatus = 'Accepted' or BidStatus = 'Rejected') then BidStatus else Statuslook end as Statuslookup,
  (Select Count(1) From Message Where ObjectKey=i.BidVendorKey and ( ModuleKey=@ModuleKey) and MessageStatus=@MessageStatusNew and ResourceKey not in ((Select ResourceKey From [User] where UserKey=@UserKey))) as NewMsg
  from (Select *, row_number() over(order by BidRequestKey desc) as  rownum
   From ( select Distinct(br.BidRequestKey),
  br.ResourceKey,
  br.Title,
	br.ModuleKey as ModuleKey,
   Convert(nvarchar(12), br.DefaultRespondByDate,101) as DefaultRespondByDate,
    Convert(nvarchar(12), br.DateAdded,101) as DateAdded,
 ser.ServiceKey,
 prp.PropertyKey,
 @BidType as BidType,
  br.Description,
 Convert(nvarchar(12), br.BidDueDate,101) as BidDueDate,
  Convert(nvarchar(12), br.StartDate,101) as StartDate,
  (Select top(1) us1.ResourceKey From [User] us1 where us1.UserKey =@UserKey) as LoginResourceKey,
  ser.Title as Service,
  cp.Name as CompanyName,
  prp.Title as Property,
  prp.NumberOfUnits as NumberOfUnits,
  prp.Address as Address,
  prp.Address2 as Address2,
  prp.City as City,
   (Select top(1) Title From State where StateKey=prp.State) as State,
  prp.Zip as Zip,
 -- res.FirstName + ' ' + res.FirstName as ContactName,
  --res.Work as WorkNumber,
 -- res.Work2 as WorkNumber2, 
 -- res.Email as Email,
  --res.Email2 as Email2,  
  (Select top(1) resc.FirstName + ' ' + resc.FirstName  From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as ContactName,
  (Select top(1) resc.Cellphone From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as CellPhone,
  (Select top(1) resc.Work From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber,
  (Select top(1) resc.Work2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber2,
  (Select top(1) resc.Email From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email,
  (Select top(1) resc.Email2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email2,

  
  0 as NoofBids,
   BidRequestStatus,
   BidVendorStatus, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status')) as Statuslookup, 
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status')) as Statuslookup, 
  isnull((select top 1 title from lookup lu where lu.lookupkey = bid.BidStatus),'') as bidstatus,  
  (select top(1) Title from lookup where 
 ( LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (7,8))
 --Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status'

  
  ) as Statuslook, 
  
  @BidVendorModuleKey as ModuleKeyBidVendor,
   bv.BidVendorKey as BidVendorKey,
   (select case when br.BidRequestKey = (select top 1 ObjectKey from (select top 1 ObjectKey from ABNotification where ModuleKey = @ModuleKey and Status = 900 and NotificationType = 'BidReqStatus'
		and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey) as ObjectKey)
		then 1 else 0 end) as hasNotification,
		(select top 1 Id from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationId,
		(select top 1 NotificationType from ABNotification where ModuleKey = @ModuleKey and Status = 900 and ForResource = @ResourceKey and ObjectKey = br.BidRequestKey and NotificationType = 'BidReqStatus') as NotificationType
		
   from [BidRequest] as br
 left join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey
 inner join company as cp on cp.CompanyKey = bv.vendorKey
 inner join Property as prp on prp.PropertyKey = br.PropertyKey
 inner join Service as ser on ser.ServiceKey = br.ServiceKey
 left join bid on bid.BidVendorKey = bv.bidvendorkey 

   where 
  (br.ModuleKey=@ModuleKey)  and (br.BidRequestStatus = @BRStatus) and
  (bv.VendorKey = @VendorKey) and (bv.BidVendorStatus in (select LookUpKey from LookUp where Title in (select st from @status1)))
  
  )j)
   i where rownum between  1 and 1000000
  end
  select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_ByVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- api_Vendor_SelectIndexPaging 50,1,1063,'','order by star asc','',0,0
-- api_Vendor_ByVendorKey 6508
CREATE PROCEDURE [dbo].[api_Vendor_ByVendorKey]
@VendorKey int
AS
BEGIN
 select r.ResourceKey,Co.CompanyKey,Co.Name,Co.Address,Co.Address2,Co.City,St.StateKey as State,
 r.Work,r.Work2,r.FirstName,r.LastName,r.CellPhone
 ,St.Title,Co.Zip,0 as star,1 as invited from Company  as Co
 inner join Resource as r on Co.CompanyKey = r.[CompanyKey] 
 inner Join [CompanyVendor] as V on V.[VendorKey]=Co.[CompanyKey] 
 inner join State as St on St.StateKey=Co.State  
 where V.CompanyKey=@VendorKey and Co.CompanyKey=@VendorKey
END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_CheckDuplicateCompanyByCompanyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- [api_Vendor_CheckDuplicateCompanyByUserKey] 'My COmpany','3217',0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Create PROCEDURE [dbo].[api_Vendor_CheckDuplicateCompanyByCompanyKey]
	 
	@CompanyName varchar(150),
	@CompanyKey int,
	@CompStatus int OUTPUT

AS
	 
SET NOCOUNT ON

	if not exists (Select * from Company where Name = @CompanyName except select * from Company where CompanyKey = @CompanyKey)
		begin
		SET @CompStatus = 1
		end
	else
		begin
		SET @CompStatus = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_CheckDuplicateCompanyByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [api_Vendor_CheckDuplicateCompanyByUserKey] 'My COmpany','3217',0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[api_Vendor_CheckDuplicateCompanyByUserKey]
	 
	@CompanyName varchar(150),
	@UserKey int,
	@CompStatus int OUTPUT

AS
	 
SET NOCOUNT ON

	declare @CompanyKey int

	select top(1) @CompanyKey = c.CompanyKey From  Company	c join Resource r on r.CompanyKey = c.CompanyKey 
	join [User] u on u.ResourceKey = r.ResourceKey where u.UserKey = @UserKey
	if not exists (Select * from Company where Name = @CompanyName except select * from Company where CompanyKey = @CompanyKey)
		begin
		SET @CompStatus = 1
		end
	else
		begin
		SET @CompStatus = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_CheckDuplicateEmailByCompanyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [api_Vendor_CheckDuplicateEmailByUserKey] 'xyz@a.com','2098',0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Create PROCEDURE [dbo].[api_Vendor_CheckDuplicateEmailByCompanyKey]
	 
	@EmailId varchar(150),
	@CompanyKey int,
	@EmailStatus int OUTPUT

AS
SET NOCOUNT ON

	declare @ResourceKey int

	select top(1) @ResourceKey = ResourceKey from Resource where ResourceKey = @CompanyKey
	if not exists (Select * from Resource where Email = @EmailId and ResourceKey != @ResourceKey)
		begin
		SET @EmailStatus = 1
		end
	else
		begin
		SET @EmailStatus = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_CheckDuplicateEmailByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [api_Vendor_CheckDuplicateEmailByUserKey] 'xyz@a.com','2098',0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[api_Vendor_CheckDuplicateEmailByUserKey]
	 
	@EmailId varchar(150),
	@UserKey int,
	@EmailStatus int OUTPUT

AS
SET NOCOUNT ON

	declare @ResourceKey int

	select top(1) @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	if not exists (Select * from Resource where Email = @EmailId and ResourceKey != @ResourceKey)
		begin
		SET @EmailStatus = 1
		end
	else
		begin
		SET @EmailStatus = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_Feedback]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-- api_Vendor_SelectIndexPaging 50,1,1063,'','order by star asc','',0,0

CREATE PROCEDURE [dbo].[api_Vendor_Feedback]
@VendorKey int
AS

BEGIN
 
 select Ve.VendorRatingKey,Ve.RatingOne,Ve.RatingTwo,Ve.RatingThree,Ve.RatingFour,Ve.RatingFive,Ve.Message,Ve.LastModificationTime from VendorRating as  Ve where VendorKey=@VendorKey

END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_GetBidDocuments]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- api_vendor_GetBidDocuments 10915,100
CREATE PROCEDURE [dbo].[api_Vendor_GetBidDocuments]
@ObjectKey int,
@ModuleKey int
AS
BEGIN

	select DocumentKey,FileName,FileSize,LastModificationTime from Document
	where ObjectKey = @ObjectKey and (ModuleKey = @ModuleKey or
	ModuleKey = (select ModuleKey from Module where Controller = 'PMBidRequests') or
	ModuleKey = (select ModuleKey from Module where Controller = 'PMWorkOrders'))
END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_GetPaymentMethod]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[api_Vendor_GetPaymentMethod]
@UserKey int
As
Begin
declare @ResourceKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey

select PaymentMethodKey,
CompanyKey,
CardHolderFirstName,
CardHolderLastName,
MaskedCCNumber,
AddedOn,
AddedByResourceKey,
Status,
PrimaryMethod,
CardExpiryMonth,
CardExpiryYear
from PaymentMethod
where AddedByResourceKey = @ResourceKey

End
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_Insert]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- api_Vendor_Insert 'Abcd Company 2','Add 1','Add 2','Any City','FL','12345','45214521454','4562145','abcdefg@gmail.com','Any Desc',null,null,null,0,0
CREATE PROCEDURE [dbo].[api_Vendor_Insert]

	@CompanyName    varchar(500),
	@FirstName    varchar(500),
	@LastName    varchar(500),
	@Address		varchar(500),
	@Address2		varchar(500),
	@City			varchar(500),
	@StateKey		varchar(2),
	@zip			varchar(150),
	@Cellphone			varchar(150),
	@Email          varchar(500),
	@Resourcekey   	int,
	@companyvalue INT OUTPUT

AS
SET NOCOUNT ON

declare @vendorkey int
declare @companytype int
declare @status int
declare @insurancekey int

declare @Resourcevalue int
select @companytype = LookUpKey from LookUp where Title = 'Company Vendor' 
select @status = LookUpKey from LookUp where Title = 'Pending'

  insert into Company(Name,[State],[Address],Address2,City,Zip,[Status],CompanyTypeKey,CompanyID,PortalKey)
		                      values(@CompanyName,@StateKey,@Address,@Address2,@City,@zip,100,@companytype,NEWID(),3)

           set @vendorkey = @@identity
		   select  @companyvalue = @@IDENTITY
		   declare @ResourceTypeKey int
		   select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'

		  Insert into Resource (CompanyKey,FirstName, LastName,ResourceTypeKey,CellPhone, Email, Address, Address2, City, State, Zip,DateAdded,LastModificationTime, Status,PrimaryContact) 
	      values 
	      (@vendorkey,@FirstName,@LastName,@ResourceTypeKey, @Cellphone, @Email, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),101,1)

		  set @ResourceKey = @@IDENTITY

		  insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values((select r.companykey from Resource r where r.ResourceKey = @Resourcekey),@vendorkey,getdate(),101)


		  insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,1)
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_MarkAsStarUnstar]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[api_Vendor_MarkAsStarUnstar]
	@CompanyKey int,	
	@UserKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON

declare @StarVendorKey int
declare @ResourceKey int
	select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
   select @StarVendorKey = count(StarVendorKey) from StarVendor Where VendorKey= @CompanyKey

     if(@StarVendorKey = 0)
	 begin

	 insert into  StarVendor (VendorKey ,ResourceKey,AddedOn) values (@CompanyKey,@ResourceKey,getdate())
	 end
else 
begin
delete  from  StarVendor where  VendorKey = @CompanyKey
end
select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_MemberShip]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- api_Vendor_MemberShip 2099
CREATE Procedure [dbo].[api_Vendor_MemberShip]
@UserKey int
As
Begin
declare @ResourceKey int
declare @VendorKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
select @VendorKey = CompanyKey from Resource where ResourceKey = @ResourceKey

	select m.MemberShipKey,m.VendorKey,m.StartDate,m.EndDate,m.RenewalDate,m.AutomaticRenewal,m.LastModificationTime,m.RenewalStatus,
	m.CancelMembership,m.InvoiceKey,pm.PaymentMethodKey,pm.CardExpiryMonth,pm.CardExpiryYear,
	'XXXX XXXX XXXX ' + SubString(pm.[MaskedCCNumber],13,LEN(pm.[MaskedCCNumber])-1) as MaskedCCNumber
	from Membership m
	join PaymentMethod pm on pm.CompanyKey = m.VendorKey
	where VendorKey = @VendorKey and RenewalStatus = 0 and pm.PrimaryMethod = 1
End
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_SelectAll]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- api_Vendor_SelectAll 50000,1,2098,'','order by name asc','',0
-- api_Vendor_SelectAll 2098
CREATE PROCEDURE [dbo].[api_Vendor_SelectAll]
@UserKey int,
@PageSize int = 50000,                           
@PageIndex int = 1,    
@Search nvarchar(max) ='',                              
@Sort nvarchar(max)= 'order by name asc',
@service nvarchar(max) = '',
@checkstar nvarchar(max) = '0',
@invited nvarchar(max)= null
AS
BEGIN
declare @resourceKey int
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
	select @resourceKey = ResourceKey from [User] where UserKey = @UserKey
  set @qrywhere = 'where (lu.Title in (''Company Vendor'',''Vendor'')) and  
   (u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Approved'') or (u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Pending'') and ic.invited is not null)) 
  and  ((u.Name like  ''%'+ @Search +'%'') or (i.FirstName + '' '' + i.LastName like ''%'+ @Search +'%'')) and 
  (u.companykey in (select vs.vendorkey from Vendorservice vs where vs.servicekey in (select s.servicekey from [service] s where s.title like ''%'+ @service +'%'')) or ( '''+@service+''' = '''' ))' 

if(@checkstar <> '0')
Begin
	set @qrywhere = @qrywhere + 'and (isnull((select top 1 1 from StarVendor where vendorkey = u.CompanyKey and ResourceKey = ' + Convert(varchar,@resourceKey) + '),0) = ' + @checkstar + ')'
End
if(@invited is not null)
Begin
	set @qrywhere = @qrywhere + 'and (invited is not null)'
End
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u
   inner join (select xc.CompanyKey, isnull((select top 1 xr.firstname  from Resource xr where xr.PrimaryContact = 1 and xr.CompanyKey = xc.CompanyKey), '''') as firstname, isnull((select top 1 xr.LastName  from Resource xr where xr.PrimaryContact = 1 and


 xr.CompanyKey = xc.CompanyKey), '''') as lastname from Company xc) i
	on u.CompanyKey = i.CompanyKey
   inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
   left join  (select CompanyVendor.VendorKey, 1 as invited from CompanyVendor where CompanyVendor.CompanyKey = (select rc.companykey from [Resource] rc where rc.ResourceKey = ' + Convert(varchar,@resourceKey) + ')) iC on ic.VendorKey =u.Companykey
   '+@qrywhere + ''

set @qry = '   select * from (select *,row_number() over('+@Sort+') as  rownum from ( 
 select u.Name, u.CompanyKey, isnull((select top 1 1 from StarVendor where vendorkey = u.CompanyKey and ResourceKey = ' + Convert(varchar,@resourceKey) + '),0) as star
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] 
 inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey
    FOR XML PATH('''')),1,1,'''')) as SeriveTitle , i.FirstName + '' '' + i.LastName as Work,
	(Select top 1 Address from Resource r Where r.CompanyKey = u.CompanyKey and PrimaryContact = 1) as Address,
	(Select top 1 Address2 from Resource r Where r.CompanyKey = u.CompanyKey and PrimaryContact = 1) as Address1,
	(Select top 1 City from Resource r Where r.CompanyKey = u.CompanyKey and PrimaryContact = 1) as City,
	(Select top 1 State from Resource r Where r.CompanyKey = u.CompanyKey and PrimaryContact = 1) as State,
	(Select top 1 Title from State where StateKey = (Select top 1 State from Resource r Where r.CompanyKey = u.CompanyKey and PrimaryContact = 1)) as StateTitle,
	(Select top 1 Zip from Resource r Where r.CompanyKey = u.CompanyKey and PrimaryContact = 1) as Zip,
    @total  as TotalRecord, isnull(invited,0) as invited from [Company] u 
      inner join (select xc.CompanyKey, isnull((select top 1 xr.firstname  from Resource xr where xr.PrimaryContact = 1 and xr.CompanyKey = xc.CompanyKey), '''') as firstname, isnull((select top 1 xr.LastName  from Resource xr where xr.PrimaryContact = 1 


   and xr.CompanyKey = xc.CompanyKey), '''') as lastname from Company xc) i
	on u.CompanyKey = i.CompanyKey
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey 	
	  left join  (select CompanyVendor.VendorKey, 1 as invited from CompanyVendor where CompanyVendor.CompanyKey = (select rc.companykey from [Resource] rc where rc.ResourceKey = ' + Convert(varchar,@resourceKey) + ')) iC on ic.VendorKey =u.Companykey
   '+@qrywhere+'
   
  ) j ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_SelectIndexPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-- api_Vendor_SelectIndexPaging 1063
CREATE PROCEDURE [dbo].[api_Vendor_SelectIndexPaging]

AS
BEGIN
  select r.ResourceKey,Co.CompanyKey,Co.Name,Co.Address,Co.Address2,Co.City,St.StateKey as State,St.Title,Co.Zip,0 as star,1 as invited from Company  as Co inner join Resource as r on Co.CompanyKey = r.[CompanyKey] inner Join [CompanyVendor] as V on V.[VendorKey]=Co.[CompanyKey]  inner join State as St on St.StateKey=Co.State   where V.CompanyKey=3216
END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_SelectIndexPagingNew]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- api_Vendor_SelectIndexPagingNew 2098
CREATE PROCEDURE [dbo].[api_Vendor_SelectIndexPagingNew]
@UserKey int
AS
BEGIN
declare @ResourceKey int
declare @CompanyKey int
select  @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
select @CompanyKey = CompanyKey from Resource where ResourceKey = @ResourceKey
  select Co.CompanyKey,Co.Name,Co.City,St.StateKey as State,co.Website,
  St.Title,Co.Zip,0 as star, (select case when (co.Status = 100) then 1 else 0 End) as invited,
  (select case when (exists(select * from StarVendor where ResourceKey = @ResourceKey and VendorKey = co.CompanyKey)) then 1 else 0 end) as StarVendor,
  (select case when (co.Status = 100) then 1 else 0 end) as IsInvited,
  (Select top 1 (FirstName+ ' '+ LastName)as ContactName from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as ContactPerson,
  (Select top 1 Email from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as Email,
  (Select top 1 Work from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as Work,
  (Select top 1 Work2 from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as Work2,
  (Select top 1 Address from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as Address,
  (Select top 1 Address2 from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as Address2,
  (Select top 1 Fax from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as Fax,
  (Select top 1 CellPhone from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as Cellphone,
  (Select top 1 City from Resource r Where r.CompanyKey = co.CompanyKey and PrimaryContact = 1) as City
  from Company  as Co
  --left Join [CompanyVendor] as V on V.[VendorKey]=Co.[CompanyKey] 
  left Join (select CompanyVendor.VendorKey, 1 as invited from CompanyVendor where CompanyVendor.CompanyKey = (select rc.companykey from [Resource] rc where rc.ResourceKey = @resourceKey)) iC on ic.VendorKey = co.Companykey
  inner join (select xc.CompanyKey, isnull((select top 1 xr.firstname  from Resource xr where xr.PrimaryContact = 1 and xr.CompanyKey = xc.CompanyKey), '''') as firstname, isnull((select top 1 xr.LastName  from Resource xr where xr.PrimaryContact = 1 

   and xr.CompanyKey = xc.CompanyKey), '''') as lastname from Company xc) i
	on co.CompanyKey = i.CompanyKey
  left join State as St on St.StateKey=Co.State

  where co.CompanyTypeKey in(select LookUpKey from LookUp 
	where Title in ('Company Vendor','Vendor'))

	order by Name asc
  
END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_Services]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-- api_Vendor_SelectIndexPaging 50,1,1063,'','order by star asc','',0,0

CREATE PROCEDURE [dbo].[api_Vendor_Services]
@VendorKey int
AS

BEGIN
 
 select S.ServiceKey ,S.Title  from service as S inner join VendorService as Vs on S.ServiceKey=Vs.ServiceKey where Vs.VendorKey =@VendorKey

END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_Update]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[api_Vendor_Update]
    @companyKey     INT,
	@companyName    varchar(150),
	@Work			varchar(50),
	@email          varchar(150),
	@Address		varchar(100),
	@Address2		varchar(100),
	@City			varchar(50),
	@StateKey		varchar(2),
	@zip			varchar(11),
	@status INT,
	@error INT OUTPUT
	
AS
SET NOCOUNT ON
BEGIN
UPDATE [Company]   
SET

	[Name] = @companyName,
	[Address] = @Address,
	[Address2] = @Address2,
	[City] = @City,
	[State] = @StateKey,
	[Work] = @work,
	[Zip] = @zip

	
WHERE [Company].[CompanyKey] = @companyKey

 update [Resource] set Email = @email where CompanyKey = @companyKey
  select @error = @@ERROR
 END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_UpdateNew]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[api_Vendor_UpdateNew]
    @companyKey     INT,
	@companyName    varchar(150),
	@FirstName			varchar(550),
	@LastName			varchar(550),
	@email          varchar(150),
	@Address		varchar(100),
	@Address2		varchar(100),
	@City			varchar(50),
	@StateKey		varchar(2),
	@zip			varchar(11),
	@Cellphone			varchar(50),
	@status INT,
	@error INT OUTPUT
	
AS
SET NOCOUNT ON
BEGIN
UPDATE [Company]   
SET

	[Name] = @companyName,
	[Address] = @Address,
	[Address2] = @Address2,
	[City] = @City,
	[State] = @StateKey,
	[Zip] = @zip

	
WHERE [Company].[CompanyKey] = @companyKey

 update [Resource] set Email = @email,Address = @Address,Address2 = @Address2,City = @City,State = @StateKey,Zip = @zip
 ,FirstName = @FirstName,LastName = @LastName,CellPhone = @Cellphone where CompanyKey = @companyKey
  select @error = @@ERROR
 END
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_UpdateProfile]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[api_Vendor_UpdateProfile]
@UserKey int,
@ServiceIDs nvarchar(50),
@CompanyName nvarchar(200),
@LegalName nvarchar(200),
@Address nvarchar(max),
@Address2 nvarchar(max),
@City nvarchar(100),
@State nvarchar(10),
@Zip nvarchar(10),
@WorkPhone nvarchar(20),
@WorkPhone2 nvarchar(20),
@Website nvarchar(200),
@TaxID nvarchar(100),
@Fax nvarchar(20),
@Radius nvarchar(20),
@errorCode int OUTPUT
AS
Begin
	declare @CompanyKey int
	declare @ResourceKey int

	select top(1) @ResourceKey = ResourceKey from [User] where Userkey = @UserKey
	Select top(1) @CompanyKey =  CompanyKey from Resource where ResourceKey = @ResourceKey

	update Resource set Address = @Address,Address2 = @Address2,City = @City, State =  @State, Zip = @Zip, Work = @WorkPhone,
	Work2 = @WorkPhone2,Fax = @Fax, LastModificationTime = getdate() where ResourceKey = @ResourceKey

	update Company Set Name = @CompanyName, LegalName = @LegalName,Address = @Address,Address2 = @Address2,City = @City,
	State =  @State, Zip = @Zip, Work = @WorkPhone,
	Work2 = @WorkPhone2,Fax = @Fax, TaxID = @TaxID, Website = @Website, LastModificationTime = getdate() where CompanyKey = @CompanyKey

	update ServiceArea set [Address] = @Address,Address2 = @Address2,City = @City,[State] = @State
						,Zip = @Zip,Radius = @Radius where VendorKey = @CompanyKey

		   delete from VendorService where VendorKey = @CompanyKey

			declare  vendorcur cursor for

			select item from  SplitString(@ServiceIDs,',')

			declare @servicekey int

			open vendorcur 

				fetch  next from vendorcur into @servicekey
					while @@FETCH_STATUS = 0  
					begin 
						insert into VendorService (servicekey,vendorkey)values(@servicekey,@CompanyKey) 

						fetch  next from vendorcur into @servicekey
					end
		close vendorcur
		deallocate vendorcur

		select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Vendor_UpdateProfileNew]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[api_Vendor_UpdateProfileNew]
@UserKey int,
@ServiceIDs nvarchar(50),
@Email nvarchar(200),
@FirstName nvarchar(200),
@LastName nvarchar(200),
@Title nvarchar(200),
@Address nvarchar(max),
@Address2 nvarchar(max),
@City nvarchar(100),
@State nvarchar(10),
@Zip nvarchar(10),
@WorkPhone nvarchar(20),
@WorkPhone2 nvarchar(20),
@Cellphone nvarchar(20),
@Radius nvarchar(20),
@errorCode int OUTPUT
AS
Begin
	declare @CompanyKey int
	declare @ResourceKey int

	select top(1) @ResourceKey = ResourceKey from [User] where Userkey = @UserKey
	Select top(1) @CompanyKey =  CompanyKey from Resource where ResourceKey = @ResourceKey

	update Resource set FirstName = @FirstName,LastName = @LastName,Email = @Email,Title = @Title,Address = @Address,Address2 = @Address2,City = @City, State =  @State, Zip = @Zip, Work = @WorkPhone,
	Work2 = @WorkPhone2,CellPhone = @Cellphone, LastModificationTime = getdate() where ResourceKey = @ResourceKey

	--Name = @CompanyName, LegalName = @LegalName,
	update Company Set Address = @Address,Address2 = @Address2,City = @City,
	State =  @State, Zip = @Zip, Work = @WorkPhone,
	Work2 = @WorkPhone2, LastModificationTime = getdate() where CompanyKey = @CompanyKey

	update ServiceArea set [Address] = @Address,Address2 = @Address2,City = @City,[State] = @State
						,Zip = @Zip,Radius = @Radius where VendorKey = @CompanyKey

		   delete from VendorService where VendorKey = @CompanyKey

			declare  vendorcur cursor for

			select item from  SplitString(@ServiceIDs,',')

			declare @servicekey int

			open vendorcur 

				fetch  next from vendorcur into @servicekey
					while @@FETCH_STATUS = 0  
					begin 
						insert into VendorService (servicekey,vendorkey)values(@servicekey,@CompanyKey) 

						fetch  next from vendorcur into @servicekey
					end
		close vendorcur
		deallocate vendorcur

		select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[api_Vendors_GetAllVendorsForBidRequest]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  

  --api_Vendors_GetAllVendorsForBidRequest  88,0
  
CREATE procedure [dbo].[api_Vendors_GetAllVendorsForBidRequest]  
@BidRequestKey int,  
@errorCode int output  
As  
begin  
  
declare @resourceKey int  
select @resourceKey = ResourceKey from BidRequest where BidRequestKey = @BidRequestKey  
  
DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)                      
                      
select @LAT =isnull(Latitude,''), @LONG =isnull(Longitude,'') from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @BidRequestkey)                      
                      
SET @geo1= geography::Point(@LAT, @LONG, 4326)                  
  
  declare  @moduleKey int   
declare  @parentkey int   
  
select  @moduleKey  =  ( select  ModuleKey from BidRequest where BidRequestKey = @BidRequestKey)     
select  @parentkey  =  (select ParentBidRequestKey from BidRequest where BidRequestKey = @BidRequestKey)    

if(@moduleKey = 100 and @parentkey  is  not null)  
begin 

--Select Name as CompanyName, LegalName as VendorName, '' as LastWorkDate, CompanyKey as VendorKey from  Company as cp  
--inner join VendorService as vs on vs.VendorKey = cp.CompanyKey where vs.ServiceKey = @ServiceKey  
  
  
select distinct CompanyKey, ResourceKey,CompanyName, VendorName,Work,Work2,Email, Fax, Address,Address2,City,State, Zip,WebSite,  
 isStared,    
      (select  max(LastModificationTime)       
from BidVendor where bidvendorkey in (select bidvendorkey from bidvendor bv1        
join BidRequest br1 on br1.BidRequestKey = bv1.BidRequestKey        
where vendorkey = i.CompanyKey and br1.BidRequestStatus = 602) and BidVendorStatus = 802) as 'LastWorkDate'  
 ,ModuleKey,StateKey from  
 (select cp.CompanyKey, Name as CompanyName, isnull(rs.FirstName,'') + ' ' + isnull(rs.LastName,'') as 'VendorName',  
 isnull((select top 1 1 from StarVendor cv where cv.VendorKey = cp.CompanyKey and ResourceKey = @resourceKey),0) as 'isStared',  
 rs.ResourceKey,rs.Work,rs.Work2,rs.Email,rs.Fax,rs.Address,rs.Address2,rs.City,  
 case When ((select Title from State where StateKey = rs.State) = null or (select Title from State where StateKey = rs.State) = '') then rs.State  
 else (select Title from State where StateKey = rs.State) end as State,rs.Zip,cp.WebSite,  
 (select ModuleKey from BidRequest where BidRequestKey = @BidRequestKey) as ModuleKey,rs.State as StateKey  
from Company as cp   
inner join resource as rs on rs.CompanyKey = cp.CompanyKey and rs.PrimaryContact = 1  
inner join VendorService as vs on vs.VendorKey = cp.CompanyKey and vs.ServiceKey in (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)  
inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey    
where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and LookUp.Title in ('Company Vendor','Vendor'))  
and cp.companykey not in (select bv.vendorkey from BidVendor bv where bv.BidRequestKey = @BidRequestKey)  
and cp.status = 101 and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5  
)i  
  
select @errorCode = @@Error  
  end

else  
begin
select distinct CompanyKey, ResourceKey,CompanyName, VendorName,Work,Work2,Email, Fax, Address,Address2,City,State, Zip,WebSite,  
 isStared,    
(select  max (LastModificationTime)         
from BidVendor where bidvendorkey in (select bidvendorkey from bidvendor bv1        
join BidRequest br1 on br1.BidRequestKey = bv1.BidRequestKey        
where vendorkey = i.CompanyKey and br1.BidRequestStatus = 602 and ModuleKey = 106) and BidVendorStatus = 802) as 'LastWorkDate'           
 ,ModuleKey,StateKey from  
 (select cp.CompanyKey, Name as CompanyName, isnull(rs.FirstName,'') + ' ' + isnull(rs.LastName,'') as 'VendorName',  
 isnull((select top 1 1 from StarVendor cv where cv.VendorKey = cp.CompanyKey and ResourceKey = @resourceKey),0) as 'isStared',  
 rs.ResourceKey,rs.Work,rs.Work2,rs.Email,rs.Fax,rs.Address,rs.Address2,rs.City,  
 case When ((select Title from State where StateKey = rs.State) = null or (select Title from State where StateKey = rs.State) = '') then rs.State  
 else (select Title from State where StateKey = rs.State) end as State,rs.Zip,cp.WebSite,  
 (select ModuleKey from BidRequest where BidRequestKey = @BidRequestKey) as ModuleKey,rs.State as StateKey  
from Company as cp   
inner join resource as rs on rs.CompanyKey = cp.CompanyKey and rs.PrimaryContact = 1  
inner join VendorService as vs on vs.VendorKey = cp.CompanyKey and vs.ServiceKey in (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)  
inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey    
where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and LookUp.Title in ('Company Vendor','Vendor'))  
and cp.companykey not in (select bv.vendorkey from BidVendor bv where bv.BidRequestKey = @BidRequestKey)  
and cp.status = 101 and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5  
)i  
  
select @errorCode = @@Error  

end


end  
GO
/****** Object:  StoredProcedure [dbo].[api_WorkOrder_SelectIndexPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- [api_WorkOrder_SelectIndexPaging] 3216,50,1,'','order by  Bidrequest.title desc',0





CREATE PROCEDURE [dbo].[api_WorkOrder_SelectIndexPaging]
@companyKey int,
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@errorCode int OUTPUT
    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (bv.VendorKey = '+ Convert(varchar,@companyKey)+' and ModuleKey in (select ModuleKey from
  Module where Title = ''Work Orders'')  and ((BidRequest.Title like  ''%'+ @Search +'%'')
  or ( '''+@Search+''' = '''' )))' 
  
  set @qrytotal =   'declare @total int select  @total  = count(*) from [BidRequest]
	inner join BidVendor bv on BidRequest.BidRequestKey = bv.BidRequestKey
	inner  join  PropertyResource prs on  Prs.PropertyKey = BidRequest.PropertyKey
    inner join property pr on pr.PropertyKey = BidRequest.propertykey
   '+@qrywhere+''

set @qry = '   
	
	select * from (select [BidRequest].[BidRequestKey], ' +
		'		[BidRequest].[PropertyKey], ' +
		'		[BidRequest].[ResourceKey], ' +
		'		[BidRequest].[ServiceKey], ' +
		'		[BidRequest].[Title], ' +
		'		[BidRequest].[BidDueDate], ' +
		'		[BidRequest].[StartDate], ' +
		'		[BidRequest].[EndDate], ' +
		'		[BidRequest].[Description], ' +
		'		[BidRequest].[DateAdded], ' +
		'		[BidRequest].[LastModificationTime], ' +
		'		[BidRequest].[BidRequestStatus],l.Title as BidStatus, pr.Title as Propertyname, pr.NumberOfUnits, ' +
		'	row_number() over(' + @Sort +') as  rownum, @total as TotalRecord from [BidRequest]' +
		'	inner join BidVendor bv on BidRequest.BidRequestKey = bv.BidRequestKey' +
		'	inner join property pr on pr.PropertyKey = BidRequest.propertykey
		inner  join  PropertyResource prs on  Prs.PropertyKey = BidRequest.PropertyKey
		inner join Lookup l on l.LookupKey = [BidRequest].[BidRequestStatus]
      
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          

	  set @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[config_LookUp_InsertData]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[config_LookUp_InsertData]
AS
SET NOCOUNT ON

CREATE TABLE #LT ( LookUpTypeTitle VARCHAR(150) )

INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Status' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Access' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Task Status' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Task Priority' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Email Status' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Bid Request Status' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Bid Vendor Status' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Bid Status' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Message Status' )

INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Company Type' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Resource Type' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Pricing Type' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Payment Type' )
INSERT INTO #LT ( LookUpTypeTitle ) VALUES  ( 'Frequency Type' )

SET NOCOUNT OFF


DECLARE @lookUpTypeTitle VARCHAR(150),
		@lookUpTypeKey INT,
		@errorCode INT

DECLARE object_cursor CURSOR FOR 
SELECT LookUpTypeTitle
FROM #LT

OPEN object_cursor

FETCH NEXT FROM object_cursor 
INTO @lookUpTypeTitle

WHILE @@FETCH_STATUS = 0
BEGIN

	EXEC dbo.config_LookUpType_InsertOne 
		@lookUpTypeTitle,
	    @lookUpTypeKey OUTPUT,
	    @errorCode OUTPUT

	FETCH NEXT FROM object_cursor 
	INTO @lookUpTypeTitle

END

CLOSE object_cursor
DEALLOCATE object_cursor

DROP TABLE #LT

----------------------------------------------------------

SET NOCOUNT ON 

CREATE TABLE #L (LookUpTypeTitle VARCHAR(150), LookUpTitle VARCHAR(150), SortOrder FLOAT, Value INT)

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Status', 'Pending', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Status', 'Approved', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Status', 'Unapproved', 3, 4 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Access', 'Create', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Access', 'Read', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Access', 'Update', 3, 4 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Access', 'Delete', 4, 8 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Status', 'Not Started', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Status', 'In Progress', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Status', 'Waiting', 3, 16 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Status', 'Deferred', 4, 8 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Status', 'Complete', 5, 4 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Status', 'Closed', 6, 32 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Priority', 'Low', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Priority', 'Normal', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Task Priority', 'High', 3, 4 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Email Status', 'New', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Email Status', 'Pending', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Email Status', 'Sent', 3, 4 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Request Status', 'In Progress', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Request Status', 'Submitted', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Request Status', 'Completed', 3, 4 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Request Status', 'Closed', 4, 8 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Vendor Status', 'In Progress', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Vendor Status', 'Submitted', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Vendor Status', 'Interested', 3, 4 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Vendor Status', 'Not Interested', 4, 8 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Status', 'In Progress', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Status', 'Submitted', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Status', 'Accepted', 3, 4 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Bid Status', 'Rejected', 4, 8 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Message Status', 'New', 1, 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Message Status', 'Read', 2, 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder, Value ) VALUES  ( 'Message Status', 'Deleted', 3, 4 )

----------------------------------------------------------

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Company Type', 'Administration' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Company Type', 'Management Company' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Company Type', 'Vendor' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Company Type', 'Company Vendor' )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Resource Type', 'Staff' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Resource Type', 'Contact' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Resource Type', 'Mailing Address' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Resource Type', 'Other' )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Pricing Type', 'Membership Fee' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Pricing Type', 'No Bid Fee' )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle ) VALUES  ( 'Pricing Type', 'Bid Fee' )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Payment Type', 'Check', 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Payment Type', 'ACH', 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Payment Type', 'Debit Card', 3 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Payment Type', 'Credit Card', 4 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Payment Type', 'Other', 5 )

INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'One-Time', 1 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Daily', 2 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Weekly', 3 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Every two weeks', 4 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Twice a month', 5 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Monthly', 6 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Quarterly', 7 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Twice a year', 8 )
INSERT INTO #L ( LookUpTypeTitle, LookUpTitle, SortOrder ) VALUES  ( 'Frequency Type', 'Annually', 9 )


SET NOCOUNT OFF

DECLARE @lookUpTitle VARCHAR(150),
		@lookUpValue INT,
		@sortOrder FLOAT,
		@lookUpKey INT

DECLARE object_cursor CURSOR FOR 
SELECT LookUpTypeTitle, LookUpTitle, SortOrder, Value
FROM #L t

OPEN object_cursor

FETCH NEXT FROM object_cursor 
INTO @lookUpTypeTitle, @lookUpTitle, @sortOrder, @lookUpValue

WHILE @@FETCH_STATUS = 0
BEGIN

	EXEC dbo.config_LookUp_InsertOne 
		@lookUpTypeTitle,
	    @lookUpTitle,
	    @lookUpValue,
	    @sortOrder,
	    @lookUpKey OUTPUT,
	    @errorCode OUTPUT

	FETCH NEXT FROM object_cursor 
	INTO @lookUpTypeTitle, @lookUpTitle, @sortOrder, @lookUpValue

END

CLOSE object_cursor
DEALLOCATE object_cursor

DROP TABLE #L

GO
/****** Object:  StoredProcedure [dbo].[config_LookUp_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[config_LookUp_InsertOne]
	@lookUpTypeTitle varchar(150),
	@lookUpTitle varchar(150),
	@lookUpValue int,
	@sortOrder float(53),
	@lookUpKey int OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
DECLARE @lookUpTypeKey INT

SET @lookUpKey = dbo.GetLookUpKey(@lookUpTypeTitle, @lookUpTitle)

IF (@lookUpKey <= 0)
BEGIN
	SET @lookUpTypeKey = dbo.GetLookUpTypeKey(@lookUpTypeTitle)
	
	IF NOT EXISTS (SELECT 1 FROM LookUp WHERE LookUpTypeKey = @lookUpTypeKey)
		SET @lookUpKey = (@lookUpTypeKey * 100)
	ELSE
	BEGIN
		SELECT @lookUpKey = Max(LookUpKey)
		FROM LookUp
		WHERE LookUpTypeKey = @lookUpTypeKey
		
		SET @lookUpKey = @lookUpKey + 1
	END
	INSERT INTO [LookUp]
	(
		[LookUpKey],
		[LookUpTypeKey],
		[Title],
		[Value],
		[SortOrder]
	)
	VALUES
	(
		@lookUpKey,
		@lookUpTypeKey,
		@lookUpTitle,
		@lookUpValue,
		@sortOrder
	)
	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[config_LookUpType_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[config_LookUpType_InsertOne]
	@title varchar(150),
	@lookUpTypeKey int OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SET @lookUpTypeKey = dbo.GetLookUpTypeKey(@title)
IF (@lookUpTypeKey <= 0)
BEGIN	
	INSERT INTO [LookUpType]
	(
		[Title]
	)
	VALUES
	(
		@title
	)
	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
	-- Get the IDENTITY value for the row just inserted.
	SELECT @lookUpTypeKey = SCOPE_IDENTITY()
END

GO
/****** Object:  StoredProcedure [dbo].[config_System_InsertData]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[config_System_InsertData]
AS
SET NOCOUNT ON

DECLARE @approvedStatus INT = 2,
		@portalKey INT


--------------------------------------------------------------------
-----	PORTAL
--------------------------------------------------------------------

IF EXISTS (SELECT 1 FROM [Portal] WHERE [PortalID] = 'portal')
BEGIN
	SELECT @portalKey = PortalKey FROM [Portal] WHERE [PortalID] = 'portal'
END
ELSE
BEGIN
	INSERT INTO [Portal] ([PortalID], [Title], [DateAdded], [LastModificationTime], [Status])
	values ( 'portal', 'Association Bids Portal', GETDATE(), GETDATE(), @approvedStatus )

	-- Get the IDENTITY value for the row just inserted.
	SELECT @portalKey = SCOPE_IDENTITY()
END

IF EXISTS (SELECT 1 FROM [Portal] WHERE [PortalID] = 'company')
BEGIN
	SELECT @portalKey = PortalKey FROM [Portal] WHERE [PortalID] = 'company'
END
ELSE
BEGIN
	INSERT INTO [Portal] ([PortalID], [Title], [DateAdded], [LastModificationTime], [Status])
	values ( 'company', 'Company Portal', GETDATE(), GETDATE(), @approvedStatus )
END

IF EXISTS (SELECT 1 FROM [Portal] WHERE [PortalID] = 'vendor')
BEGIN
	SELECT @portalKey = PortalKey FROM [Portal] WHERE [PortalID] = 'vendor'
END
ELSE
BEGIN
	INSERT INTO [Portal] ([PortalID], [Title], [DateAdded], [LastModificationTime], [Status])
	values ( 'vendor', 'Vendor Portal', GETDATE(), GETDATE(), @approvedStatus )
END


--------------------------------------------------------------------
-----	GROUPS
--------------------------------------------------------------------

CREATE TABLE #G ( [Title] VARCHAR(150) )

INSERT INTO #G ( Title ) VALUES  ( 'Administrator' )
INSERT INTO #G ( Title ) VALUES  ( 'Supervisor' )
INSERT INTO #G ( Title ) VALUES  ( 'Property Manager' )
INSERT INTO #G ( Title ) VALUES  ( 'Staff' )
INSERT INTO #G ( Title ) VALUES  ( 'Vendor' )
INSERT INTO #G ( Title ) VALUES  ( 'Guest' )
INSERT INTO #G ( Title ) VALUES  ( 'Other' )

INSERT INTO [Group] ( [Title] )
SELECT T.Title
FROM #G T
LEFT JOIN [Group] G ON T.Title = G.Title
WHERE G.GroupKey IS NULL

DROP TABLE #G

--------------------------------------------------------------------
-----	MODULES
--------------------------------------------------------------------
-- select * from Module order by title

CREATE TABLE #M ([Id] INT UNIQUE, [Title] VARCHAR(150), [Controller] VARCHAR(150), [Action] VARCHAR(150), [Image] VARCHAR(150) )

BEGIN TRANSACTION

INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (1, 'Home', 'Home', 'Index', 'home.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (2, 'Billing', 'Billing', 'Index', 'billing.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (3, 'Settings', 'Settings', 'Index', 'settings.png')

INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (100, 'Bid Requests', 'BidRequest', 'Index', 'bid-request.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (101, 'Bids', 'Bid', 'Index', 'bid.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (102, 'Properties', 'Property', 'Index', 'property.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (103, 'Staff', 'Staff', 'Index', 'staff.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (104, 'Vendors', 'Vendor', 'Index', 'vendor.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (105, 'Verify Vendors', 'VendorVerify', 'Index', 'vendor-verify.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (106, 'Work Orders', 'WorkOrder', 'Index', 'work-order.png')

INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (200, 'Invoices', 'Invoice', 'Index', 'invoice.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (201, 'Payments', 'Payment', 'Index', 'payment.png')

INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (300, 'Account', 'Account', 'Index', 'password.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (301, 'Credit Cards', 'CreditCard', 'Index', 'credit-card.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (302, 'Insurance', 'Insurance', 'Index', 'insurance.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (303, 'Profile', 'Profile', 'Index', 'user.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (304, 'Services', 'CompanyService', 'Index', 'service.png')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (305, 'Service Areas', 'ServiceArea', 'Index', 'service-area.png')

INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (701, 'Company', 'Company', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (702, 'Documents', 'Document', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (703, 'Messages', 'Message', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (704, 'Notes', 'Note', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (705, 'Register', 'Register', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (706, 'Resources', 'Resource', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (707, 'Reminders', 'Reminder', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (708, 'Tasks', 'Task', 'Index', '')
INSERT INTO #M ([Id], [Title], [Controller], [Action], [Image]) VALUES (709, 'Reward Points', 'Rewards', 'Index', 'reward-points.png')


INSERT INTO [Module] ([ModuleKey], [Title], [Controller], [Action], [Image])
SELECT t.Id, t.[Title], t.[Controller], t.[Action], t.[Image]
FROM #M t
LEFT JOIN [Module] m ON (t.Title = m.Title AND t.Controller = m.Controller)
WHERE m.ModuleKey IS NULL
ORDER BY t.Id


COMMIT TRANSACTION

DROP TABLE #M


----------------------------------------------------------------------
-----	 Disable Modules
----------------------------------------------------------------------

CREATE TABLE #MO (Title VARCHAR(150))

/*

INSERT INTO #MO (Title) VALUES ('Sales')


UPDATE Module
SET [Status] = 1	-- Pending Approval
FROM Module M
JOIN #MO M2 ON M.Title = M2.Title

*/

DROP TABLE #MO




--------------------------------------------------------------------
-----	GROUP MODULE ACCESS
--------------------------------------------------------------------

/*
Read	1
Create	2
Update	4
Delete	8
*/

DECLARE @groupKey INT = 0
DECLARE @access INT = 0

SELECT @groupKey = GroupKey FROM [Group] WHERE Title = 'Administrator'
SELECT @access = 15

INSERT INTO [GroupModuleAccess] (PortalKey, GroupKey, ModuleKey, Access)
SELECT @portalKey, @groupKey, m.ModuleKey, @access
FROM [Module] m
LEFT JOIN [GroupModuleAccess] gma ON (m.ModuleKey = gma.ModuleKey and gma.GroupKey = @groupKey and gma.Access = @access)
WHERE gma.GroupModuleAccessKey IS NULL



CREATE TABLE #GMA (ModuleTitle varchar(150), Supervisor INT, PropertyManager INT, Vendor INT, Guest INT)

-----	GROUP MODULE ACCESS (PROPERTY MANAGER)

INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Home', 1, 1, 1, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Billing', 1, 0, 1, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Settings', 1, 1, 1, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Bid Requests', 15, 15, 1, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Bids', 5, 5, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Properties', 15, 15, 0, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Staff', 7, 0, 0, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Vendors', 7, 1, 0, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Verify Vendors', 7, 0, 0, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Work Orders', 15, 15, 5, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Invoices', 7, 0, 1, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Payments', 7, 0, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Account', 5, 5, 5, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Credit Cards', 1, 0, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Insurance', 0, 0, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Profile', 5, 5, 5, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Services', 0, 0, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Service Areas', 0, 0, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Company', 7, 1, 5, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Documents', 15, 15, 15, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Messages', 1, 1, 1, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Notes', 7, 7, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Register', 0, 0, 7, 3)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Resources', 7, 7, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Reminders', 7, 7, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Tasks', 7, 7, 7, 0)
INSERT INTO #GMA (ModuleTitle, Supervisor, PropertyManager, Vendor, Guest) VALUES ('Reward Points', 7, 1, 0, 0)


if exists (select 1 from #GMA where ModuleTitle not in ( select Title from [Module] ) )
begin
	print 'modules missing'
	select moduletitle from #GMA where ModuleTitle not in ( select Title from [Module] )
end

INSERT INTO [GroupModuleAccess] (PortalKey, GroupKey, ModuleKey, Access)
SELECT @portalKey, g.GroupKey, m.ModuleKey, gma.Supervisor
FROM #GMA gma
JOIN [Group] g on g.Title = 'Supervisor'
JOIN [Module] m on gma.ModuleTitle = m.Title
LEFT JOIN [GroupModuleAccess] gma2 ON (m.ModuleKey = gma2.ModuleKey and g.GroupKey = gma2.GroupKey and gma.Supervisor = gma2.Access)
WHERE gma.Supervisor > 0
and gma2.GroupModuleAccessKey IS NULL

union

SELECT @portalKey, g.GroupKey, m.ModuleKey, gma.PropertyManager
FROM #GMA gma
JOIN [Group] g on g.Title = 'Property Manager'
JOIN [Module] m on gma.ModuleTitle = m.Title
LEFT JOIN [GroupModuleAccess] gma2 ON (m.ModuleKey = gma2.ModuleKey and g.GroupKey = gma2.GroupKey and gma.PropertyManager = gma2.Access)
WHERE gma.PropertyManager > 0
and gma2.GroupModuleAccessKey IS NULL

union

SELECT @portalKey, g.GroupKey, m.ModuleKey, gma.Vendor
FROM #GMA gma
JOIN [Group] g on g.Title = 'Vendor'
JOIN [Module] m on gma.ModuleTitle = m.Title
LEFT JOIN [GroupModuleAccess] gma2 ON (m.ModuleKey = gma2.ModuleKey and g.GroupKey = gma2.GroupKey and gma.Vendor = gma2.Access)
WHERE gma.Vendor > 0
and gma2.GroupModuleAccessKey IS NULL

union

SELECT @portalKey, g.GroupKey, m.ModuleKey, gma.Guest
FROM #GMA gma
JOIN [Group] g on g.Title = 'Guest'
JOIN [Module] m on gma.ModuleTitle = m.Title
LEFT JOIN [GroupModuleAccess] gma2 ON (m.ModuleKey = gma2.ModuleKey and g.GroupKey = gma2.GroupKey and gma.Guest = gma2.Access)
WHERE gma.Guest > 0
and gma2.GroupModuleAccessKey IS NULL



--------------------------------------------------------------------
-----	REPORTS
--------------------------------------------------------------------
/*
CREATE TABLE #R ( [ModuleTitle] VARCHAR(150), [Title] VARCHAR(150), [Controller] VARCHAR(150), [Action] VARCHAR(150) )

INSERT INTO #R ([ModuleTitle] ,[Title], [Controller], [Action]) VALUES ('Resident Directory', 'Resident Directory', 'Reports', 'Residents')
INSERT INTO #R ([ModuleTitle] ,[Title], [Controller], [Action]) VALUES ('Resident Directory', 'Mailing Labels', 'Reports', 'MailingLabels')
     
INSERT INTO [Report] ([ModuleKey], [Title], [Controller], [Action])
SELECT m.ModuleKey, t.[Title], t.[Controller], t.[Action]
FROM #R t
JOIN [Module] m on t.ModuleTitle = m.TItle
LEFT JOIN [Report] r ON (m.ModuleKey = r.ModuleKey AND t.Title = r.Title AND t.Controller = r.Controller AND t.Action = r.Action)
WHERE r.ReportKey IS NULL

DROP TABLE #R
*/

--------------------------------------------------------------------
----- STATE
--------------------------------------------------------------------

CREATE TABLE #S ( StateKey VARCHAR(2), Title VARCHAR(150) )

INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'AL', 'Alabama' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'AK', 'Alaska' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'AZ', 'Arizona' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'AR', 'Arkansas' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'CA', 'California' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'CO', 'Colorado' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'CT', 'Connecticut' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'DE', 'Delaware' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'FL', 'Florida' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'GA', 'Georgia' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'HI', 'Hawaii' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'ID', 'Idaho' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'IL', 'Illinois' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'IN', 'Indiana' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'IA', 'Iowa' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'KS', 'Kansas' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'KY', 'Kentucky' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'LA', 'Louisiana ' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'ME', 'Maine' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'MD', 'Maryland' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'MA', 'Massachusetts' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'MI', 'Michigan' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'MN', 'Minnesota' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'MS', 'Mississippi' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'MO', 'Missouri' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'MT', 'Montana' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'NE', 'Nebraska' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'NV', 'Nevada' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'NH', 'New Hampshire' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'NJ', 'New Jersey' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'NM', 'New Mexico' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'NY', 'New York' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'NC', 'North Carolina' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'ND', 'North Dakota' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'OH', 'Ohio' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'OK', 'Oklahoma' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'OR', 'Oregon' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'PA', 'Pennsylvania' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'RI', 'Rhode Island' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'SC', 'South Carolina' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'SD', 'South Dakota' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'TN', 'Tennessee' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'TX', 'Texas' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'UT', 'Utah' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'VT', 'Vermont' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'VA', 'Virginia' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'WA', 'Washington' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'DC', 'Washington, D.C.' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'WV', 'West Virginia' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'WI', 'Wisconsin' )
INSERT INTO #S ( [StateKey], [Title] ) VALUES ( 'WY', 'Wyoming' )

INSERT INTO dbo.State ( StateKey, Title )
SELECT t.StateKey, t.Title
FROM #S t
LEFT JOIN dbo.State s ON t.Title = s.Title
WHERE s.StateKey IS NULL

DROP TABLE #S

--------------------------------------------------------------------
----- SERVICE
--------------------------------------------------------------------


set nocount on

create table #R (ServiceKey varchar(50), Title varchar(150))

insert into #R (ServiceKey, Title) values ('accountant-cpa','Accountant/CPA')
insert into #R (ServiceKey, Title) values ('air-conditioning','Air Conditioning')
insert into #R (ServiceKey, Title) values ('architects-architectural-review','Architects/Architectural Review')
insert into #R (ServiceKey, Title) values ('asphalt-paving-maintenace-repair','Asphalt Paving/Maintenace/Repair')
insert into #R (ServiceKey, Title) values ('attorneys','Attorneys')
insert into #R (ServiceKey, Title) values ('balcony-restoration','Balcony Restoration')
insert into #R (ServiceKey, Title) values ('banking-financial-services','Banking/Financial Services')
insert into #R (ServiceKey, Title) values ('builders-developers','Builders/Developers')
insert into #R (ServiceKey, Title) values ('cableinternetphone','Cable/Internet/Phone')
insert into #R (ServiceKey, Title) values ('carpentry','Carpentry')
insert into #R (ServiceKey, Title) values ('carpentry-cleaning','Carpet Cleaning')
insert into #R (ServiceKey, Title) values ('carpentry-installation','Carpet Installation')
insert into #R (ServiceKey, Title) values ('catch-basin-cleaning','Catch Basin Cleaning')
insert into #R (ServiceKey, Title) values ('collections','Collections')
insert into #R (ServiceKey, Title) values ('concierge-services','Concierge Services')
insert into #R (ServiceKey, Title) values ('concrete-repair','Concrete Repair')
insert into #R (ServiceKey, Title) values ('construction','Construction')
insert into #R (ServiceKey, Title) values ('consulting','Consulting')
insert into #R (ServiceKey, Title) values ('credit-reporting','Credit Reporting')
insert into #R (ServiceKey, Title) values ('deck-products-and-services','Deck Products and Services')
insert into #R (ServiceKey, Title) values ('disaster-planning','Disaster Planning')
insert into #R (ServiceKey, Title) values ('electrical-service','Electrical Service')
insert into #R (ServiceKey, Title) values ('elevators','Elevators')
insert into #R (ServiceKey, Title) values ('emergency-restoration-services','Emergency Restoration Services')
insert into #R (ServiceKey, Title) values ('engineers','Engineers')
insert into #R (ServiceKey, Title) values ('environmental-safety-inspections','Environmental & Safety Inspections')
insert into #R (ServiceKey, Title) values ('environmental-services','Environmental Services')
insert into #R (ServiceKey, Title) values ('fire-safety-equipment','Fire Safety Equipment')
insert into #R (ServiceKey, Title) values ('flooring','Flooring')
insert into #R (ServiceKey, Title) values ('fountains','Fountains')
insert into #R (ServiceKey, Title) values ('general-contractor','General Contractor')
insert into #R (ServiceKey, Title) values ('grout-and-tile-cleaningstone-polishing','Grout and Tile Cleaning/Stone Polishing')
insert into #R (ServiceKey, Title) values ('gutters','Gutters')
insert into #R (ServiceKey, Title) values ('heating-ventilating-air-conditioning','Heating, Ventilating, Air Conditioning')
insert into #R (ServiceKey, Title) values ('insulation','Insulation')
insert into #R (ServiceKey, Title) values ('insurance','Insurance')
insert into #R (ServiceKey, Title) values ('irrigation','Irrigation')
insert into #R (ServiceKey, Title) values ('lake-and-pond-management','Lake and Pond Management')
insert into #R (ServiceKey, Title) values ('landscapinglawn-care','Landscaping/Lawn Care')
insert into #R (ServiceKey, Title) values ('laundry-room-equipmentmaintenance','Laundry Room Equipment/Maintenance')
insert into #R (ServiceKey, Title) values ('lender','Lender')
insert into #R (ServiceKey, Title) values ('lighting','Lighting')
insert into #R (ServiceKey, Title) values ('locksmith','Locksmith')
insert into #R (ServiceKey, Title) values ('mailing-services','Mailing Services')
insert into #R (ServiceKey, Title) values ('maintenance','Maintenance')
insert into #R (ServiceKey, Title) values ('marketing','Marketing')
insert into #R (ServiceKey, Title) values ('masonry','Masonry')
insert into #R (ServiceKey, Title) values ('newsletterspublicationsprinting','Newsletters/Publications/Printing')
insert into #R (ServiceKey, Title) values ('painting-services-and-retailers','Painting Services and Retailers')
insert into #R (ServiceKey, Title) values ('panel-brick-repair','Panel Brick Repair')
insert into #R (ServiceKey, Title) values ('parkingtowing','Parking/Towing')
insert into #R (ServiceKey, Title) values ('pest-control','Pest Control')
insert into #R (ServiceKey, Title) values ('pet-waste-removal','Pet Waste Removal')
insert into #R (ServiceKey, Title) values ('plumbing','Plumbing')
insert into #R (ServiceKey, Title) values ('pool-services','Pool Services')
insert into #R (ServiceKey, Title) values ('recreationalplayground-equipment','Recreational/Playground Equipment')
insert into #R (ServiceKey, Title) values ('reserve-studies','Reserve Studies')
insert into #R (ServiceKey, Title) values ('restoration-services','Restoration Services')
insert into #R (ServiceKey, Title) values ('roofing','Roofing')
insert into #R (ServiceKey, Title) values ('roofing-manufacturer','Roofing Manufacturer')
insert into #R (ServiceKey, Title) values ('sealcoating','Sealcoating')
insert into #R (ServiceKey, Title) values ('security-products-and-services','Security Products and Services')
insert into #R (ServiceKey, Title) values ('siding','Siding')
insert into #R (ServiceKey, Title) values ('snow-removal','Snow Removal')
insert into #R (ServiceKey, Title) values ('tree-care-services','Tree Care Services')
insert into #R (ServiceKey, Title) values ('utilitysolarenergy-services','Utility/Solar/Energy Services')
insert into #R (ServiceKey, Title) values ('ventilating','Ventilating')
insert into #R (ServiceKey, Title) values ('waste-management-services','Waste Management Services')
insert into #R (ServiceKey, Title) values ('waterproofing','Waterproofing')
insert into #R (ServiceKey, Title) values ('websites-internet-service','Websites / Internet Service')
insert into #R (ServiceKey, Title) values ('windows-and-doors','Windows and Doors')

insert into [Service] (Title)
select s.Title
from #R s
left join [Service] s2 on s.Title = s2.Title
where s2.ServiceKey is null

drop table #R


--------------------------------------------------------------------
----- AGREEMENT
--------------------------------------------------------------------

if not exists (select 1 from [Agreement])
begin

	declare @agreement varchar(max) = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?'

	insert into [Agreement] (PortalKey, Title, AgreementDate, [Description], LastModificationTime, [Status])
	values (@portalKey, 'User Agreement', '1/1/2019', @agreement, GETDATE(), @approvedStatus)
end



SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[gensp_Agreement_DeleteOneByAgreementKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Agreement_DeleteOneByAgreementKey]
	@agreementKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Agreement]
WHERE [Agreement].[AgreementKey] = @agreementKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Agreement_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Agreement_InsertOne]
	@portalKey INT,
	@title VARCHAR(150),
	@agreementDate DATETIME,
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@status INT,
	@agreementKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Agreement]
(
	[PortalKey],
	[Title],
	[AgreementDate],
	[Description],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@portalKey,
	@title,
	@agreementDate,
	@description,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @agreementKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Agreement_SelectOneByAgreementKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Agreement_SelectOneByAgreementKey]
	@agreementKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Agreement].[AgreementKey], 
	[Agreement].[PortalKey], 
	[Agreement].[Title], 
	[Agreement].[AgreementDate], 
	[Agreement].[Description], 
	[Agreement].[LastModificationTime], 
	[Agreement].[Status] 
FROM
	[Agreement] 
WHERE [Agreement].[AgreementKey] = @agreementKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Agreement_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Agreement_SelectSomeBySearch]
	@portalKey INT = 0,
	@propertyKeyList VARCHAR(2000) = NULL,
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

-- Select PortalKey & UnitKey
SELECT PortalKey, UnitKey
INTO #T
FROM [dbo].[Split_PropertyKeyList](@propertyKeyList, ',')

SELECT
	[Agreement].[AgreementKey], 
	[Agreement].[PortalKey], 
	[Agreement].[Title], 
	[Agreement].[AgreementDate], 
	[Agreement].[Description], 
	[Agreement].[LastModificationTime], 
	[Agreement].[Status] 
FROM
	[Agreement] 
	LEFT JOIN #T T ON [Agreement].PortalKey = T.PortalKey 
WHERE ([Agreement].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0)
AND ([Agreement].[Status] & ISNULL(@status, 7) = [Agreement].[Status])
AND (T.PortalKey IS NOT NULL OR ISNULL(@propertyKeyList, '') = '') 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Agreement_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Agreement_SelectSomeBySearchAndPaging]
	@portalKey INT = 0,
	@propertyKeyList VARCHAR(2000) = NULL,
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Agreement].[AgreementKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Agreement].[AgreementKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @portalKey INT, @status INT'

-- Select PortalKey & UnitKey
SELECT PortalKey, UnitKey
INTO #T
FROM [dbo].[Split_PropertyKeyList](@propertyKeyList, ',')

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Agreement] 
	LEFT JOIN #T T ON [Agreement].PortalKey = T.PortalKey 
WHERE ([Agreement].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0)
AND ([Agreement].[Status] & ISNULL(@status, 7) = [Agreement].[Status])
AND (T.PortalKey IS NOT NULL OR ISNULL(@propertyKeyList, '') = '') 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Agreement].[AgreementKey], ' +
		'		[Agreement].[PortalKey], ' +
		'		[Agreement].[Title], ' +
		'		[Agreement].[AgreementDate], ' +
		'		[Agreement].[Description], ' +
		'		[Agreement].[LastModificationTime], ' +
		'		[Agreement].[Status] ' +
		'	FROM [Agreement]  ' + 
		'	LEFT JOIN #T T ON [Agreement].PortalKey = T.PortalKey ' + 
		'	WHERE ([Agreement].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0) ' +
		'	AND ([Agreement].[Status] & ISNULL(@status, 7) = [Agreement].[Status]) ' +
		'' 

	IF (ISNULL(@propertyKeyList, '') <> '')
		SET @sqlString = @sqlString + 'AND (T.PortalKey IS NOT NULL) ' 

	SET @sqlString = @sqlString + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @portalKey, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Agreement_UpdateOneByAgreementKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Agreement_UpdateOneByAgreementKey]
	@agreementKey INT,
	@portalKey INT,
	@title VARCHAR(150),
	@agreementDate DATETIME,
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Agreement]
SET
	[PortalKey] = @portalKey,
	[Title] = @title,
	[AgreementDate] = @agreementDate,
	[Description] = @description,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Agreement].[AgreementKey] = @agreementKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Bid_DeleteOneByBidKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Bid_DeleteOneByBidKey]
	@bidKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Bid]
WHERE [Bid].[BidKey] = @bidKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Bid_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Bid_InsertOne]
	@bidVendorKey INT,
	@resourceKey INT,
	@title VARCHAR(150),
	@total MONEY,
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@bidStatus INT,
	@bidKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Bid]
(
	[BidVendorKey],
	[ResourceKey],
	[Title],
	[Total],
	[Description],
	[LastModificationTime],
	[BidStatus]
)
VALUES
(
	@bidVendorKey,
	@resourceKey,
	@title,
	@total,
	@description,
	@lastModificationTime,
	@bidStatus
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @bidKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Bid_SelectOneByBidKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Bid_SelectOneByBidKey]
	@bidKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Bid].[BidKey], 
	[Bid].[BidVendorKey], 
	[Bid].[ResourceKey], 
	[Bid].[Title], 
	[Bid].[Total], 
	[Bid].[Description], 
	[Bid].[LastModificationTime], 
	[Bid].[BidStatus] 
FROM
	[Bid] 
WHERE [Bid].[BidKey] = @bidKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Bid_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Bid_SelectSomeBySearch]
	@bidVendorKey INT = 0,
	@resourceKey INT = 0,
	@bidStatus INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Bid].[BidKey], 
	[Bid].[BidVendorKey], 
	[Bid].[ResourceKey], 
	[Bid].[Title], 
	[Bid].[Total], 
	[Bid].[Description], 
	[Bid].[LastModificationTime], 
	[Bid].[BidStatus] 
FROM
	[Bid] 
WHERE ([Bid].[BidVendorKey] = @bidVendorKey OR @bidVendorKey IS NULL OR @bidVendorKey = 0)
AND ([Bid].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Bid].[BidStatus] & @bidStatus = [Bid].[BidStatus] OR @bidStatus IS NULL OR @bidStatus = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Bid_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Bid_SelectSomeBySearchAndPaging]
	@bidVendorKey INT = 0,
	@resourceKey INT = 0,
	@bidStatus INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Bid].[BidKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Bid].[BidKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @bidVendorKey INT, @resourceKey INT, @bidStatus INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Bid] 
WHERE ([Bid].[BidVendorKey] = @bidVendorKey OR @bidVendorKey IS NULL OR @bidVendorKey = 0)
AND ([Bid].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Bid].[BidStatus] & @bidStatus = [Bid].[BidStatus] OR @bidStatus IS NULL OR @bidStatus = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Bid].[BidKey], ' +
		'		[Bid].[BidVendorKey], ' +
		'		[Bid].[ResourceKey], ' +
		'		[Bid].[Title], ' +
		'		[Bid].[Total], ' +
		'		[Bid].[Description], ' +
		'		[Bid].[LastModificationTime], ' +
		'		[Bid].[BidStatus] ' +
		'	FROM [Bid]  ' + 
		'	WHERE ([Bid].[BidVendorKey] = @bidVendorKey OR @bidVendorKey IS NULL OR @bidVendorKey = 0) ' +
		'	AND ([Bid].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([Bid].[BidStatus] & @bidStatus = [Bid].[BidStatus] OR @bidStatus IS NULL OR @bidStatus = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @bidVendorKey, @resourceKey, @bidStatus

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Bid_UpdateOneByBidKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Bid_UpdateOneByBidKey]
	@bidKey INT,
	@bidVendorKey INT,
	@resourceKey INT,
	@title VARCHAR(150),
	@total MONEY,
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@bidStatus INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Bid]
SET
	[BidVendorKey] = @bidVendorKey,
	[ResourceKey] = @resourceKey,
	[Title] = @title,
	[Total] = @total,
	[Description] = @description,
	[LastModificationTime] = @lastModificationTime,
	[BidStatus] = @bidStatus
WHERE [Bid].[BidKey] = @bidKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidRequest_DeleteOneByBidRequestKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- ********************************  
-- * Stored Procedure Code  
-- ********************************  
CREATE PROCEDURE [dbo].[gensp_BidRequest_DeleteOneByBidRequestKey]  
 @bidRequestKey INT,  
 @errorCode INT OUTPUT  
AS  
SET NOCOUNT ON  
  

delete from Document where ObjectKey =  @bidRequestKey and ModuleKey = (select ModuleKey from module where Controller  = 'PMBidRequests')
delete from bidvendor where BidRequestKey = @bidRequestKey
DELETE FROM [BidRequest]  
WHERE [BidRequest].[BidRequestKey] = @bidRequestKey  
-- Get the Error Code for the statement just executed.  
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[gensp_BidRequest_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidRequest_InsertOne]
	@propertyKey INT,
	@resourceKey INT,
	@serviceKey INT,
	@title VARCHAR(150),
	@bidDueDate SMALLDATETIME,
	@startDate SMALLDATETIME,
	@endDate SMALLDATETIME,
	@description VARCHAR(MAX),
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@bidRequestStatus INT,
	@bidRequestKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [BidRequest]
(
	[PropertyKey],
	[ResourceKey],
	[ServiceKey],
	[Title],
	[BidDueDate],
	[StartDate],
	[EndDate],
	[Description],
	[DateAdded],
	[LastModificationTime],
	[BidRequestStatus]
)
VALUES
(
	@propertyKey,
	@resourceKey,
	@serviceKey,
	@title,
	@bidDueDate,
	@startDate,
	@endDate,
	@description,
	@dateAdded,
	@lastModificationTime,
	@bidRequestStatus
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @bidRequestKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidRequest_SelectOneByBidRequestKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidRequest_SelectOneByBidRequestKey]
	@bidRequestKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[BidRequest].[BidRequestKey], 
	[BidRequest].[PropertyKey], 
	[BidRequest].[ResourceKey], 
	[BidRequest].[ServiceKey], 
	[BidRequest].[Title], 
	[BidRequest].[BidDueDate], 
	[BidRequest].[StartDate], 
	[BidRequest].[EndDate], 
	[BidRequest].[Description], 
	[BidRequest].[DateAdded], 
	[BidRequest].[LastModificationTime], 
	[BidRequest].[BidRequestStatus] 
FROM
	[BidRequest] 
WHERE [BidRequest].[BidRequestKey] = @bidRequestKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidRequest_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidRequest_SelectSomeBySearch]
	@propertyKey INT = 0,
	@resourceKey INT = 0,
	@serviceKey INT = 0,
	@bidRequestStatus INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[BidRequest].[BidRequestKey], 
	[BidRequest].[PropertyKey], 
	[BidRequest].[ResourceKey], 
	[BidRequest].[ServiceKey], 
	[BidRequest].[Title], 
	[BidRequest].[BidDueDate], 
	[BidRequest].[StartDate], 
	[BidRequest].[EndDate], 
	[BidRequest].[Description], 
	[BidRequest].[DateAdded], 
	[BidRequest].[LastModificationTime], 
	[BidRequest].[BidRequestStatus] 
FROM
	[BidRequest] 
WHERE ([BidRequest].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0)
AND ([BidRequest].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([BidRequest].[ServiceKey] = @serviceKey OR @serviceKey IS NULL OR @serviceKey = 0)
AND ([BidRequest].[BidRequestStatus] & @bidRequestStatus = [BidRequest].[BidRequestStatus] OR @bidRequestStatus IS NULL OR @bidRequestStatus = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidRequest_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidRequest_SelectSomeBySearchAndPaging]
	@propertyKey INT = 0,
	@resourceKey INT = 0,
	@serviceKey INT = 0,
	@bidRequestStatus INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[BidRequest].[BidRequestKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [BidRequest].[BidRequestKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @propertyKey INT, @resourceKey INT, @serviceKey INT, @bidRequestStatus INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[BidRequest] 
WHERE ([BidRequest].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0)
AND ([BidRequest].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([BidRequest].[ServiceKey] = @serviceKey OR @serviceKey IS NULL OR @serviceKey = 0)
AND ([BidRequest].[BidRequestStatus] & @bidRequestStatus = [BidRequest].[BidRequestStatus] OR @bidRequestStatus IS NULL OR @bidRequestStatus = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[BidRequest].[BidRequestKey], ' +
		'		[BidRequest].[PropertyKey], ' +
		'		[BidRequest].[ResourceKey], ' +
		'		[BidRequest].[ServiceKey], ' +
		'		[BidRequest].[Title], ' +
		'		[BidRequest].[BidDueDate], ' +
		'		[BidRequest].[StartDate], ' +
		'		[BidRequest].[EndDate], ' +
		'		[BidRequest].[Description], ' +
		'		[BidRequest].[DateAdded], ' +
		'		[BidRequest].[LastModificationTime], ' +
		'		[BidRequest].[BidRequestStatus] ' +
		'	FROM [BidRequest]  ' + 
		'	WHERE ([BidRequest].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0) ' +
		'	AND ([BidRequest].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([BidRequest].[ServiceKey] = @serviceKey OR @serviceKey IS NULL OR @serviceKey = 0) ' +
		'	AND ([BidRequest].[BidRequestStatus] & @bidRequestStatus = [BidRequest].[BidRequestStatus] OR @bidRequestStatus IS NULL OR @bidRequestStatus = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @propertyKey, @resourceKey, @serviceKey, @bidRequestStatus

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidRequest_UpdateOneByBidRequestKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--gensp_BidRequest_UpdateOneByBidRequestKey 71,7,14,'gjgjghjghjghjghj','06/27/2020','23/06/2020','dsdsdsd',0,0
CREATE PROCEDURE [dbo].[gensp_BidRequest_UpdateOneByBidRequestKey]
	@bidRequestKey INT,
	@propertyKey INT,
	@serviceKey INT,
	@title VARCHAR(150),
	@bidDueDate datetime,	
	@ResponseDueDates datetime,	
	@description VARCHAR(MAX),
	
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [BidRequest]
SET
	--[PropertyKey] = @propertyKey,

	--[ServiceKey] = @serviceKey,
	[Title] = @title,
	[BidDueDate] = @bidDueDate,
	DefaultRespondByDate =@ResponseDueDates, 
	[Description] = @description,
	[DateAdded] = GETDATE(),
	[LastModificationTime] = GETDATE()

WHERE [BidRequest].[BidRequestKey] = @bidRequestKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
---- Added by Roshan ----
	if(@errorCode = 0)
	Begin
		Update BidVendor Set RespondByDate = @ResponseDueDates,
		LastModificationTime = GETDATE() 
		where BidRequestKey = @bidRequestKey
	End
GO
/****** Object:  StoredProcedure [dbo].[gensp_BidVendor_DeleteOneByBidVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidVendor_DeleteOneByBidVendorKey]
	@bidVendorKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [BidVendor]
WHERE [BidVendor].[BidVendorKey] = @bidVendorKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidVendor_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidVendor_InsertOne]
	@bidRequestKey INT,
	@vendorKey INT,
	@resourceKey INT,
	@bidVendorID VARCHAR(255),
	@isAssigned BIT,
	@respondByDate DATETIME,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@bidVendorStatus INT,
	@bidVendorKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [BidVendor]
(
	[BidRequestKey],
	[VendorKey],
	[ResourceKey],
	[BidVendorID],
	[IsAssigned],
	[RespondByDate],
	[DateAdded],
	[LastModificationTime],
	[BidVendorStatus]
)
VALUES
(
	@bidRequestKey,
	@vendorKey,
	@resourceKey,
	@bidVendorID,
	@isAssigned,
	@respondByDate,
	@dateAdded,
	@lastModificationTime,
	@bidVendorStatus
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @bidVendorKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidVendor_SelectOneByBidVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidVendor_SelectOneByBidVendorKey]
	@bidVendorKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[BidVendor].[BidVendorKey], 
	[BidVendor].[BidRequestKey], 
	[BidVendor].[VendorKey], 
	[BidVendor].[ResourceKey], 
	[BidVendor].[BidVendorID], 
	[BidVendor].[IsAssigned], 
	[BidVendor].[RespondByDate], 
	[BidVendor].[DateAdded], 
	[BidVendor].[LastModificationTime], 
	[BidVendor].[BidVendorStatus] 
FROM
	[BidVendor] 
WHERE [BidVendor].[BidVendorKey] = @bidVendorKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidVendor_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidVendor_SelectSomeBySearch]
	@bidRequestKey INT = 0,
	@vendorKey INT = 0,
	@resourceKey INT = 0,
	@bidVendorStatus INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[BidVendor].[BidVendorKey], 
	[BidVendor].[BidRequestKey], 
	[BidVendor].[VendorKey], 
	[BidVendor].[ResourceKey], 
	[BidVendor].[BidVendorID], 
	[BidVendor].[IsAssigned], 
	[BidVendor].[RespondByDate], 
	[BidVendor].[DateAdded], 
	[BidVendor].[LastModificationTime], 
	[BidVendor].[BidVendorStatus] 
FROM
	[BidVendor] 
WHERE ([BidVendor].[BidRequestKey] = @bidRequestKey OR @bidRequestKey IS NULL OR @bidRequestKey = 0)
AND ([BidVendor].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([BidVendor].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([BidVendor].[BidVendorStatus] & @bidVendorStatus = [BidVendor].[BidVendorStatus] OR @bidVendorStatus IS NULL OR @bidVendorStatus = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidVendor_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidVendor_SelectSomeBySearchAndPaging]
	@bidRequestKey INT = 0,
	@vendorKey INT = 0,
	@resourceKey INT = 0,
	@bidVendorStatus INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[BidVendor].[BidVendorKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [BidVendor].[BidVendorKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @bidRequestKey INT, @vendorKey INT, @resourceKey INT, @bidVendorStatus INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[BidVendor] 
WHERE ([BidVendor].[BidRequestKey] = @bidRequestKey OR @bidRequestKey IS NULL OR @bidRequestKey = 0)
AND ([BidVendor].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([BidVendor].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([BidVendor].[BidVendorStatus] & @bidVendorStatus = [BidVendor].[BidVendorStatus] OR @bidVendorStatus IS NULL OR @bidVendorStatus = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[BidVendor].[BidVendorKey], ' +
		'		[BidVendor].[BidRequestKey], ' +
		'		[BidVendor].[VendorKey], ' +
		'		[BidVendor].[ResourceKey], ' +
		'		[BidVendor].[BidVendorID], ' +
		'		[BidVendor].[IsAssigned], ' +
		'		[BidVendor].[RespondByDate], ' +
		'		[BidVendor].[DateAdded], ' +
		'		[BidVendor].[LastModificationTime], ' +
		'		[BidVendor].[BidVendorStatus] ' +
		'	FROM [BidVendor]  ' + 
		'	WHERE ([BidVendor].[BidRequestKey] = @bidRequestKey OR @bidRequestKey IS NULL OR @bidRequestKey = 0) ' +
		'	AND ([BidVendor].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([BidVendor].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([BidVendor].[BidVendorStatus] & @bidVendorStatus = [BidVendor].[BidVendorStatus] OR @bidVendorStatus IS NULL OR @bidVendorStatus = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @bidRequestKey, @vendorKey, @resourceKey, @bidVendorStatus

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_BidVendor_UpdateOneByBidVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_BidVendor_UpdateOneByBidVendorKey]
	@bidVendorKey INT,
	@bidRequestKey INT,
	@vendorKey INT,
	@resourceKey INT,
	@bidVendorID VARCHAR(255),
	@isAssigned BIT,
	@respondByDate DATETIME,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@bidVendorStatus INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [BidVendor]
SET
	[BidRequestKey] = @bidRequestKey,
	[VendorKey] = @vendorKey,
	[ResourceKey] = @resourceKey,
	[BidVendorID] = @bidVendorID,
	[IsAssigned] = @isAssigned,
	[RespondByDate] = @respondByDate,
	[DateAdded] = @dateAdded,
	[LastModificationTime] = @lastModificationTime,
	[BidVendorStatus] = @bidVendorStatus
WHERE [BidVendor].[BidVendorKey] = @bidVendorKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Calendar_DeleteOneByCalendarKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Calendar_DeleteOneByCalendarKey]
	@calendarKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Calendar]
WHERE [Calendar].[CalendarKey] = @calendarKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Calendar_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Calendar_InsertOne]
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@subject VARCHAR(150),
	@startDate SMALLDATETIME,
	@endDate SMALLDATETIME,
	@allDayEvent BIT,
	@location VARCHAR(150),
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@status INT,
	@calendarKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Calendar]
(
	[ModuleKey],
	[ResourceKey],
	[ObjectKey],
	[Subject],
	[StartDate],
	[EndDate],
	[AllDayEvent],
	[Location],
	[Description],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@moduleKey,
	@resourceKey,
	@objectKey,
	@subject,
	@startDate,
	@endDate,
	@allDayEvent,
	@location,
	@description,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @calendarKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Calendar_SelectOneByCalendarKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Calendar_SelectOneByCalendarKey]
	@calendarKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Calendar].[CalendarKey], 
	[Calendar].[ModuleKey], 
	[Calendar].[ResourceKey], 
	[Calendar].[ObjectKey], 
	[Calendar].[Subject], 
	[Calendar].[StartDate], 
	[Calendar].[EndDate], 
	[Calendar].[AllDayEvent], 
	[Calendar].[Location], 
	[Calendar].[Description], 
	[Calendar].[LastModificationTime], 
	[Calendar].[Status] 
FROM
	[Calendar] 
WHERE [Calendar].[CalendarKey] = @calendarKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Calendar_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Calendar_SelectSomeBySearch]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Calendar].[CalendarKey], 
	[Calendar].[ModuleKey], 
	[Calendar].[ResourceKey], 
	[Calendar].[ObjectKey], 
	[Calendar].[Subject], 
	[Calendar].[StartDate], 
	[Calendar].[EndDate], 
	[Calendar].[AllDayEvent], 
	[Calendar].[Location], 
	[Calendar].[Description], 
	[Calendar].[LastModificationTime], 
	[Calendar].[Status] 
FROM
	[Calendar] 
WHERE ([Calendar].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Calendar].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Calendar].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Calendar].[Status] & ISNULL(@status, 7) = [Calendar].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Calendar_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Calendar_SelectSomeBySearchAndPaging]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Calendar].[CalendarKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Calendar].[CalendarKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @moduleKey INT, @resourceKey INT, @objectKey INT, @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Calendar] 
WHERE ([Calendar].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Calendar].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Calendar].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Calendar].[Status] & ISNULL(@status, 7) = [Calendar].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Calendar].[CalendarKey], ' +
		'		[Calendar].[ModuleKey], ' +
		'		[Calendar].[ResourceKey], ' +
		'		[Calendar].[ObjectKey], ' +
		'		[Calendar].[Subject], ' +
		'		[Calendar].[StartDate], ' +
		'		[Calendar].[EndDate], ' +
		'		[Calendar].[AllDayEvent], ' +
		'		[Calendar].[Location], ' +
		'		[Calendar].[Description], ' +
		'		[Calendar].[LastModificationTime], ' +
		'		[Calendar].[Status] ' +
		'	FROM [Calendar]  ' + 
		'	WHERE ([Calendar].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'	AND ([Calendar].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([Calendar].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0) ' +
		'	AND ([Calendar].[Status] & ISNULL(@status, 7) = [Calendar].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @moduleKey, @resourceKey, @objectKey, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Calendar_UpdateOneByCalendarKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Calendar_UpdateOneByCalendarKey]
	@calendarKey INT,
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@subject VARCHAR(150),
	@startDate SMALLDATETIME,
	@endDate SMALLDATETIME,
	@allDayEvent BIT,
	@location VARCHAR(150),
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Calendar]
SET
	[ModuleKey] = @moduleKey,
	[ResourceKey] = @resourceKey,
	[ObjectKey] = @objectKey,
	[Subject] = @subject,
	[StartDate] = @startDate,
	[EndDate] = @endDate,
	[AllDayEvent] = @allDayEvent,
	[Location] = @location,
	[Description] = @description,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Calendar].[CalendarKey] = @calendarKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Company_DeleteOneByCompanyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Company_DeleteOneByCompanyKey]
	@companyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Company]
WHERE [Company].[CompanyKey] = @companyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Company_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Company_InsertOne]
	@parentCompanyKey INT,
	@relatedCompanyKey INT,
	@companyTypeKey INT,
	@portalKey INT,
	@companyID VARCHAR(255),
	@name VARCHAR(150),
	@legalName VARCHAR(150),
	@taxID VARCHAR(50),
	@work VARCHAR(50),
	@work2 VARCHAR(50),
	@fax VARCHAR(50),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@website VARCHAR(255),
	@description VARCHAR(MAX),
	@bidRequestResponseDays INT,
	@bidSubmitDays INT,
	@bidRequestAmount MONEY,
	@notificationPreference INT,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@companyKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Company]
(
	[ParentCompanyKey],
	[RelatedCompanyKey],
	[CompanyTypeKey],
	[PortalKey],
	[CompanyID],
	[Name],
	[LegalName],
	[TaxID],
	[Work],
	[Work2],
	[Fax],
	[Address],
	[Address2],
	[City],
	[State],
	[Zip],
	[Website],
	[Description],
	[BidRequestResponseDays],
	[BidSubmitDays],
	[BidRequestAmount],
	[NotificationPreference],
	[DateAdded],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@parentCompanyKey,
	@relatedCompanyKey,
	@companyTypeKey,
	@portalKey,
	@companyID,
	@name,
	@legalName,
	@taxID,
	@work,
	@work2,
	@fax,
	@address,
	@address2,
	@city,
	@state,
	@zip,
	@website,
	@description,
	@bidRequestResponseDays,
	@bidSubmitDays,
	@bidRequestAmount,
	@notificationPreference,
	@dateAdded,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @companyKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Company_SelectOneByCompanyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Company_SelectOneByCompanyKey]
	@companyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Company].[CompanyKey], 
	[Company].[ParentCompanyKey], 
	[Company].[RelatedCompanyKey], 
	[Company].[CompanyTypeKey], 
	[Company].[PortalKey], 
	[Company].[CompanyID], 
	[Company].[Name], 
	[Company].[LegalName], 
	[Company].[TaxID], 
	[Company].[Work], 
	[Company].[Work2], 
	[Company].[Fax], 
	[Company].[Address], 
	[Company].[Address2], 
	[Company].[City], 
	[Company].[State], 
	[Company].[Zip], 
	[Company].[Website], 
	[Company].[Description], 
	[Company].[BidRequestResponseDays], 
	[Company].[BidSubmitDays], 
	[Company].[BidRequestAmount], 
	[Company].[NotificationPreference], 
	[Company].[DateAdded], 
	[Company].[LastModificationTime], 
	[Company].[Status] 
FROM
	[Company] 
WHERE [Company].[CompanyKey] = @companyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Company_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Company_SelectSomeBySearch]
	@parentCompanyKey INT = 0,
	@relatedCompanyKey INT = 0,
	@companyTypeKey INT = 0,
	@portalKey INT = 0,
	@propertyKeyList VARCHAR(2000) = NULL,
	@state VARCHAR(2) = '',
	@name VARCHAR(150) = '',
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

-- Select PortalKey & UnitKey
SELECT PortalKey, UnitKey
INTO #T
FROM [dbo].[Split_PropertyKeyList](@propertyKeyList, ',')

SELECT
	[Company].[CompanyKey], 
	[Company].[ParentCompanyKey], 
	[Company].[RelatedCompanyKey], 
	[Company].[CompanyTypeKey], 
	[Company].[PortalKey], 
	[Company].[CompanyID], 
	[Company].[Name], 
	[Company].[LegalName], 
	[Company].[TaxID], 
	[Company].[Work], 
	[Company].[Work2], 
	[Company].[Fax], 
	[Company].[Address], 
	[Company].[Address2], 
	[Company].[City], 
	[Company].[State], 
	[Company].[Zip], 
	[Company].[Website], 
	[Company].[Description], 
	[Company].[BidRequestResponseDays], 
	[Company].[BidSubmitDays], 
	[Company].[BidRequestAmount], 
	[Company].[NotificationPreference], 
	[Company].[DateAdded], 
	[Company].[LastModificationTime], 
	[Company].[Status] 
FROM
	[Company] 
	LEFT JOIN #T T ON [Company].PortalKey = T.PortalKey 
WHERE ([Company].[ParentCompanyKey] = @parentCompanyKey OR @parentCompanyKey IS NULL OR @parentCompanyKey = 0)
AND ([Company].[RelatedCompanyKey] = @relatedCompanyKey OR @relatedCompanyKey IS NULL OR @relatedCompanyKey = 0)
AND ([Company].[CompanyTypeKey] = @companyTypeKey OR @companyTypeKey IS NULL OR @companyTypeKey = 0)
AND ([Company].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0)
AND ([Company].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Company].[Name] LIKE @name OR @name IS NULL OR @name = '')
AND ([Company].[Status] & ISNULL(@status, 7) = [Company].[Status])
AND (T.PortalKey IS NOT NULL OR ISNULL(@propertyKeyList, '') = '') 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Company_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Company_SelectSomeBySearchAndPaging]
	@parentCompanyKey INT = 0,
	@relatedCompanyKey INT = 0,
	@companyTypeKey INT = 0,
	@portalKey INT = 0,
	@propertyKeyList VARCHAR(2000) = NULL,
	@state VARCHAR(2) = '',
	@name VARCHAR(150) = '',
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Company].[CompanyKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Company].[CompanyKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @parentCompanyKey INT, @relatedCompanyKey INT, @companyTypeKey INT, @portalKey INT, @state VARCHAR(2), @name VARCHAR(150), @status INT'

-- Select PortalKey & UnitKey
SELECT PortalKey, UnitKey
INTO #T
FROM [dbo].[Split_PropertyKeyList](@propertyKeyList, ',')

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Company] 
	LEFT JOIN #T T ON [Company].PortalKey = T.PortalKey 
WHERE ([Company].[ParentCompanyKey] = @parentCompanyKey OR @parentCompanyKey IS NULL OR @parentCompanyKey = 0)
AND ([Company].[RelatedCompanyKey] = @relatedCompanyKey OR @relatedCompanyKey IS NULL OR @relatedCompanyKey = 0)
AND ([Company].[CompanyTypeKey] = @companyTypeKey OR @companyTypeKey IS NULL OR @companyTypeKey = 0)
AND ([Company].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0)
AND ([Company].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Company].[Name] LIKE @name OR @name IS NULL OR @name = '')
AND ([Company].[Status] & ISNULL(@status, 7) = [Company].[Status])
AND (T.PortalKey IS NOT NULL OR ISNULL(@propertyKeyList, '') = '') 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Company].[CompanyKey], ' +
		'		[Company].[ParentCompanyKey], ' +
		'		[Company].[RelatedCompanyKey], ' +
		'		[Company].[CompanyTypeKey], ' +
		'		[Company].[PortalKey], ' +
		'		[Company].[CompanyID], ' +
		'		[Company].[Name], ' +
		'		[Company].[LegalName], ' +
		'		[Company].[TaxID], ' +
		'		[Company].[Work], ' +
		'		[Company].[Work2], ' +
		'		[Company].[Fax], ' +
		'		[Company].[Address], ' +
		'		[Company].[Address2], ' +
		'		[Company].[City], ' +
		'		[Company].[State], ' +
		'		[Company].[Zip], ' +
		'		[Company].[Website], ' +
		'		[Company].[Description], ' +
		'		[Company].[BidRequestResponseDays], ' +
		'		[Company].[BidSubmitDays], ' +
		'		[Company].[BidRequestAmount], ' +
		'		[Company].[NotificationPreference], ' +
		'		[Company].[DateAdded], ' +
		'		[Company].[LastModificationTime], ' +
		'		[Company].[Status] ' +
		'	FROM [Company]  ' + 
		'	LEFT JOIN #T T ON [Company].PortalKey = T.PortalKey ' + 
		'	WHERE ([Company].[ParentCompanyKey] = @parentCompanyKey OR @parentCompanyKey IS NULL OR @parentCompanyKey = 0) ' +
		'	AND ([Company].[RelatedCompanyKey] = @relatedCompanyKey OR @relatedCompanyKey IS NULL OR @relatedCompanyKey = 0) ' +
		'	AND ([Company].[CompanyTypeKey] = @companyTypeKey OR @companyTypeKey IS NULL OR @companyTypeKey = 0) ' +
		'	AND ([Company].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0) ' +
		'	AND ([Company].[State] LIKE @state OR @state IS NULL OR @state = '''') ' +
		'	AND ([Company].[Name] LIKE @name OR @name IS NULL OR @name = '''') ' +
		'	AND ([Company].[Status] & ISNULL(@status, 7) = [Company].[Status]) ' +
		'' 

	IF (ISNULL(@propertyKeyList, '') <> '')
		SET @sqlString = @sqlString + 'AND (T.PortalKey IS NOT NULL) ' 

	SET @sqlString = @sqlString + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @parentCompanyKey, @relatedCompanyKey, @companyTypeKey, @portalKey, @state, @name, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Company_UpdateOneByCompanyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Company_UpdateOneByCompanyKey]
	@companyKey INT,
	@parentCompanyKey INT,
	@relatedCompanyKey INT,
	@companyTypeKey INT,
	@portalKey INT,
	@companyID VARCHAR(255),
	@name VARCHAR(150),
	@legalName VARCHAR(150),
	@taxID VARCHAR(50),
	@work VARCHAR(50),
	@work2 VARCHAR(50),
	@fax VARCHAR(50),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@website VARCHAR(255),
	@description VARCHAR(MAX),
	@bidRequestResponseDays INT,
	@bidSubmitDays INT,
	@bidRequestAmount MONEY,
	@notificationPreference INT,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Company]
SET
	[ParentCompanyKey] = @parentCompanyKey,
	[RelatedCompanyKey] = @relatedCompanyKey,
	[CompanyTypeKey] = @companyTypeKey,
	[PortalKey] = @portalKey,
	[CompanyID] = @companyID,
	[Name] = @name,
	[LegalName] = @legalName,
	[TaxID] = @taxID,
	[Work] = @work,
	[Work2] = @work2,
	[Fax] = @fax,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[Website] = @website,
	[Description] = @description,
	[BidRequestResponseDays] = @bidRequestResponseDays,
	[BidSubmitDays] = @bidSubmitDays,
	[BidRequestAmount] = @bidRequestAmount,
	[NotificationPreference] = @notificationPreference,
	[DateAdded] = @dateAdded,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Company].[CompanyKey] = @companyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_CompanyVendor_DeleteOneByCompanyVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_CompanyVendor_DeleteOneByCompanyVendorKey]
	@companyVendorKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [CompanyVendor]
WHERE [CompanyVendor].[CompanyVendorKey] = @companyVendorKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_CompanyVendor_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_CompanyVendor_InsertOne]
	@companyKey INT,
	@vendorKey INT,
	@lastModificationTime DATETIME,
	@status INT,
	@companyVendorKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [CompanyVendor]
(
	[CompanyKey],
	[VendorKey],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@companyKey,
	@vendorKey,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @companyVendorKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_CompanyVendor_SelectOneByCompanyVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_CompanyVendor_SelectOneByCompanyVendorKey]
	@companyVendorKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[CompanyVendor].[CompanyVendorKey], 
	[CompanyVendor].[CompanyKey], 
	[CompanyVendor].[VendorKey], 
	[CompanyVendor].[LastModificationTime], 
	[CompanyVendor].[Status] 
FROM
	[CompanyVendor] 
WHERE [CompanyVendor].[CompanyVendorKey] = @companyVendorKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_CompanyVendor_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_CompanyVendor_SelectSomeBySearch]
	@companyKey INT = 0,
	@vendorKey INT = 0,
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[CompanyVendor].[CompanyVendorKey], 
	[CompanyVendor].[CompanyKey], 
	[CompanyVendor].[VendorKey], 
	[CompanyVendor].[LastModificationTime], 
	[CompanyVendor].[Status] 
FROM
	[CompanyVendor] 
WHERE ([CompanyVendor].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([CompanyVendor].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([CompanyVendor].[Status] & ISNULL(@status, 7) = [CompanyVendor].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_CompanyVendor_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_CompanyVendor_SelectSomeBySearchAndPaging]
	@companyKey INT = 0,
	@vendorKey INT = 0,
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[CompanyVendor].[CompanyVendorKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [CompanyVendor].[CompanyVendorKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @companyKey INT, @vendorKey INT, @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[CompanyVendor] 
WHERE ([CompanyVendor].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([CompanyVendor].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([CompanyVendor].[Status] & ISNULL(@status, 7) = [CompanyVendor].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[CompanyVendor].[CompanyVendorKey], ' +
		'		[CompanyVendor].[CompanyKey], ' +
		'		[CompanyVendor].[VendorKey], ' +
		'		[CompanyVendor].[LastModificationTime], ' +
		'		[CompanyVendor].[Status] ' +
		'	FROM [CompanyVendor]  ' + 
		'	WHERE ([CompanyVendor].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0) ' +
		'	AND ([CompanyVendor].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([CompanyVendor].[Status] & ISNULL(@status, 7) = [CompanyVendor].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @companyKey, @vendorKey, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_CompanyVendor_UpdateOneByCompanyVendorKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_CompanyVendor_UpdateOneByCompanyVendorKey]
	@companyVendorKey INT,
	@companyKey INT,
	@vendorKey INT,
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [CompanyVendor]
SET
	[CompanyKey] = @companyKey,
	[VendorKey] = @vendorKey,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [CompanyVendor].[CompanyVendorKey] = @companyVendorKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Document_DeleteOneByDocumentKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Document_DeleteOneByDocumentKey]
	@documentKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Document]
WHERE [Document].[DocumentKey] = @documentKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Document_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Document_InsertOne]
	@moduleKey INT,
	@objectKey INT,
	@fileName VARCHAR(150),
	@fileSize FLOAT(53),
	@lastModificationTime DATETIME,
	@documentKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Document]
(
	[ModuleKey],
	[ObjectKey],
	[FileName],
	[FileSize],
	[LastModificationTime]
)
VALUES
(
	@moduleKey,
	@objectKey,
	@fileName,
	@fileSize,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @documentKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Document_SelectOneByDocumentKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Document_SelectOneByDocumentKey]
	@documentKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Document].[DocumentKey], 
	[Document].[ModuleKey], 
	[Document].[ObjectKey], 
	[Document].[FileName], 
	[Document].[FileSize], 
	[Document].[LastModificationTime] 
FROM
	[Document] 
WHERE [Document].[DocumentKey] = @documentKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Document_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Document_SelectSomeBySearch]
	@moduleKey INT = 0,
	@objectKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Document].[DocumentKey], 
	[Document].[ModuleKey], 
	[Document].[ObjectKey], 
	[Document].[FileName], 
	[Document].[FileSize], 
	[Document].[LastModificationTime] 
FROM
	[Document] 
WHERE ([Document].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Document].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Document_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Document_SelectSomeBySearchAndPaging]
	@moduleKey INT = 0,
	@objectKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Document].[DocumentKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Document].[DocumentKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @moduleKey INT, @objectKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Document] 
WHERE ([Document].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Document].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Document].[DocumentKey], ' +
		'		[Document].[ModuleKey], ' +
		'		[Document].[ObjectKey], ' +
		'		[Document].[FileName], ' +
		'		[Document].[FileSize], ' +
		'		[Document].[LastModificationTime] ' +
		'	FROM [Document]  ' + 
		'	WHERE ([Document].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'	AND ([Document].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @moduleKey, @objectKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Document_UpdateOneByDocumentKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Document_UpdateOneByDocumentKey]
	@documentKey INT,
	@moduleKey INT,
	@objectKey INT,
	@fileName VARCHAR(150),
	@fileSize FLOAT(53),
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Document]
SET
	[ModuleKey] = @moduleKey,
	[ObjectKey] = @objectKey,
	[FileName] = @fileName,
	[FileSize] = @fileSize,
	[LastModificationTime] = @lastModificationTime
WHERE [Document].[DocumentKey] = @documentKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Email_DeleteOneByEmailKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Email_DeleteOneByEmailKey]
	@emailKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Email]
WHERE [Email].[EmailKey] = @emailKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Email_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Email_InsertOne]
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@from VARCHAR(MAX),
	@to VARCHAR(MAX),
	@cc VARCHAR(MAX),
	@bcc VARCHAR(MAX),
	@subject VARCHAR(MAX),
	@body VARCHAR(MAX),
	@dateAdded DATETIME,
	@dateSent SMALLDATETIME,
	@emailStatus INT,
	@emailKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Email]
(
	[ModuleKey],
	[ResourceKey],
	[ObjectKey],
	[From],
	[To],
	[Cc],
	[Bcc],
	[Subject],
	[Body],
	[DateAdded],
	[DateSent],
	[EmailStatus]
)
VALUES
(
	@moduleKey,
	@resourceKey,
	@objectKey,
	@from,
	@to,
	@cc,
	@bcc,
	@subject,
	@body,
	@dateAdded,
	@dateSent,
	@emailStatus
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @emailKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Email_SelectOneByEmailKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Email_SelectOneByEmailKey]
	@emailKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Email].[EmailKey], 
	[Email].[ModuleKey], 
	[Email].[ResourceKey], 
	[Email].[ObjectKey], 
	[Email].[From], 
	[Email].[To], 
	[Email].[Cc], 
	[Email].[Bcc], 
	[Email].[Subject], 
	[Email].[Body], 
	[Email].[DateAdded], 
	[Email].[DateSent], 
	[Email].[EmailStatus] 
FROM
	[Email] 
WHERE [Email].[EmailKey] = @emailKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Email_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Email_SelectSomeBySearch]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@emailStatus INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Email].[EmailKey], 
	[Email].[ModuleKey], 
	[Email].[ResourceKey], 
	[Email].[ObjectKey], 
	[Email].[From], 
	[Email].[To], 
	[Email].[Cc], 
	[Email].[Bcc], 
	[Email].[Subject], 
	[Email].[Body], 
	[Email].[DateAdded], 
	[Email].[DateSent], 
	[Email].[EmailStatus] 
FROM
	[Email] 
WHERE ([Email].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Email].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Email].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Email].[EmailStatus] & @emailStatus = [Email].[EmailStatus] OR @emailStatus IS NULL OR @emailStatus = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Email_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Email_SelectSomeBySearchAndPaging]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@emailStatus INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Email].[EmailKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Email].[EmailKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @moduleKey INT, @resourceKey INT, @objectKey INT, @emailStatus INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Email] 
WHERE ([Email].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Email].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Email].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Email].[EmailStatus] & @emailStatus = [Email].[EmailStatus] OR @emailStatus IS NULL OR @emailStatus = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Email].[EmailKey], ' +
		'		[Email].[ModuleKey], ' +
		'		[Email].[ResourceKey], ' +
		'		[Email].[ObjectKey], ' +
		'		[Email].[From], ' +
		'		[Email].[To], ' +
		'		[Email].[Cc], ' +
		'		[Email].[Bcc], ' +
		'		[Email].[Subject], ' +
		'		[Email].[Body], ' +
		'		[Email].[DateAdded], ' +
		'		[Email].[DateSent], ' +
		'		[Email].[EmailStatus] ' +
		'	FROM [Email]  ' + 
		'	WHERE ([Email].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'	AND ([Email].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([Email].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0) ' +
		'	AND ([Email].[EmailStatus] & @emailStatus = [Email].[EmailStatus] OR @emailStatus IS NULL OR @emailStatus = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @moduleKey, @resourceKey, @objectKey, @emailStatus

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Email_UpdateOneByEmailKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Email_UpdateOneByEmailKey]
	@emailKey INT,
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@from VARCHAR(MAX),
	@to VARCHAR(MAX),
	@cc VARCHAR(MAX),
	@bcc VARCHAR(MAX),
	@subject VARCHAR(MAX),
	@body VARCHAR(MAX),
	@dateAdded DATETIME,
	@dateSent SMALLDATETIME,
	@emailStatus INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Email]
SET
	[ModuleKey] = @moduleKey,
	[ResourceKey] = @resourceKey,
	[ObjectKey] = @objectKey,
	[From] = @from,
	[To] = @to,
	[Cc] = @cc,
	[Bcc] = @bcc,
	[Subject] = @subject,
	[Body] = @body,
	[DateAdded] = @dateAdded,
	[DateSent] = @dateSent,
	[EmailStatus] = @emailStatus
WHERE [Email].[EmailKey] = @emailKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ErrorLog_DeleteOneByErrorLogKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ErrorLog_DeleteOneByErrorLogKey]
	@errorLogKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [ErrorLog]
WHERE [ErrorLog].[ErrorLogKey] = @errorLogKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ErrorLog_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ErrorLog_InsertOne]
	@details VARCHAR(MAX),
	@session VARCHAR(MAX),
	@dateAdded DATETIME,
	@errorLogKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [ErrorLog]
(
	[Details],
	[Session],
	[DateAdded]
)
VALUES
(
	@details,
	@session,
	@dateAdded
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @errorLogKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_ErrorLog_SelectOneByErrorLogKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ErrorLog_SelectOneByErrorLogKey]
	@errorLogKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[ErrorLog].[ErrorLogKey], 
	[ErrorLog].[Details], 
	[ErrorLog].[Session], 
	[ErrorLog].[DateAdded] 
FROM
	[ErrorLog] 
WHERE [ErrorLog].[ErrorLogKey] = @errorLogKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ErrorLog_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ErrorLog_SelectSomeBySearch]
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[ErrorLog].[ErrorLogKey], 
	[ErrorLog].[Details], 
	[ErrorLog].[Session], 
	[ErrorLog].[DateAdded] 
FROM
	[ErrorLog] 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ErrorLog_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ErrorLog_SelectSomeBySearchAndPaging]
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[ErrorLog].[ErrorLogKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [ErrorLog].[ErrorLogKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[ErrorLog] 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[ErrorLog].[ErrorLogKey], ' +
		'		[ErrorLog].[Details], ' +
		'		[ErrorLog].[Session], ' +
		'		[ErrorLog].[DateAdded] ' +
		'	FROM [ErrorLog]  ' + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_ErrorLog_UpdateOneByErrorLogKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ErrorLog_UpdateOneByErrorLogKey]
	@errorLogKey INT,
	@details VARCHAR(MAX),
	@session VARCHAR(MAX),
	@dateAdded DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [ErrorLog]
SET
	[Details] = @details,
	[Session] = @session,
	[DateAdded] = @dateAdded
WHERE [ErrorLog].[ErrorLogKey] = @errorLogKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Group_DeleteOneByGroupKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Group_DeleteOneByGroupKey]
	@groupKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Group]
WHERE [Group].[GroupKey] = @groupKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Group_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Group_InsertOne]
	@title VARCHAR(150),
	@description VARCHAR(MAX),
	@groupKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Group]
(
	[Title],
	[Description]
)
VALUES
(
	@title,
	@description
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @groupKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Group_SelectOneByGroupKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Group_SelectOneByGroupKey]
	@groupKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Group].[GroupKey], 
	[Group].[Title], 
	[Group].[Description] 
FROM
	[Group] 
WHERE [Group].[GroupKey] = @groupKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Group_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Group_SelectSomeBySearch]
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Group].[GroupKey], 
	[Group].[Title], 
	[Group].[Description] 
FROM
	[Group] 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Group_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Group_SelectSomeBySearchAndPaging]
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Group].[GroupKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Group].[GroupKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Group] 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Group].[GroupKey], ' +
		'		[Group].[Title], ' +
		'		[Group].[Description] ' +
		'	FROM [Group]  ' + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Group_UpdateOneByGroupKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Group_UpdateOneByGroupKey]
	@groupKey INT,
	@title VARCHAR(150),
	@description VARCHAR(MAX),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Group]
SET
	[Title] = @title,
	[Description] = @description
WHERE [Group].[GroupKey] = @groupKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupMember_DeleteOneByGroupMemberKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupMember_DeleteOneByGroupMemberKey]
	@groupMemberKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [GroupMember]
WHERE [GroupMember].[GroupMemberKey] = @groupMemberKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupMember_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupMember_InsertOne]
	@groupKey INT,
	@resourceKey INT,
	@groupMemberKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [GroupMember]
(
	[GroupKey],
	[ResourceKey]
)
VALUES
(
	@groupKey,
	@resourceKey
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @groupMemberKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupMember_SelectOneByGroupMemberKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupMember_SelectOneByGroupMemberKey]
	@groupMemberKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[GroupMember].[GroupMemberKey], 
	[GroupMember].[GroupKey], 
	[GroupMember].[ResourceKey] 
FROM
	[GroupMember] 
WHERE [GroupMember].[GroupMemberKey] = @groupMemberKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupMember_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupMember_SelectSomeBySearch]
	@groupKey INT = 0,
	@resourceKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[GroupMember].[GroupMemberKey], 
	[GroupMember].[GroupKey], 
	[GroupMember].[ResourceKey] 
FROM
	[GroupMember] 
WHERE ([GroupMember].[GroupKey] = @groupKey OR @groupKey IS NULL OR @groupKey = 0)
AND ([GroupMember].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupMember_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupMember_SelectSomeBySearchAndPaging]
	@groupKey INT = 0,
	@resourceKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[GroupMember].[GroupMemberKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [GroupMember].[GroupMemberKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @groupKey INT, @resourceKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[GroupMember] 
WHERE ([GroupMember].[GroupKey] = @groupKey OR @groupKey IS NULL OR @groupKey = 0)
AND ([GroupMember].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[GroupMember].[GroupMemberKey], ' +
		'		[GroupMember].[GroupKey], ' +
		'		[GroupMember].[ResourceKey] ' +
		'	FROM [GroupMember]  ' + 
		'	WHERE ([GroupMember].[GroupKey] = @groupKey OR @groupKey IS NULL OR @groupKey = 0) ' +
		'	AND ([GroupMember].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @groupKey, @resourceKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupMember_UpdateOneByGroupMemberKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupMember_UpdateOneByGroupMemberKey]
	@groupMemberKey INT,
	@groupKey INT,
	@resourceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [GroupMember]
SET
	[GroupKey] = @groupKey,
	[ResourceKey] = @resourceKey
WHERE [GroupMember].[GroupMemberKey] = @groupMemberKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupModuleAccess_DeleteOneByGroupModuleAccessKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupModuleAccess_DeleteOneByGroupModuleAccessKey]
	@groupModuleAccessKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [GroupModuleAccess]
WHERE [GroupModuleAccess].[GroupModuleAccessKey] = @groupModuleAccessKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupModuleAccess_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupModuleAccess_InsertOne]
	@portalKey INT,
	@groupKey INT,
	@moduleKey INT,
	@access INT,
	@groupModuleAccessKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [GroupModuleAccess]
(
	[PortalKey],
	[GroupKey],
	[ModuleKey],
	[Access]
)
VALUES
(
	@portalKey,
	@groupKey,
	@moduleKey,
	@access
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @groupModuleAccessKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupModuleAccess_SelectOneByGroupModuleAccessKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupModuleAccess_SelectOneByGroupModuleAccessKey]
	@groupModuleAccessKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[GroupModuleAccess].[GroupModuleAccessKey], 
	[GroupModuleAccess].[PortalKey], 
	[GroupModuleAccess].[GroupKey], 
	[GroupModuleAccess].[ModuleKey], 
	[GroupModuleAccess].[Access] 
FROM
	[GroupModuleAccess] 
WHERE [GroupModuleAccess].[GroupModuleAccessKey] = @groupModuleAccessKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupModuleAccess_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupModuleAccess_SelectSomeBySearch]
	@portalKey INT = 0,
	@propertyKeyList VARCHAR(2000) = NULL,
	@groupKey INT = 0,
	@moduleKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

-- Select PortalKey & UnitKey
SELECT PortalKey, UnitKey
INTO #T
FROM [dbo].[Split_PropertyKeyList](@propertyKeyList, ',')

SELECT
	[GroupModuleAccess].[GroupModuleAccessKey], 
	[GroupModuleAccess].[PortalKey], 
	[GroupModuleAccess].[GroupKey], 
	[GroupModuleAccess].[ModuleKey], 
	[GroupModuleAccess].[Access] 
FROM
	[GroupModuleAccess] 
	LEFT JOIN #T T ON [GroupModuleAccess].PortalKey = T.PortalKey 
WHERE ([GroupModuleAccess].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0)
AND ([GroupModuleAccess].[GroupKey] = @groupKey OR @groupKey IS NULL OR @groupKey = 0)
AND ([GroupModuleAccess].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND (T.PortalKey IS NOT NULL OR ISNULL(@propertyKeyList, '') = '') 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupModuleAccess_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupModuleAccess_SelectSomeBySearchAndPaging]
	@portalKey INT = 0,
	@propertyKeyList VARCHAR(2000) = NULL,
	@groupKey INT = 0,
	@moduleKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[GroupModuleAccess].[GroupModuleAccessKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [GroupModuleAccess].[GroupModuleAccessKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @portalKey INT, @groupKey INT, @moduleKey INT'

-- Select PortalKey & UnitKey
SELECT PortalKey, UnitKey
INTO #T
FROM [dbo].[Split_PropertyKeyList](@propertyKeyList, ',')

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[GroupModuleAccess] 
	LEFT JOIN #T T ON [GroupModuleAccess].PortalKey = T.PortalKey 
WHERE ([GroupModuleAccess].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0)
AND ([GroupModuleAccess].[GroupKey] = @groupKey OR @groupKey IS NULL OR @groupKey = 0)
AND ([GroupModuleAccess].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND (T.PortalKey IS NOT NULL OR ISNULL(@propertyKeyList, '') = '') 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[GroupModuleAccess].[GroupModuleAccessKey], ' +
		'		[GroupModuleAccess].[PortalKey], ' +
		'		[GroupModuleAccess].[GroupKey], ' +
		'		[GroupModuleAccess].[ModuleKey], ' +
		'		[GroupModuleAccess].[Access] ' +
		'	FROM [GroupModuleAccess]  ' + 
		'	LEFT JOIN #T T ON [GroupModuleAccess].PortalKey = T.PortalKey ' + 
		'	WHERE ([GroupModuleAccess].[PortalKey] = @portalKey OR @portalKey IS NULL OR @portalKey = 0) ' +
		'	AND ([GroupModuleAccess].[GroupKey] = @groupKey OR @groupKey IS NULL OR @groupKey = 0) ' +
		'	AND ([GroupModuleAccess].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'' 

	IF (ISNULL(@propertyKeyList, '') <> '')
		SET @sqlString = @sqlString + 'AND (T.PortalKey IS NOT NULL) ' 

	SET @sqlString = @sqlString + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @portalKey, @groupKey, @moduleKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_GroupModuleAccess_UpdateOneByGroupModuleAccessKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_GroupModuleAccess_UpdateOneByGroupModuleAccessKey]
	@groupModuleAccessKey INT,
	@portalKey INT,
	@groupKey INT,
	@moduleKey INT,
	@access INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [GroupModuleAccess]
SET
	[PortalKey] = @portalKey,
	[GroupKey] = @groupKey,
	[ModuleKey] = @moduleKey,
	[Access] = @access
WHERE [GroupModuleAccess].[GroupModuleAccessKey] = @groupModuleAccessKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Insurance_DeleteOneByInsuranceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Insurance_DeleteOneByInsuranceKey]
	@insuranceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Insurance]
WHERE [Insurance].[InsuranceKey] = @insuranceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Insurance_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Insurance_InsertOne]
	@vendorKey INT,
	@companyName VARCHAR(150),
	@policyNumber VARCHAR(150),
	@insuranceAmount MONEY,
	@agentName VARCHAR(150),
	@email VARCHAR(150),
	@work VARCHAR(150),
	@cellPhone VARCHAR(150),
	@fax VARCHAR(150),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@startDate DATETIME,
	@endDate DATETIME,
	@renewalDate DATETIME,
	@status INT,
	@insuranceKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Insurance]
(
	[VendorKey],
	[CompanyName],
	[PolicyNumber],
	[InsuranceAmount],
	[AgentName],
	[Email],
	[Work],
	[CellPhone],
	[Fax],
	[Address],
	[Address2],
	[City],
	[State],
	[Zip],
	[StartDate],
	[EndDate],
	[RenewalDate],
	[Status]
)
VALUES
(
	@vendorKey,
	@companyName,
	@policyNumber,
	@insuranceAmount,
	@agentName,
	@email,
	@work,
	@cellPhone,
	@fax,
	@address,
	@address2,
	@city,
	@state,
	@zip,
	@startDate,
	@endDate,
	@renewalDate,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @insuranceKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Insurance_SelectOneByInsuranceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Insurance_SelectOneByInsuranceKey]
	@insuranceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Insurance].[InsuranceKey], 
	[Insurance].[VendorKey], 
	[Insurance].[CompanyName], 
	[Insurance].[PolicyNumber], 
	[Insurance].[InsuranceAmount], 
	[Insurance].[AgentName], 
	[Insurance].[Email], 
	[Insurance].[Work], 
	[Insurance].[CellPhone], 
	[Insurance].[Fax], 
	[Insurance].[Address], 
	[Insurance].[Address2], 
	[Insurance].[City], 
	[Insurance].[State], 
	[Insurance].[Zip], 
	[Insurance].[StartDate], 
	[Insurance].[EndDate], 
	[Insurance].[RenewalDate], 
	[Insurance].[Status] 
FROM
	[Insurance] 
WHERE [Insurance].[InsuranceKey] = @insuranceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Insurance_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Insurance_SelectSomeBySearch]
	@vendorKey INT = 0,
	@state VARCHAR(2) = '',
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Insurance].[InsuranceKey], 
	[Insurance].[VendorKey], 
	[Insurance].[CompanyName], 
	[Insurance].[PolicyNumber], 
	[Insurance].[InsuranceAmount], 
	[Insurance].[AgentName], 
	[Insurance].[Email], 
	[Insurance].[Work], 
	[Insurance].[CellPhone], 
	[Insurance].[Fax], 
	[Insurance].[Address], 
	[Insurance].[Address2], 
	[Insurance].[City], 
	[Insurance].[State], 
	[Insurance].[Zip], 
	[Insurance].[StartDate], 
	[Insurance].[EndDate], 
	[Insurance].[RenewalDate], 
	[Insurance].[Status] 
FROM
	[Insurance] 
WHERE ([Insurance].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([Insurance].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Insurance].[Status] & ISNULL(@status, 7) = [Insurance].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Insurance_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Insurance_SelectSomeBySearchAndPaging]
	@vendorKey INT = 0,
	@state VARCHAR(2) = '',
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Insurance].[InsuranceKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Insurance].[InsuranceKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @vendorKey INT, @state VARCHAR(2), @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Insurance] 
WHERE ([Insurance].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([Insurance].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Insurance].[Status] & ISNULL(@status, 7) = [Insurance].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Insurance].[InsuranceKey], ' +
		'		[Insurance].[VendorKey], ' +
		'		[Insurance].[CompanyName], ' +
		'		[Insurance].[PolicyNumber], ' +
		'		[Insurance].[InsuranceAmount], ' +
		'		[Insurance].[AgentName], ' +
		'		[Insurance].[Email], ' +
		'		[Insurance].[Work], ' +
		'		[Insurance].[CellPhone], ' +
		'		[Insurance].[Fax], ' +
		'		[Insurance].[Address], ' +
		'		[Insurance].[Address2], ' +
		'		[Insurance].[City], ' +
		'		[Insurance].[State], ' +
		'		[Insurance].[Zip], ' +
		'		[Insurance].[StartDate], ' +
		'		[Insurance].[EndDate], ' +
		'		[Insurance].[RenewalDate], ' +
		'		[Insurance].[Status] ' +
		'	FROM [Insurance]  ' + 
		'	WHERE ([Insurance].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([Insurance].[State] LIKE @state OR @state IS NULL OR @state = '''') ' +
		'	AND ([Insurance].[Status] & ISNULL(@status, 7) = [Insurance].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @vendorKey, @state, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Insurance_UpdateOneByInsuranceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Insurance_UpdateOneByInsuranceKey]
	@insuranceKey INT,
	@vendorKey INT,
	@companyName VARCHAR(150),
	@policyNumber VARCHAR(150),
	@insuranceAmount MONEY,
	@agentName VARCHAR(150),
	@email VARCHAR(150),
	@work VARCHAR(150),
	@cellPhone VARCHAR(150),
	@fax VARCHAR(150),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@startDate DATETIME,
	@endDate DATETIME,
	@renewalDate DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Insurance]
SET
	[VendorKey] = @vendorKey,
	[CompanyName] = @companyName,
	[PolicyNumber] = @policyNumber,
	[InsuranceAmount] = @insuranceAmount,
	[AgentName] = @agentName,
	[Email] = @email,
	[Work] = @work,
	[CellPhone] = @cellPhone,
	[Fax] = @fax,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[StartDate] = @startDate,
	[EndDate] = @endDate,
	[RenewalDate] = @renewalDate,
	[Status] = @status
WHERE [Insurance].[InsuranceKey] = @insuranceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Invoice_DeleteOneByInvoiceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Invoice_DeleteOneByInvoiceKey]
	@invoiceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Invoice]
WHERE [Invoice].[InvoiceKey] = @invoiceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Invoice_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Invoice_InsertOne]
	@vendorKey INT,
	@referenceNumber VARCHAR(150),
	@transactionDate DATETIME,
	@dueDate DATETIME,
	@amount MONEY,
	@balance MONEY,
	@lastModificationTime DATETIME,
	@status INT,
	@invoiceKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Invoice]
(
	[VendorKey],
	[ReferenceNumber],
	[TransactionDate],
	[DueDate],
	[Amount],
	[Balance],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@vendorKey,
	@referenceNumber,
	@transactionDate,
	@dueDate,
	@amount,
	@balance,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @invoiceKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Invoice_SelectOneByInvoiceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Invoice_SelectOneByInvoiceKey]
	@invoiceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Invoice].[InvoiceKey], 
	[Invoice].[VendorKey], 
	[Invoice].[ReferenceNumber], 
	[Invoice].[TransactionDate], 
	[Invoice].[DueDate], 
	[Invoice].[Amount], 
	[Invoice].[Balance], 
	[Invoice].[LastModificationTime], 
	[Invoice].[Status] 
FROM
	[Invoice] 
WHERE [Invoice].[InvoiceKey] = @invoiceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Invoice_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Invoice_SelectSomeBySearch]
	@vendorKey INT = 0,
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Invoice].[InvoiceKey], 
	[Invoice].[VendorKey], 
	[Invoice].[ReferenceNumber], 
	[Invoice].[TransactionDate], 
	[Invoice].[DueDate], 
	[Invoice].[Amount], 
	[Invoice].[Balance], 
	[Invoice].[LastModificationTime], 
	[Invoice].[Status] 
FROM
	[Invoice] 
WHERE ([Invoice].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([Invoice].[Status] & ISNULL(@status, 7) = [Invoice].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Invoice_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Invoice_SelectSomeBySearchAndPaging]
	@vendorKey INT = 0,
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Invoice].[InvoiceKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Invoice].[InvoiceKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @vendorKey INT, @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Invoice] 
WHERE ([Invoice].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([Invoice].[Status] & ISNULL(@status, 7) = [Invoice].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Invoice].[InvoiceKey], ' +
		'		[Invoice].[VendorKey], ' +
		'		[Invoice].[ReferenceNumber], ' +
		'		[Invoice].[TransactionDate], ' +
		'		[Invoice].[DueDate], ' +
		'		[Invoice].[Amount], ' +
		'		[Invoice].[Balance], ' +
		'		[Invoice].[LastModificationTime], ' +
		'		[Invoice].[Status] ' +
		'	FROM [Invoice]  ' + 
		'	WHERE ([Invoice].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([Invoice].[Status] & ISNULL(@status, 7) = [Invoice].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @vendorKey, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Invoice_UpdateOneByInvoiceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Invoice_UpdateOneByInvoiceKey]
	@invoiceKey INT,
	@vendorKey INT,
	@referenceNumber VARCHAR(150),
	@transactionDate DATETIME,
	@dueDate DATETIME,
	@amount MONEY,
	@balance MONEY,
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Invoice]
SET
	[VendorKey] = @vendorKey,
	[ReferenceNumber] = @referenceNumber,
	[TransactionDate] = @transactionDate,
	[DueDate] = @dueDate,
	[Amount] = @amount,
	[Balance] = @balance,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Invoice].[InvoiceKey] = @invoiceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_InvoiceLine_DeleteOneByInvoiceLineKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_InvoiceLine_DeleteOneByInvoiceLineKey]
	@invoiceLineKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [InvoiceLine]
WHERE [InvoiceLine].[InvoiceLineKey] = @invoiceLineKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_InvoiceLine_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_InvoiceLine_InsertOne]
	@invoiceKey INT,
	@quantity INT,
	@rate MONEY,
	@amount MONEY,
	@description VARCHAR(5000),
	@sortOrder FLOAT(53),
	@invoiceLineKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [InvoiceLine]
(
	[InvoiceKey],
	[Quantity],
	[Rate],
	[Amount],
	[Description],
	[SortOrder]
)
VALUES
(
	@invoiceKey,
	@quantity,
	@rate,
	@amount,
	@description,
	@sortOrder
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @invoiceLineKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_InvoiceLine_SelectOneByInvoiceLineKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_InvoiceLine_SelectOneByInvoiceLineKey]
	@invoiceLineKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[InvoiceLine].[InvoiceLineKey], 
	[InvoiceLine].[InvoiceKey], 
	[InvoiceLine].[Quantity], 
	[InvoiceLine].[Rate], 
	[InvoiceLine].[Amount], 
	[InvoiceLine].[Description], 
	[InvoiceLine].[SortOrder] 
FROM
	[InvoiceLine] 
WHERE [InvoiceLine].[InvoiceLineKey] = @invoiceLineKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_InvoiceLine_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_InvoiceLine_SelectSomeBySearch]
	@invoiceKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[InvoiceLine].[InvoiceLineKey], 
	[InvoiceLine].[InvoiceKey], 
	[InvoiceLine].[Quantity], 
	[InvoiceLine].[Rate], 
	[InvoiceLine].[Amount], 
	[InvoiceLine].[Description], 
	[InvoiceLine].[SortOrder] 
FROM
	[InvoiceLine] 
WHERE ([InvoiceLine].[InvoiceKey] = @invoiceKey OR @invoiceKey IS NULL OR @invoiceKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_InvoiceLine_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_InvoiceLine_SelectSomeBySearchAndPaging]
	@invoiceKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[InvoiceLine].[InvoiceLineKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [InvoiceLine].[InvoiceLineKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @invoiceKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[InvoiceLine] 
WHERE ([InvoiceLine].[InvoiceKey] = @invoiceKey OR @invoiceKey IS NULL OR @invoiceKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[InvoiceLine].[InvoiceLineKey], ' +
		'		[InvoiceLine].[InvoiceKey], ' +
		'		[InvoiceLine].[Quantity], ' +
		'		[InvoiceLine].[Rate], ' +
		'		[InvoiceLine].[Amount], ' +
		'		[InvoiceLine].[Description], ' +
		'		[InvoiceLine].[SortOrder] ' +
		'	FROM [InvoiceLine]  ' + 
		'	WHERE ([InvoiceLine].[InvoiceKey] = @invoiceKey OR @invoiceKey IS NULL OR @invoiceKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @invoiceKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_InvoiceLine_UpdateOneByInvoiceLineKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_InvoiceLine_UpdateOneByInvoiceLineKey]
	@invoiceLineKey INT,
	@invoiceKey INT,
	@quantity INT,
	@rate MONEY,
	@amount MONEY,
	@description VARCHAR(5000),
	@sortOrder FLOAT(53),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [InvoiceLine]
SET
	[InvoiceKey] = @invoiceKey,
	[Quantity] = @quantity,
	[Rate] = @rate,
	[Amount] = @amount,
	[Description] = @description,
	[SortOrder] = @sortOrder
WHERE [InvoiceLine].[InvoiceLineKey] = @invoiceLineKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LoginHistory_DeleteOneByLoginHistoryKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LoginHistory_DeleteOneByLoginHistoryKey]
	@loginHistoryKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [LoginHistory]
WHERE [LoginHistory].[LoginHistoryKey] = @loginHistoryKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LoginHistory_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LoginHistory_InsertOne]
	@userKey INT,
	@dateAdded DATETIME,
	@loginHistoryKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [LoginHistory]
(
	[UserKey],
	[DateAdded]
)
VALUES
(
	@userKey,
	@dateAdded
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @loginHistoryKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_LoginHistory_SelectOneByLoginHistoryKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LoginHistory_SelectOneByLoginHistoryKey]
	@loginHistoryKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[LoginHistory].[LoginHistoryKey], 
	[LoginHistory].[UserKey], 
	[LoginHistory].[DateAdded] 
FROM
	[LoginHistory] 
WHERE [LoginHistory].[LoginHistoryKey] = @loginHistoryKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LoginHistory_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LoginHistory_SelectSomeBySearch]
	@userKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[LoginHistory].[LoginHistoryKey], 
	[LoginHistory].[UserKey], 
	[LoginHistory].[DateAdded] 
FROM
	[LoginHistory] 
WHERE ([LoginHistory].[UserKey] = @userKey OR @userKey IS NULL OR @userKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LoginHistory_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LoginHistory_SelectSomeBySearchAndPaging]
	@userKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[LoginHistory].[LoginHistoryKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [LoginHistory].[LoginHistoryKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @userKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[LoginHistory] 
WHERE ([LoginHistory].[UserKey] = @userKey OR @userKey IS NULL OR @userKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[LoginHistory].[LoginHistoryKey], ' +
		'		[LoginHistory].[UserKey], ' +
		'		[LoginHistory].[DateAdded] ' +
		'	FROM [LoginHistory]  ' + 
		'	WHERE ([LoginHistory].[UserKey] = @userKey OR @userKey IS NULL OR @userKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @userKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_LoginHistory_UpdateOneByLoginHistoryKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LoginHistory_UpdateOneByLoginHistoryKey]
	@loginHistoryKey INT,
	@userKey INT,
	@dateAdded DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [LoginHistory]
SET
	[UserKey] = @userKey,
	[DateAdded] = @dateAdded
WHERE [LoginHistory].[LoginHistoryKey] = @loginHistoryKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUp_DeleteOneByLookUpKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUp_DeleteOneByLookUpKey]
	@lookUpKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [LookUp]
WHERE [LookUp].[LookUpKey] = @lookUpKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUp_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUp_InsertOne]
	@lookUpKey INT,
	@lookUpTypeKey INT,
	@title VARCHAR(150),
	@value INT,
	@sortOrder FLOAT(53),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [LookUp]
(
	[LookUpKey],
	[LookUpTypeKey],
	[Title],
	[Value],
	[SortOrder]
)
VALUES
(
	@lookUpKey,
	@lookUpTypeKey,
	@title,
	@value,
	@sortOrder
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUp_SelectOneByLookUpKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUp_SelectOneByLookUpKey]
	@lookUpKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[LookUp].[LookUpKey], 
	[LookUp].[LookUpTypeKey], 
	[LookUp].[Title], 
	[LookUp].[Value], 
	[LookUp].[SortOrder] 
FROM
	[LookUp] 
WHERE [LookUp].[LookUpKey] = @lookUpKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUp_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUp_SelectSomeBySearch]
	@lookUpTypeKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[LookUp].[LookUpKey], 
	[LookUp].[LookUpTypeKey], 
	[LookUp].[Title], 
	[LookUp].[Value], 
	[LookUp].[SortOrder] 
FROM
	[LookUp] 
WHERE ([LookUp].[LookUpTypeKey] = @lookUpTypeKey OR @lookUpTypeKey IS NULL OR @lookUpTypeKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUp_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUp_SelectSomeBySearchAndPaging]
	@lookUpTypeKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[LookUp].[LookUpKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [LookUp].[LookUpKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @lookUpTypeKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[LookUp] 
WHERE ([LookUp].[LookUpTypeKey] = @lookUpTypeKey OR @lookUpTypeKey IS NULL OR @lookUpTypeKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[LookUp].[LookUpKey], ' +
		'		[LookUp].[LookUpTypeKey], ' +
		'		[LookUp].[Title], ' +
		'		[LookUp].[Value], ' +
		'		[LookUp].[SortOrder] ' +
		'	FROM [LookUp]  ' + 
		'	WHERE ([LookUp].[LookUpTypeKey] = @lookUpTypeKey OR @lookUpTypeKey IS NULL OR @lookUpTypeKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @lookUpTypeKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUp_UpdateOneByLookUpKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUp_UpdateOneByLookUpKey]
	@lookUpKey INT,
	@lookUpTypeKey INT,
	@title VARCHAR(150),
	@value INT,
	@sortOrder FLOAT(53),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [LookUp]
SET
	[LookUpTypeKey] = @lookUpTypeKey,
	[Title] = @title,
	[Value] = @value,
	[SortOrder] = @sortOrder
WHERE [LookUp].[LookUpKey] = @lookUpKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUpType_DeleteOneByLookUpTypeKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUpType_DeleteOneByLookUpTypeKey]
	@lookUpTypeKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [LookUpType]
WHERE [LookUpType].[LookUpTypeKey] = @lookUpTypeKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUpType_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUpType_InsertOne]
	@title VARCHAR(150),
	@lookUpTypeKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [LookUpType]
(
	[Title]
)
VALUES
(
	@title
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @lookUpTypeKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUpType_SelectOneByLookUpTypeKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUpType_SelectOneByLookUpTypeKey]
	@lookUpTypeKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[LookUpType].[LookUpTypeKey], 
	[LookUpType].[Title] 
FROM
	[LookUpType] 
WHERE [LookUpType].[LookUpTypeKey] = @lookUpTypeKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUpType_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUpType_SelectSomeBySearch]
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[LookUpType].[LookUpTypeKey], 
	[LookUpType].[Title] 
FROM
	[LookUpType] 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUpType_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUpType_SelectSomeBySearchAndPaging]
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[LookUpType].[LookUpTypeKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [LookUpType].[LookUpTypeKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[LookUpType] 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[LookUpType].[LookUpTypeKey], ' +
		'		[LookUpType].[Title] ' +
		'	FROM [LookUpType]  ' + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_LookUpType_UpdateOneByLookUpTypeKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_LookUpType_UpdateOneByLookUpTypeKey]
	@lookUpTypeKey INT,
	@title VARCHAR(150),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [LookUpType]
SET
	[Title] = @title
WHERE [LookUpType].[LookUpTypeKey] = @lookUpTypeKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Membership_DeleteOneByMembershipKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Membership_DeleteOneByMembershipKey]
	@membershipKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Membership]
WHERE [Membership].[MembershipKey] = @membershipKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Membership_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Membership_InsertOne]
	@vendorKey INT,
	@startDate DATETIME,
	@endDate DATETIME,
	@renewalDate DATETIME,
	@automaticRenewal BIT,
	@lastModificationTime DATETIME,
	@membershipKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Membership]
(
	[VendorKey],
	[StartDate],
	[EndDate],
	[RenewalDate],
	[AutomaticRenewal],
	[LastModificationTime]
)
VALUES
(
	@vendorKey,
	@startDate,
	@endDate,
	@renewalDate,
	@automaticRenewal,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @membershipKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Membership_SelectOneByMembershipKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Membership_SelectOneByMembershipKey]
	@membershipKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Membership].[MembershipKey], 
	[Membership].[VendorKey], 
	[Membership].[StartDate], 
	[Membership].[EndDate], 
	[Membership].[RenewalDate], 
	[Membership].[AutomaticRenewal], 
	[Membership].[LastModificationTime] 
FROM
	[Membership] 
WHERE [Membership].[MembershipKey] = @membershipKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Membership_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Membership_SelectSomeBySearch]
	@vendorKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Membership].[MembershipKey], 
	[Membership].[VendorKey], 
	[Membership].[StartDate], 
	[Membership].[EndDate], 
	[Membership].[RenewalDate], 
	[Membership].[AutomaticRenewal], 
	[Membership].[LastModificationTime] 
FROM
	[Membership] 
WHERE ([Membership].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Membership_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Membership_SelectSomeBySearchAndPaging]
	@vendorKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Membership].[MembershipKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Membership].[MembershipKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @vendorKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Membership] 
WHERE ([Membership].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Membership].[MembershipKey], ' +
		'		[Membership].[VendorKey], ' +
		'		[Membership].[StartDate], ' +
		'		[Membership].[EndDate], ' +
		'		[Membership].[RenewalDate], ' +
		'		[Membership].[AutomaticRenewal], ' +
		'		[Membership].[LastModificationTime] ' +
		'	FROM [Membership]  ' + 
		'	WHERE ([Membership].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @vendorKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Membership_UpdateOneByMembershipKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Membership_UpdateOneByMembershipKey]
	@membershipKey INT,
	@vendorKey INT,
	@startDate DATETIME,
	@endDate DATETIME,
	@renewalDate DATETIME,
	@automaticRenewal BIT,
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Membership]
SET
	[VendorKey] = @vendorKey,
	[StartDate] = @startDate,
	[EndDate] = @endDate,
	[RenewalDate] = @renewalDate,
	[AutomaticRenewal] = @automaticRenewal,
	[LastModificationTime] = @lastModificationTime
WHERE [Membership].[MembershipKey] = @membershipKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Message_DeleteOneByMessageKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Message_DeleteOneByMessageKey]
	@messageKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Message]
WHERE [Message].[MessageKey] = @messageKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Message_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Message_InsertOne]
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@body VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@messageStatus INT,
	@messageKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Message]
(
	[ModuleKey],
	[ResourceKey],
	[ObjectKey],
	[Body],
	[LastModificationTime],
	[MessageStatus]
)
VALUES
(
	@moduleKey,
	@resourceKey,
	@objectKey,
	@body,
	@lastModificationTime,
	@messageStatus
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @messageKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Message_SelectOneByMessageKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Message_SelectOneByMessageKey]
	@messageKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Message].[MessageKey], 
	[Message].[ModuleKey], 
	[Message].[ResourceKey], 
	[Message].[ObjectKey], 
	[Message].[Body], 
	[Message].[LastModificationTime], 
	[Message].[MessageStatus] 
FROM
	[Message] 
WHERE [Message].[MessageKey] = @messageKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Message_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Message_SelectSomeBySearch]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@messageStatus INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Message].[MessageKey], 
	[Message].[ModuleKey], 
	[Message].[ResourceKey], 
	[Message].[ObjectKey], 
	[Message].[Body], 
	[Message].[LastModificationTime], 
	[Message].[MessageStatus] 
FROM
	[Message] 
WHERE ([Message].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Message].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Message].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Message].[MessageStatus] & @messageStatus = [Message].[MessageStatus] OR @messageStatus IS NULL OR @messageStatus = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Message_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Message_SelectSomeBySearchAndPaging]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@messageStatus INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Message].[MessageKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Message].[MessageKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @moduleKey INT, @resourceKey INT, @objectKey INT, @messageStatus INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Message] 
WHERE ([Message].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Message].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Message].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Message].[MessageStatus] & @messageStatus = [Message].[MessageStatus] OR @messageStatus IS NULL OR @messageStatus = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Message].[MessageKey], ' +
		'		[Message].[ModuleKey], ' +
		'		[Message].[ResourceKey], ' +
		'		[Message].[ObjectKey], ' +
		'		[Message].[Body], ' +
		'		[Message].[LastModificationTime], ' +
		'		[Message].[MessageStatus] ' +
		'	FROM [Message]  ' + 
		'	WHERE ([Message].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'	AND ([Message].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([Message].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0) ' +
		'	AND ([Message].[MessageStatus] & @messageStatus = [Message].[MessageStatus] OR @messageStatus IS NULL OR @messageStatus = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @moduleKey, @resourceKey, @objectKey, @messageStatus

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Message_UpdateOneByMessageKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Message_UpdateOneByMessageKey]
	@messageKey INT,
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@body VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@messageStatus INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Message]
SET
	[ModuleKey] = @moduleKey,
	[ResourceKey] = @resourceKey,
	[ObjectKey] = @objectKey,
	[Body] = @body,
	[LastModificationTime] = @lastModificationTime,
	[MessageStatus] = @messageStatus
WHERE [Message].[MessageKey] = @messageKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Module_DeleteOneByModuleKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Module_DeleteOneByModuleKey]
	@moduleKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Module]
WHERE [Module].[ModuleKey] = @moduleKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Module_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Module_InsertOne]
	@moduleKey INT,
	@title VARCHAR(150),
	@controller VARCHAR(150),
	@action VARCHAR(150),
	@image VARCHAR(150),
	@description VARCHAR(MAX),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Module]
(
	[ModuleKey],
	[Title],
	[Controller],
	[Action],
	[Image],
	[Description]
)
VALUES
(
	@moduleKey,
	@title,
	@controller,
	@action,
	@image,
	@description
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Module_SelectOneByModuleKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Module_SelectOneByModuleKey]
	@moduleKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Module].[ModuleKey], 
	[Module].[Title], 
	[Module].[Controller], 
	[Module].[Action], 
	[Module].[Image], 
	[Module].[Description] 
FROM
	[Module] 
WHERE [Module].[ModuleKey] = @moduleKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Module_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Module_SelectSomeBySearch]
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Module].[ModuleKey], 
	[Module].[Title], 
	[Module].[Controller], 
	[Module].[Action], 
	[Module].[Image], 
	[Module].[Description] 
FROM
	[Module] 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Module_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Module_SelectSomeBySearchAndPaging]
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Module].[ModuleKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Module].[ModuleKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Module] 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Module].[ModuleKey], ' +
		'		[Module].[Title], ' +
		'		[Module].[Controller], ' +
		'		[Module].[Action], ' +
		'		[Module].[Image], ' +
		'		[Module].[Description] ' +
		'	FROM [Module]  ' + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Module_UpdateOneByModuleKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Module_UpdateOneByModuleKey]
	@moduleKey INT,
	@title VARCHAR(150),
	@controller VARCHAR(150),
	@action VARCHAR(150),
	@image VARCHAR(150),
	@description VARCHAR(MAX),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Module]
SET
	[Title] = @title,
	[Controller] = @controller,
	[Action] = @action,
	[Image] = @image,
	[Description] = @description
WHERE [Module].[ModuleKey] = @moduleKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Note_DeleteOneByNoteKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Note_DeleteOneByNoteKey]
	@noteKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Note]
WHERE [Note].[NoteKey] = @noteKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Note_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Note_InsertOne]
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@status INT,
	@noteKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Note]
(
	[ModuleKey],
	[ResourceKey],
	[ObjectKey],
	[Description],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@moduleKey,
	@resourceKey,
	@objectKey,
	@description,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @noteKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Note_SelectOneByNoteKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Note_SelectOneByNoteKey]
	@noteKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Note].[NoteKey], 
	[Note].[ModuleKey], 
	[Note].[ResourceKey], 
	[Note].[ObjectKey], 
	[Note].[Description], 
	[Note].[LastModificationTime], 
	[Note].[Status] 
FROM
	[Note] 
WHERE [Note].[NoteKey] = @noteKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Note_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Note_SelectSomeBySearch]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Note].[NoteKey], 
	[Note].[ModuleKey], 
	[Note].[ResourceKey], 
	[Note].[ObjectKey], 
	[Note].[Description], 
	[Note].[LastModificationTime], 
	[Note].[Status] 
FROM
	[Note] 
WHERE ([Note].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Note].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Note].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Note].[Status] & ISNULL(@status, 7) = [Note].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Note_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Note_SelectSomeBySearchAndPaging]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Note].[NoteKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Note].[NoteKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @moduleKey INT, @resourceKey INT, @objectKey INT, @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Note] 
WHERE ([Note].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Note].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Note].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Note].[Status] & ISNULL(@status, 7) = [Note].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Note].[NoteKey], ' +
		'		[Note].[ModuleKey], ' +
		'		[Note].[ResourceKey], ' +
		'		[Note].[ObjectKey], ' +
		'		[Note].[Description], ' +
		'		[Note].[LastModificationTime], ' +
		'		[Note].[Status] ' +
		'	FROM [Note]  ' + 
		'	WHERE ([Note].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'	AND ([Note].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([Note].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0) ' +
		'	AND ([Note].[Status] & ISNULL(@status, 7) = [Note].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @moduleKey, @resourceKey, @objectKey, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Note_UpdateOneByNoteKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Note_UpdateOneByNoteKey]
	@noteKey INT,
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@description VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Note]
SET
	[ModuleKey] = @moduleKey,
	[ResourceKey] = @resourceKey,
	[ObjectKey] = @objectKey,
	[Description] = @description,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Note].[NoteKey] = @noteKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Payment_DeleteOneByPaymentKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Payment_DeleteOneByPaymentKey]
	@paymentKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Payment]
WHERE [Payment].[PaymentKey] = @paymentKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Payment_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Payment_InsertOne]
	@vendorKey INT,
	@paymentTypeKey INT,
	@referenceNumber VARCHAR(150),
	@transactionDate DATETIME,
	@amount MONEY,
	@balance MONEY,
	@description VARCHAR(5000),
	@lastModificationTime DATETIME,
	@paymentKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Payment]
(
	[VendorKey],
	[PaymentTypeKey],
	[ReferenceNumber],
	[TransactionDate],
	[Amount],
	[Balance],
	[Description],
	[LastModificationTime]
)
VALUES
(
	@vendorKey,
	@paymentTypeKey,
	@referenceNumber,
	@transactionDate,
	@amount,
	@balance,
	@description,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @paymentKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Payment_SelectOneByPaymentKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Payment_SelectOneByPaymentKey]
	@paymentKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Payment].[PaymentKey], 
	[Payment].[VendorKey], 
	[Payment].[PaymentTypeKey], 
	[Payment].[ReferenceNumber], 
	[Payment].[TransactionDate], 
	[Payment].[Amount], 
	[Payment].[Balance], 
	[Payment].[Description], 
	[Payment].[LastModificationTime] 
FROM
	[Payment] 
WHERE [Payment].[PaymentKey] = @paymentKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Payment_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Payment_SelectSomeBySearch]
	@vendorKey INT = 0,
	@paymentTypeKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Payment].[PaymentKey], 
	[Payment].[VendorKey], 
	[Payment].[PaymentTypeKey], 
	[Payment].[ReferenceNumber], 
	[Payment].[TransactionDate], 
	[Payment].[Amount], 
	[Payment].[Balance], 
	[Payment].[Description], 
	[Payment].[LastModificationTime] 
FROM
	[Payment] 
WHERE ([Payment].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([Payment].[PaymentTypeKey] = @paymentTypeKey OR @paymentTypeKey IS NULL OR @paymentTypeKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Payment_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Payment_SelectSomeBySearchAndPaging]
	@vendorKey INT = 0,
	@paymentTypeKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Payment].[PaymentKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Payment].[PaymentKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @vendorKey INT, @paymentTypeKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Payment] 
WHERE ([Payment].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([Payment].[PaymentTypeKey] = @paymentTypeKey OR @paymentTypeKey IS NULL OR @paymentTypeKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Payment].[PaymentKey], ' +
		'		[Payment].[VendorKey], ' +
		'		[Payment].[PaymentTypeKey], ' +
		'		[Payment].[ReferenceNumber], ' +
		'		[Payment].[TransactionDate], ' +
		'		[Payment].[Amount], ' +
		'		[Payment].[Balance], ' +
		'		[Payment].[Description], ' +
		'		[Payment].[LastModificationTime] ' +
		'	FROM [Payment]  ' + 
		'	WHERE ([Payment].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([Payment].[PaymentTypeKey] = @paymentTypeKey OR @paymentTypeKey IS NULL OR @paymentTypeKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @vendorKey, @paymentTypeKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Payment_UpdateOneByPaymentKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Payment_UpdateOneByPaymentKey]
	@paymentKey INT,
	@vendorKey INT,
	@paymentTypeKey INT,
	@referenceNumber VARCHAR(150),
	@transactionDate DATETIME,
	@amount MONEY,
	@balance MONEY,
	@description VARCHAR(5000),
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Payment]
SET
	[VendorKey] = @vendorKey,
	[PaymentTypeKey] = @paymentTypeKey,
	[ReferenceNumber] = @referenceNumber,
	[TransactionDate] = @transactionDate,
	[Amount] = @amount,
	[Balance] = @balance,
	[Description] = @description,
	[LastModificationTime] = @lastModificationTime
WHERE [Payment].[PaymentKey] = @paymentKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PaymentApplied_DeleteOneByPaymentAppliedKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PaymentApplied_DeleteOneByPaymentAppliedKey]
	@paymentAppliedKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [PaymentApplied]
WHERE [PaymentApplied].[PaymentAppliedKey] = @paymentAppliedKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PaymentApplied_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PaymentApplied_InsertOne]
	@paymentKey INT,
	@invociceKey INT,
	@amount MONEY,
	@lastModificationTime DATETIME,
	@paymentAppliedKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [PaymentApplied]
(
	[PaymentKey],
	[InvociceKey],
	[Amount],
	[LastModificationTime]
)
VALUES
(
	@paymentKey,
	@invociceKey,
	@amount,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @paymentAppliedKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_PaymentApplied_SelectOneByPaymentAppliedKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PaymentApplied_SelectOneByPaymentAppliedKey]
	@paymentAppliedKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[PaymentApplied].[PaymentAppliedKey], 
	[PaymentApplied].[PaymentKey], 
	[PaymentApplied].[InvociceKey], 
	[PaymentApplied].[Amount], 
	[PaymentApplied].[LastModificationTime] 
FROM
	[PaymentApplied] 
WHERE [PaymentApplied].[PaymentAppliedKey] = @paymentAppliedKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PaymentApplied_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PaymentApplied_SelectSomeBySearch]
	@paymentKey INT = 0,
	@invociceKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[PaymentApplied].[PaymentAppliedKey], 
	[PaymentApplied].[PaymentKey], 
	[PaymentApplied].[InvociceKey], 
	[PaymentApplied].[Amount], 
	[PaymentApplied].[LastModificationTime] 
FROM
	[PaymentApplied] 
WHERE ([PaymentApplied].[PaymentKey] = @paymentKey OR @paymentKey IS NULL OR @paymentKey = 0)
AND ([PaymentApplied].[InvociceKey] = @invociceKey OR @invociceKey IS NULL OR @invociceKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PaymentApplied_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PaymentApplied_SelectSomeBySearchAndPaging]
	@paymentKey INT = 0,
	@invociceKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[PaymentApplied].[PaymentAppliedKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [PaymentApplied].[PaymentAppliedKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @paymentKey INT, @invociceKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[PaymentApplied] 
WHERE ([PaymentApplied].[PaymentKey] = @paymentKey OR @paymentKey IS NULL OR @paymentKey = 0)
AND ([PaymentApplied].[InvociceKey] = @invociceKey OR @invociceKey IS NULL OR @invociceKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[PaymentApplied].[PaymentAppliedKey], ' +
		'		[PaymentApplied].[PaymentKey], ' +
		'		[PaymentApplied].[InvociceKey], ' +
		'		[PaymentApplied].[Amount], ' +
		'		[PaymentApplied].[LastModificationTime] ' +
		'	FROM [PaymentApplied]  ' + 
		'	WHERE ([PaymentApplied].[PaymentKey] = @paymentKey OR @paymentKey IS NULL OR @paymentKey = 0) ' +
		'	AND ([PaymentApplied].[InvociceKey] = @invociceKey OR @invociceKey IS NULL OR @invociceKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @paymentKey, @invociceKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_PaymentApplied_UpdateOneByPaymentAppliedKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PaymentApplied_UpdateOneByPaymentAppliedKey]
	@paymentAppliedKey INT,
	@paymentKey INT,
	@invociceKey INT,
	@amount MONEY,
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [PaymentApplied]
SET
	[PaymentKey] = @paymentKey,
	[InvociceKey] = @invociceKey,
	[Amount] = @amount,
	[LastModificationTime] = @lastModificationTime
WHERE [PaymentApplied].[PaymentAppliedKey] = @paymentAppliedKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Portal_DeleteOneByPortalKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Portal_DeleteOneByPortalKey]
	@portalKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Portal]
WHERE [Portal].[PortalKey] = @portalKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Portal_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Portal_InsertOne]
	@portalID VARCHAR(255),
	@title VARCHAR(150),
	@url VARCHAR(255),
	@siteImage VARCHAR(150),
	@homePageImage VARCHAR(150),
	@stylesheet VARCHAR(150),
	@description VARCHAR(MAX),
	@notificationSetting INT,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@portalKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Portal]
(
	[PortalID],
	[Title],
	[Url],
	[SiteImage],
	[HomePageImage],
	[Stylesheet],
	[Description],
	[NotificationSetting],
	[DateAdded],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@portalID,
	@title,
	@url,
	@siteImage,
	@homePageImage,
	@stylesheet,
	@description,
	@notificationSetting,
	@dateAdded,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @portalKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Portal_SelectOneByPortalKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Portal_SelectOneByPortalKey]
	@portalKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Portal].[PortalKey], 
	[Portal].[PortalID], 
	[Portal].[Title], 
	[Portal].[Url], 
	[Portal].[SiteImage], 
	[Portal].[HomePageImage], 
	[Portal].[Stylesheet], 
	[Portal].[Description], 
	[Portal].[NotificationSetting], 
	[Portal].[DateAdded], 
	[Portal].[LastModificationTime], 
	[Portal].[Status] 
FROM
	[Portal] 
WHERE [Portal].[PortalKey] = @portalKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Portal_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Portal_SelectSomeBySearch]
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Portal].[PortalKey], 
	[Portal].[PortalID], 
	[Portal].[Title], 
	[Portal].[Url], 
	[Portal].[SiteImage], 
	[Portal].[HomePageImage], 
	[Portal].[Stylesheet], 
	[Portal].[Description], 
	[Portal].[NotificationSetting], 
	[Portal].[DateAdded], 
	[Portal].[LastModificationTime], 
	[Portal].[Status] 
FROM
	[Portal] 
WHERE ([Portal].[Status] & ISNULL(@status, 7) = [Portal].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Portal_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Portal_SelectSomeBySearchAndPaging]
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Portal].[PortalKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Portal].[PortalKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Portal] 
WHERE ([Portal].[Status] & ISNULL(@status, 7) = [Portal].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Portal].[PortalKey], ' +
		'		[Portal].[PortalID], ' +
		'		[Portal].[Title], ' +
		'		[Portal].[Url], ' +
		'		[Portal].[SiteImage], ' +
		'		[Portal].[HomePageImage], ' +
		'		[Portal].[Stylesheet], ' +
		'		[Portal].[Description], ' +
		'		[Portal].[NotificationSetting], ' +
		'		[Portal].[DateAdded], ' +
		'		[Portal].[LastModificationTime], ' +
		'		[Portal].[Status] ' +
		'	FROM [Portal]  ' + 
		'	WHERE ([Portal].[Status] & ISNULL(@status, 7) = [Portal].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Portal_UpdateOneByPortalKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Portal_UpdateOneByPortalKey]
	@portalKey INT,
	@portalID VARCHAR(255),
	@title VARCHAR(150),
	@url VARCHAR(255),
	@siteImage VARCHAR(150),
	@homePageImage VARCHAR(150),
	@stylesheet VARCHAR(150),
	@description VARCHAR(MAX),
	@notificationSetting INT,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Portal]
SET
	[PortalID] = @portalID,
	[Title] = @title,
	[Url] = @url,
	[SiteImage] = @siteImage,
	[HomePageImage] = @homePageImage,
	[Stylesheet] = @stylesheet,
	[Description] = @description,
	[NotificationSetting] = @notificationSetting,
	[DateAdded] = @dateAdded,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Portal].[PortalKey] = @portalKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Pricing_DeleteOneByPricingKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Pricing_DeleteOneByPricingKey]
	@pricingKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Pricing]
WHERE [Pricing].[PricingKey] = @pricingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Pricing_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Pricing_InsertOne]
	@PricingKey INt,
	@CompanyKey Int,
	@PricingTypeKey Int,
	@StartAmount Money,
	@EndAmount Money,
	@Fee Money,
	@LastModificationTime datetime,
	@SortOrder float,	
	@userKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Pricing]
(
	[PricingKey],
	[CompanyKey],
	[PricingTypeKey],
	[StartAmount],
	[EndAmount],
	[Fee],
	[LastModificationTime],
	[SortOrder]
)
VALUES
(
	@PricingKey ,
	@CompanyKey ,
	@PricingTypeKey ,
	@StartAmount ,
	@EndAmount ,
	@Fee ,
	@LastModificationTime ,
	@SortOrder 	
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @userKey = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [dbo].[gensp_Pricing_SelectOneByPricingKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Pricing_SelectOneByPricingKey]
	@pricingKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Pricing].[PricingKey], 
	[Pricing].[CompanyKey], 
	[Pricing].[PricingTypeKey], 
	[Pricing].[StartAmount], 
	[Pricing].[EndAmount], 
	[Pricing].[Fee], 
	[Pricing].[LastModificationTime], 
	[Pricing].[SortOrder] 
FROM
	[Pricing] 
WHERE [Pricing].[PricingKey] = @pricingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Pricing_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Pricing_SelectSomeBySearch]
	@companyKey INT = 0,
	@pricingTypeKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Pricing].[PricingKey], 
	[Pricing].[CompanyKey], 
	[Pricing].[PricingTypeKey], 
	[Pricing].[StartAmount], 
	[Pricing].[EndAmount], 
	[Pricing].[Fee], 
	[Pricing].[LastModificationTime], 
	[Pricing].[SortOrder] 
FROM
	[Pricing] 
WHERE ([Pricing].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([Pricing].[PricingTypeKey] = @pricingTypeKey OR @pricingTypeKey IS NULL OR @pricingTypeKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Pricing_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Pricing_SelectSomeBySearchAndPaging]
	@companyKey INT = 0,
	@pricingTypeKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Pricing].[PricingKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Pricing].[PricingKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @companyKey INT, @pricingTypeKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Pricing] 
WHERE ([Pricing].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([Pricing].[PricingTypeKey] = @pricingTypeKey OR @pricingTypeKey IS NULL OR @pricingTypeKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Pricing].[PricingKey], ' +
		'		[Pricing].[CompanyKey], ' +
		'		[Pricing].[PricingTypeKey], ' +
		'		[Pricing].[StartAmount], ' +
		'		[Pricing].[EndAmount], ' +
		'		[Pricing].[Fee], ' +
		'		[Pricing].[LastModificationTime], ' +
		'		[Pricing].[SortOrder] ' +
		'	FROM [Pricing]  ' + 
		'	WHERE ([Pricing].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0) ' +
		'	AND ([Pricing].[PricingTypeKey] = @pricingTypeKey OR @pricingTypeKey IS NULL OR @pricingTypeKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @companyKey, @pricingTypeKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Pricing_UpdateOneByPricingKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Pricing_UpdateOneByPricingKey]
	@pricingKey INT,
	@companyKey INT,
	@pricingTypeKey INT,
	@startAmount MONEY,
	@endAmount MONEY,
	@fee MONEY,
	@lastModificationTime DATETIME,
	@sortOrder FLOAT(53),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Pricing]
SET
	[CompanyKey] = @companyKey,
	[PricingTypeKey] = @pricingTypeKey,
	[StartAmount] = @startAmount,
	[EndAmount] = @endAmount,
	[Fee] = @fee,
	[LastModificationTime] = @lastModificationTime,
	[SortOrder] = @sortOrder
WHERE [Pricing].[PricingKey] = @pricingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Promotion_DeleteOneByPromotionKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Promotion_DeleteOneByPromotionKey]
	@promotionKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Promotion]
WHERE [Promotion].[PromotionKey] = @promotionKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Promotion_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Promotion_InsertOne]
	@companyKey INT,
	@title VARCHAR(150),
	@promotionCode VARCHAR(150),
	@amount MONEY,
	@percentage FLOAT(53),
	@startDate DATETIME,
	@endDate DATETIME,
	@lastModificationTime DATETIME,
	@promotionKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Promotion]
(
	[CompanyKey],
	[Title],
	[PromotionCode],
	[Amount],
	[Percentage],
	[StartDate],
	[EndDate],
	[LastModificationTime]
)
VALUES
(
	@companyKey,
	@title,
	@promotionCode,
	@amount,
	@percentage,
	@startDate,
	@endDate,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @promotionKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Promotion_SelectOneByPromotionKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Promotion_SelectOneByPromotionKey]
	@promotionKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Promotion].[PromotionKey], 
	[Promotion].[CompanyKey], 
	[Promotion].[Title], 
	[Promotion].[PromotionCode], 
	[Promotion].[Amount], 
	[Promotion].[Percentage], 
	[Promotion].[StartDate], 
	[Promotion].[EndDate], 
	[Promotion].[LastModificationTime] 
FROM
	[Promotion] 
WHERE [Promotion].[PromotionKey] = @promotionKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Promotion_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Promotion_SelectSomeBySearch]
	@companyKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Promotion].[PromotionKey], 
	[Promotion].[CompanyKey], 
	[Promotion].[Title], 
	[Promotion].[PromotionCode], 
	[Promotion].[Amount], 
	[Promotion].[Percentage], 
	[Promotion].[StartDate], 
	[Promotion].[EndDate], 
	[Promotion].[LastModificationTime] 
FROM
	[Promotion] 
WHERE ([Promotion].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Promotion_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Promotion_SelectSomeBySearchAndPaging]
	@companyKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Promotion].[PromotionKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Promotion].[PromotionKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @companyKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Promotion] 
WHERE ([Promotion].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Promotion].[PromotionKey], ' +
		'		[Promotion].[CompanyKey], ' +
		'		[Promotion].[Title], ' +
		'		[Promotion].[PromotionCode], ' +
		'		[Promotion].[Amount], ' +
		'		[Promotion].[Percentage], ' +
		'		[Promotion].[StartDate], ' +
		'		[Promotion].[EndDate], ' +
		'		[Promotion].[LastModificationTime] ' +
		'	FROM [Promotion]  ' + 
		'	WHERE ([Promotion].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @companyKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Promotion_UpdateOneByPromotionKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Promotion_UpdateOneByPromotionKey]
	@promotionKey INT,
	@companyKey INT,
	@title VARCHAR(150),
	@promotionCode VARCHAR(150),
	@amount MONEY,
	@percentage FLOAT(53),
	@startDate DATETIME,
	@endDate DATETIME,
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Promotion]
SET
	[CompanyKey] = @companyKey,
	[Title] = @title,
	[PromotionCode] = @promotionCode,
	[Amount] = @amount,
	[Percentage] = @percentage,
	[StartDate] = @startDate,
	[EndDate] = @endDate,
	[LastModificationTime] = @lastModificationTime
WHERE [Promotion].[PromotionKey] = @promotionKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Property_DeleteOneByPropertyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Property_DeleteOneByPropertyKey]
	@propertyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Property]
WHERE [Property].[PropertyKey] = @propertyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Property_DeleteOneByResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
create PROCEDURE [dbo].[gensp_Property_DeleteOneByResourceKey]
	@PropertyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Property]
WHERE [Property].[PropertyKey] = @PropertyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[gensp_Property_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Property_InsertOne]
	@companyKey INT,
	@title VARCHAR(150),
	@numberOfUnits INT,
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@bidRequestAmount MONEY,
	@minimumInsuranceAmount MONEY,
	@description VARCHAR(MAX),
	@status INT,
	@propertyKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Property]
(
	[CompanyKey],
	[Title],
	[NumberOfUnits],
	[Address],
	[Address2],
	[City],
	[State],
	[Zip],
	[BidRequestAmount],
	[MinimumInsuranceAmount],
	[Description],
	[Status]
)
VALUES
(
	@companyKey,
	@title,
	@numberOfUnits,
	@address,
	@address2,
	@city,
	@state,
	@zip,
	@bidRequestAmount,
	@minimumInsuranceAmount,
	@description,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @propertyKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Property_SelectOneByPropertyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Property_SelectOneByPropertyKey]
	@propertyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Property].[PropertyKey], 
	[Property].[CompanyKey], 
	[Property].[Title], 
	[Property].[NumberOfUnits], 
	[Property].[Address], 
	[Property].[Address2], 
	[Property].[City], 
	[Property].[State], 
	[Property].[Zip], 
	[Property].[BidRequestAmount], 
	[Property].[MinimumInsuranceAmount], 
	[Property].[Description], 
	[Property].[Status] 
FROM
	[Property] 
WHERE [Property].[PropertyKey] = @propertyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Property_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Property_SelectSomeBySearch]
	@companyKey INT = 0,
	@state VARCHAR(2) = '',
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Property].[PropertyKey], 
	[Property].[CompanyKey], 
	[Property].[Title], 
	[Property].[NumberOfUnits], 
	[Property].[Address], 
	[Property].[Address2], 
	[Property].[City], 
	[Property].[State], 
	[Property].[Zip], 
	[Property].[BidRequestAmount], 
	[Property].[MinimumInsuranceAmount], 
	[Property].[Description], 
	[Property].[Status] 
FROM
	[Property] 
WHERE ([Property].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([Property].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Property].[Status] & ISNULL(@status, 7) = [Property].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Property_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Property_SelectSomeBySearchAndPaging]
	@companyKey INT = 0,
	@state VARCHAR(2) = '',
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Property].[PropertyKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Property].[PropertyKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @companyKey INT, @state VARCHAR(2), @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Property] 
WHERE ([Property].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([Property].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Property].[Status] & ISNULL(@status, 7) = [Property].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Property].[PropertyKey], ' +
		'		[Property].[CompanyKey], ' +
		'		[Property].[Title], ' +
		'		[Property].[NumberOfUnits], ' +
		'		[Property].[Address], ' +
		'		[Property].[Address2], ' +
		'		[Property].[City], ' +
		'		[Property].[State], ' +
		'		[Property].[Zip], ' +
		'		[Property].[BidRequestAmount], ' +
		'		[Property].[MinimumInsuranceAmount], ' +
		'		[Property].[Description], ' +
		'		[Property].[Status] ' +
		'	FROM [Property]  ' + 
		'	WHERE ([Property].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0) ' +
		'	AND ([Property].[State] LIKE @state OR @state IS NULL OR @state = '''') ' +
		'	AND ([Property].[Status] & ISNULL(@status, 7) = [Property].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @companyKey, @state, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Property_UpdateOneByPropertyKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Property_UpdateOneByPropertyKey]
	@propertyKey INT,
	@companyKey INT,
	@title VARCHAR(150),
	@numberOfUnits INT,
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@bidRequestAmount MONEY,
	@minimumInsuranceAmount MONEY,
	@description VARCHAR(MAX),
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Property]
SET
	[CompanyKey] = @companyKey,
	[Title] = @title,
	[NumberOfUnits] = @numberOfUnits,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[BidRequestAmount] = @bidRequestAmount,
	[MinimumInsuranceAmount] = @minimumInsuranceAmount,
	[Description] = @description,
	[Status] = @status
WHERE [Property].[PropertyKey] = @propertyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyResource_DeleteOneByPropertyResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyResource_DeleteOneByPropertyResourceKey]
	@propertyResourceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [PropertyResource]
WHERE [PropertyResource].[PropertyResourceKey] = @propertyResourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyResource_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyResource_InsertOne]
	@propertyKey INT,
	@resourceKey INT,
	@dateAdded DATETIME,
	@status INT,
	@propertyResourceKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [PropertyResource]
(
	[PropertyKey],
	[ResourceKey],
	[DateAdded],
	[Status]
)
VALUES
(
	@propertyKey,
	@resourceKey,
	@dateAdded,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @propertyResourceKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyResource_SelectOneByPropertyResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyResource_SelectOneByPropertyResourceKey]
	@propertyResourceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[PropertyResource].[PropertyResourceKey], 
	[PropertyResource].[PropertyKey], 
	[PropertyResource].[ResourceKey], 
	[PropertyResource].[DateAdded], 
	[PropertyResource].[Status] 
FROM
	[PropertyResource] 
WHERE [PropertyResource].[PropertyResourceKey] = @propertyResourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyResource_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyResource_SelectSomeBySearch]
	@propertyKey INT = 0,
	@resourceKey INT = 0,
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[PropertyResource].[PropertyResourceKey], 
	[PropertyResource].[PropertyKey], 
	[PropertyResource].[ResourceKey], 
	[PropertyResource].[DateAdded], 
	[PropertyResource].[Status] 
FROM
	[PropertyResource] 
WHERE ([PropertyResource].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0)
AND ([PropertyResource].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([PropertyResource].[Status] & ISNULL(@status, 7) = [PropertyResource].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyResource_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyResource_SelectSomeBySearchAndPaging]
	@propertyKey INT = 0,
	@resourceKey INT = 0,
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[PropertyResource].[PropertyResourceKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [PropertyResource].[PropertyResourceKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @propertyKey INT, @resourceKey INT, @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[PropertyResource] 
WHERE ([PropertyResource].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0)
AND ([PropertyResource].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([PropertyResource].[Status] & ISNULL(@status, 7) = [PropertyResource].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[PropertyResource].[PropertyResourceKey], ' +
		'		[PropertyResource].[PropertyKey], ' +
		'		[PropertyResource].[ResourceKey], ' +
		'		[PropertyResource].[DateAdded], ' +
		'		[PropertyResource].[Status] ' +
		'	FROM [PropertyResource]  ' + 
		'	WHERE ([PropertyResource].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0) ' +
		'	AND ([PropertyResource].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([PropertyResource].[Status] & ISNULL(@status, 7) = [PropertyResource].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @propertyKey, @resourceKey, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyResource_UpdateOneByPropertyResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyResource_UpdateOneByPropertyResourceKey]
	@propertyResourceKey INT,
	@propertyKey INT,
	@resourceKey INT,
	@dateAdded DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [PropertyResource]
SET
	[PropertyKey] = @propertyKey,
	[ResourceKey] = @resourceKey,
	[DateAdded] = @dateAdded,
	[Status] = @status
WHERE [PropertyResource].[PropertyResourceKey] = @propertyResourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyVendorDistance_DeleteOneByPropertyVendorDistanceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyVendorDistance_DeleteOneByPropertyVendorDistanceKey]
	@propertyVendorDistanceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [PropertyVendorDistance]
WHERE [PropertyVendorDistance].[PropertyVendorDistanceKey] = @propertyVendorDistanceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyVendorDistance_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyVendorDistance_InsertOne]
	@propertyKey INT,
	@vendorKey INT,
	@distance FLOAT(53),
	@lastModificationTime DATETIME,
	@propertyVendorDistanceKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [PropertyVendorDistance]
(
	[PropertyKey],
	[VendorKey],
	[Distance],
	[LastModificationTime]
)
VALUES
(
	@propertyKey,
	@vendorKey,
	@distance,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @propertyVendorDistanceKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyVendorDistance_SelectOneByPropertyVendorDistanceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyVendorDistance_SelectOneByPropertyVendorDistanceKey]
	@propertyVendorDistanceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[PropertyVendorDistance].[PropertyVendorDistanceKey], 
	[PropertyVendorDistance].[PropertyKey], 
	[PropertyVendorDistance].[VendorKey], 
	[PropertyVendorDistance].[Distance], 
	[PropertyVendorDistance].[LastModificationTime] 
FROM
	[PropertyVendorDistance] 
WHERE [PropertyVendorDistance].[PropertyVendorDistanceKey] = @propertyVendorDistanceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyVendorDistance_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyVendorDistance_SelectSomeBySearch]
	@propertyKey INT = 0,
	@vendorKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[PropertyVendorDistance].[PropertyVendorDistanceKey], 
	[PropertyVendorDistance].[PropertyKey], 
	[PropertyVendorDistance].[VendorKey], 
	[PropertyVendorDistance].[Distance], 
	[PropertyVendorDistance].[LastModificationTime] 
FROM
	[PropertyVendorDistance] 
WHERE ([PropertyVendorDistance].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0)
AND ([PropertyVendorDistance].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyVendorDistance_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyVendorDistance_SelectSomeBySearchAndPaging]
	@propertyKey INT = 0,
	@vendorKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[PropertyVendorDistance].[PropertyVendorDistanceKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [PropertyVendorDistance].[PropertyVendorDistanceKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @propertyKey INT, @vendorKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[PropertyVendorDistance] 
WHERE ([PropertyVendorDistance].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0)
AND ([PropertyVendorDistance].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[PropertyVendorDistance].[PropertyVendorDistanceKey], ' +
		'		[PropertyVendorDistance].[PropertyKey], ' +
		'		[PropertyVendorDistance].[VendorKey], ' +
		'		[PropertyVendorDistance].[Distance], ' +
		'		[PropertyVendorDistance].[LastModificationTime] ' +
		'	FROM [PropertyVendorDistance]  ' + 
		'	WHERE ([PropertyVendorDistance].[PropertyKey] = @propertyKey OR @propertyKey IS NULL OR @propertyKey = 0) ' +
		'	AND ([PropertyVendorDistance].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @propertyKey, @vendorKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_PropertyVendorDistance_UpdateOneByPropertyVendorDistanceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_PropertyVendorDistance_UpdateOneByPropertyVendorDistanceKey]
	@propertyVendorDistanceKey INT,
	@propertyKey INT,
	@vendorKey INT,
	@distance FLOAT(53),
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [PropertyVendorDistance]
SET
	[PropertyKey] = @propertyKey,
	[VendorKey] = @vendorKey,
	[Distance] = @distance,
	[LastModificationTime] = @lastModificationTime
WHERE [PropertyVendorDistance].[PropertyVendorDistanceKey] = @propertyVendorDistanceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Reminder_DeleteOneByReminderKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Reminder_DeleteOneByReminderKey]
	@reminderKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Reminder]
WHERE [Reminder].[ReminderKey] = @reminderKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Reminder_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Reminder_InsertOne]
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@description VARCHAR(MAX),
	@reminderDate SMALLDATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@reminderKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Reminder]
(
	[ModuleKey],
	[ResourceKey],
	[ObjectKey],
	[Description],
	[ReminderDate],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@moduleKey,
	@resourceKey,
	@objectKey,
	@description,
	@reminderDate,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @reminderKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Reminder_SelectOneByReminderKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Reminder_SelectOneByReminderKey]
	@reminderKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Reminder].[ReminderKey], 
	[Reminder].[ModuleKey], 
	[Reminder].[ResourceKey], 
	[Reminder].[ObjectKey], 
	[Reminder].[Description], 
	[Reminder].[ReminderDate], 
	[Reminder].[LastModificationTime], 
	[Reminder].[Status] 
FROM
	[Reminder] 
WHERE [Reminder].[ReminderKey] = @reminderKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Reminder_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Reminder_SelectSomeBySearch]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Reminder].[ReminderKey], 
	[Reminder].[ModuleKey], 
	[Reminder].[ResourceKey], 
	[Reminder].[ObjectKey], 
	[Reminder].[Description], 
	[Reminder].[ReminderDate], 
	[Reminder].[LastModificationTime], 
	[Reminder].[Status] 
FROM
	[Reminder] 
WHERE ([Reminder].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Reminder].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Reminder].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Reminder].[Status] & ISNULL(@status, 7) = [Reminder].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Reminder_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Reminder_SelectSomeBySearchAndPaging]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@objectKey INT = 0,
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Reminder].[ReminderKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Reminder].[ReminderKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @moduleKey INT, @resourceKey INT, @objectKey INT, @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Reminder] 
WHERE ([Reminder].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Reminder].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Reminder].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Reminder].[Status] & ISNULL(@status, 7) = [Reminder].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Reminder].[ReminderKey], ' +
		'		[Reminder].[ModuleKey], ' +
		'		[Reminder].[ResourceKey], ' +
		'		[Reminder].[ObjectKey], ' +
		'		[Reminder].[Description], ' +
		'		[Reminder].[ReminderDate], ' +
		'		[Reminder].[LastModificationTime], ' +
		'		[Reminder].[Status] ' +
		'	FROM [Reminder]  ' + 
		'	WHERE ([Reminder].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'	AND ([Reminder].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([Reminder].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0) ' +
		'	AND ([Reminder].[Status] & ISNULL(@status, 7) = [Reminder].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @moduleKey, @resourceKey, @objectKey, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Reminder_UpdateOneByReminderKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Reminder_UpdateOneByReminderKey]
	@reminderKey INT,
	@moduleKey INT,
	@resourceKey INT,
	@objectKey INT,
	@description VARCHAR(MAX),
	@reminderDate SMALLDATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Reminder]
SET
	[ModuleKey] = @moduleKey,
	[ResourceKey] = @resourceKey,
	[ObjectKey] = @objectKey,
	[Description] = @description,
	[ReminderDate] = @reminderDate,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Reminder].[ReminderKey] = @reminderKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Resource_DeleteOneByResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Resource_DeleteOneByResourceKey]
	@resourceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Resource]
WHERE [Resource].[ResourceKey] = @resourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Resource_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Resource_InsertOne]
	@companyKey INT,
	@resourceTypeKey INT,
	@firstName VARCHAR(50),
	@lastName VARCHAR(50),
	@title VARCHAR(150),
	@email VARCHAR(150),
	@email2 VARCHAR(150),
	@cellPhone VARCHAR(50),
	@homePhone VARCHAR(50),
	@homePhone2 VARCHAR(50),
	@work VARCHAR(50),
	@work2 VARCHAR(50),
	@fax VARCHAR(50),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@primaryContact BIT,
	@description VARCHAR(MAX),
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@resourceKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Resource]
(
	[CompanyKey],
	[ResourceTypeKey],
	[FirstName],
	[LastName],
	[Title],
	[Email],
	[Email2],
	[CellPhone],
	[HomePhone],
	[HomePhone2],
	[Work],
	[Work2],
	[Fax],
	[Address],
	[Address2],
	[City],
	[State],
	[Zip],
	[PrimaryContact],
	[Description],
	[DateAdded],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@companyKey,
	@resourceTypeKey,
	@firstName,
	@lastName,
	@title,
	@email,
	@email2,
	@cellPhone,
	@homePhone,
	@homePhone2,
	@work,
	@work2,
	@fax,
	@address,
	@address2,
	@city,
	@state,
	@zip,
	@primaryContact,
	@description,
	@dateAdded,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @resourceKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Resource_SelectOneByResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Resource_SelectOneByResourceKey]
	@resourceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Resource].[ResourceKey], 
	[Resource].[CompanyKey], 
	[Resource].[ResourceTypeKey], 
	[Resource].[FirstName], 
	[Resource].[LastName], 
	[Resource].[Title], 
	[Resource].[Email], 
	[Resource].[Email2], 
	[Resource].[CellPhone], 
	[Resource].[HomePhone], 
	[Resource].[HomePhone2], 
	[Resource].[Work], 
	[Resource].[Work2], 
	[Resource].[Fax], 
	[Resource].[Address], 
	[Resource].[Address2], 
	[Resource].[City], 
	[Resource].[State], 
	[Resource].[Zip], 
	[Resource].[PrimaryContact], 
	[Resource].[Description], 
	[Resource].[DateAdded], 
	[Resource].[LastModificationTime], 
	[Resource].[Status] 
FROM
	[Resource] 
WHERE [Resource].[ResourceKey] = @resourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Resource_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Resource_SelectSomeBySearch]
	@companyKey INT = 0,
	@resourceTypeKey INT = 0,
	@state VARCHAR(2) = '',
	@status INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Resource].[ResourceKey], 
	[Resource].[CompanyKey], 
	[Resource].[ResourceTypeKey], 
	[Resource].[FirstName], 
	[Resource].[LastName], 
	[Resource].[Title], 
	[Resource].[Email], 
	[Resource].[Email2], 
	[Resource].[CellPhone], 
	[Resource].[HomePhone], 
	[Resource].[HomePhone2], 
	[Resource].[Work], 
	[Resource].[Work2], 
	[Resource].[Fax], 
	[Resource].[Address], 
	[Resource].[Address2], 
	[Resource].[City], 
	[Resource].[State], 
	[Resource].[Zip], 
	[Resource].[PrimaryContact], 
	[Resource].[Description], 
	[Resource].[DateAdded], 
	[Resource].[LastModificationTime], 
	[Resource].[Status] 
FROM
	[Resource] 
WHERE ([Resource].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([Resource].[ResourceTypeKey] = @resourceTypeKey OR @resourceTypeKey IS NULL OR @resourceTypeKey = 0)
AND ([Resource].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Resource].[Status] & ISNULL(@status, 7) = [Resource].[Status])

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Resource_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Resource_SelectSomeBySearchAndPaging]
	@companyKey INT = 0,
	@resourceTypeKey INT = 0,
	@state VARCHAR(2) = '',
	@status INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Resource].[ResourceKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Resource].[ResourceKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @companyKey INT, @resourceTypeKey INT, @state VARCHAR(2), @status INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Resource] 
WHERE ([Resource].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([Resource].[ResourceTypeKey] = @resourceTypeKey OR @resourceTypeKey IS NULL OR @resourceTypeKey = 0)
AND ([Resource].[State] LIKE @state OR @state IS NULL OR @state = '')
AND ([Resource].[Status] & ISNULL(@status, 7) = [Resource].[Status])

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Resource].[ResourceKey], ' +
		'		[Resource].[CompanyKey], ' +
		'		[Resource].[ResourceTypeKey], ' +
		'		[Resource].[FirstName], ' +
		'		[Resource].[LastName], ' +
		'		[Resource].[Title], ' +
		'		[Resource].[Email], ' +
		'		[Resource].[Email2], ' +
		'		[Resource].[CellPhone], ' +
		'		[Resource].[HomePhone], ' +
		'		[Resource].[HomePhone2], ' +
		'		[Resource].[Work], ' +
		'		[Resource].[Work2], ' +
		'		[Resource].[Fax], ' +
		'		[Resource].[Address], ' +
		'		[Resource].[Address2], ' +
		'		[Resource].[City], ' +
		'		[Resource].[State], ' +
		'		[Resource].[Zip], ' +
		'		[Resource].[PrimaryContact], ' +
		'		[Resource].[Description], ' +
		'		[Resource].[DateAdded], ' +
		'		[Resource].[LastModificationTime], ' +
		'		[Resource].[Status] ' +
		'	FROM [Resource]  ' + 
		'	WHERE ([Resource].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0) ' +
		'	AND ([Resource].[ResourceTypeKey] = @resourceTypeKey OR @resourceTypeKey IS NULL OR @resourceTypeKey = 0) ' +
		'	AND ([Resource].[State] LIKE @state OR @state IS NULL OR @state = '''') ' +
		'	AND ([Resource].[Status] & ISNULL(@status, 7) = [Resource].[Status]) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @companyKey, @resourceTypeKey, @state, @status

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Resource_UpdateOneByResourceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Resource_UpdateOneByResourceKey]
	@resourceKey INT,
	@companyKey INT,
	@resourceTypeKey INT,
	@firstName VARCHAR(50),
	@lastName VARCHAR(50),
	@title VARCHAR(150),
	@email VARCHAR(150),
	@email2 VARCHAR(150),
	@cellPhone VARCHAR(50),
	@homePhone VARCHAR(50),
	@homePhone2 VARCHAR(50),
	@work VARCHAR(50),
	@work2 VARCHAR(50),
	@fax VARCHAR(50),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@primaryContact BIT,
	@description VARCHAR(MAX),
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Resource]
SET
	[CompanyKey] = @companyKey,
	[ResourceTypeKey] = @resourceTypeKey,
	[FirstName] = @firstName,
	[LastName] = @lastName,
	[Title] = @title,
	[Email] = @email,
	[Email2] = @email2,
	[CellPhone] = @cellPhone,
	[HomePhone] = @homePhone,
	[HomePhone2] = @homePhone2,
	[Work] = @work,
	[Work2] = @work2,
	[Fax] = @fax,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[PrimaryContact] = @primaryContact,
	[Description] = @description,
	[DateAdded] = @dateAdded,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [Resource].[ResourceKey] = @resourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Service_DeleteOneByServiceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Service_DeleteOneByServiceKey]
	@serviceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Service]
WHERE [Service].[ServiceKey] = @serviceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Service_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Service_InsertOne]
	@parentServiceKey INT,
	@title VARCHAR(150),
	@tags VARCHAR(MAX),
	@serviceKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Service]
(
	[ParentServiceKey],
	[Title],
	[Tags]
)
VALUES
(
	@parentServiceKey,
	@title,
	@tags
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @serviceKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Service_SelectOneByServiceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Service_SelectOneByServiceKey]
	@serviceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Service].[ServiceKey], 
	[Service].[ParentServiceKey], 
	[Service].[Title], 
	[Service].[Tags] 
FROM
	[Service] 
WHERE [Service].[ServiceKey] = @serviceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Service_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Service_SelectSomeBySearch]
	@parentServiceKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Service].[ServiceKey], 
	[Service].[ParentServiceKey], 
	[Service].[Title], 
	[Service].[Tags] 
FROM
	[Service] 
WHERE ([Service].[ParentServiceKey] = @parentServiceKey OR @parentServiceKey IS NULL OR @parentServiceKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Service_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Service_SelectSomeBySearchAndPaging]
	@parentServiceKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Service].[ServiceKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Service].[ServiceKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @parentServiceKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Service] 
WHERE ([Service].[ParentServiceKey] = @parentServiceKey OR @parentServiceKey IS NULL OR @parentServiceKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Service].[ServiceKey], ' +
		'		[Service].[ParentServiceKey], ' +
		'		[Service].[Title], ' +
		'		[Service].[Tags] ' +
		'	FROM [Service]  ' + 
		'	WHERE ([Service].[ParentServiceKey] = @parentServiceKey OR @parentServiceKey IS NULL OR @parentServiceKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @parentServiceKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Service_UpdateOneByServiceKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Service_UpdateOneByServiceKey]
	@serviceKey INT,
	@parentServiceKey INT,
	@title VARCHAR(150),
	@tags VARCHAR(MAX),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Service]
SET
	[ParentServiceKey] = @parentServiceKey,
	[Title] = @title,
	[Tags] = @tags
WHERE [Service].[ServiceKey] = @serviceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ServiceArea_DeleteOneByServiceAreaKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ServiceArea_DeleteOneByServiceAreaKey]
	@serviceAreaKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [ServiceArea]
WHERE [ServiceArea].[ServiceAreaKey] = @serviceAreaKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ServiceArea_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ServiceArea_InsertOne]
	@vendorKey INT,
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@latitude FLOAT(53),
	@longitude FLOAT(53),
	@radius INT,
	@serviceAreaKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [ServiceArea]
(
	[VendorKey],
	[Address],
	[Address2],
	[City],
	[State],
	[Zip],
	[Latitude],
	[Longitude],
	[Radius]
)
VALUES
(
	@vendorKey,
	@address,
	@address2,
	@city,
	@state,
	@zip,
	@latitude,
	@longitude,
	@radius
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @serviceAreaKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_ServiceArea_SelectOneByServiceAreaKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ServiceArea_SelectOneByServiceAreaKey]
	@serviceAreaKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[ServiceArea].[ServiceAreaKey], 
	[ServiceArea].[VendorKey], 
	[ServiceArea].[Address], 
	[ServiceArea].[Address2], 
	[ServiceArea].[City], 
	[ServiceArea].[State], 
	[ServiceArea].[Zip], 
	[ServiceArea].[Latitude], 
	[ServiceArea].[Longitude], 
	[ServiceArea].[Radius] 
FROM
	[ServiceArea] 
WHERE [ServiceArea].[ServiceAreaKey] = @serviceAreaKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ServiceArea_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ServiceArea_SelectSomeBySearch]
	@vendorKey INT = 0,
	@state VARCHAR(2) = '',
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[ServiceArea].[ServiceAreaKey], 
	[ServiceArea].[VendorKey], 
	[ServiceArea].[Address], 
	[ServiceArea].[Address2], 
	[ServiceArea].[City], 
	[ServiceArea].[State], 
	[ServiceArea].[Zip], 
	[ServiceArea].[Latitude], 
	[ServiceArea].[Longitude], 
	[ServiceArea].[Radius] 
FROM
	[ServiceArea] 
WHERE ([ServiceArea].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([ServiceArea].[State] LIKE @state OR @state IS NULL OR @state = '')

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_ServiceArea_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ServiceArea_SelectSomeBySearchAndPaging]
	@vendorKey INT = 0,
	@state VARCHAR(2) = '',
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[ServiceArea].[ServiceAreaKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [ServiceArea].[ServiceAreaKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @vendorKey INT, @state VARCHAR(2)'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[ServiceArea] 
WHERE ([ServiceArea].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([ServiceArea].[State] LIKE @state OR @state IS NULL OR @state = '')

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[ServiceArea].[ServiceAreaKey], ' +
		'		[ServiceArea].[VendorKey], ' +
		'		[ServiceArea].[Address], ' +
		'		[ServiceArea].[Address2], ' +
		'		[ServiceArea].[City], ' +
		'		[ServiceArea].[State], ' +
		'		[ServiceArea].[Zip], ' +
		'		[ServiceArea].[Latitude], ' +
		'		[ServiceArea].[Longitude], ' +
		'		[ServiceArea].[Radius] ' +
		'	FROM [ServiceArea]  ' + 
		'	WHERE ([ServiceArea].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([ServiceArea].[State] LIKE @state OR @state IS NULL OR @state = '''') ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @vendorKey, @state

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_ServiceArea_UpdateOneByServiceAreaKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_ServiceArea_UpdateOneByServiceAreaKey]
	@serviceAreaKey INT,
	@vendorKey INT,
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@latitude FLOAT(53),
	@longitude FLOAT(53),
	@radius INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [ServiceArea]
SET
	[VendorKey] = @vendorKey,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[Latitude] = @latitude,
	[Longitude] = @longitude,
	[Radius] = @radius
WHERE [ServiceArea].[ServiceAreaKey] = @serviceAreaKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Session_DeleteOneBySessionKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Session_DeleteOneBySessionKey]
	@sessionKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Session]
WHERE [Session].[SessionKey] = @sessionKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Session_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Session_InsertOne]
	@sessionID UNIQUEIDENTIFIER,
	@salt VARCHAR(150),
	@data VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@sessionKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Session]
(
	[SessionID],
	[Salt],
	[Data],
	[LastModificationTime]
)
VALUES
(
	@sessionID,
	@salt,
	@data,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @sessionKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Session_SelectOneBySessionKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Session_SelectOneBySessionKey]
	@sessionKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Session].[SessionKey], 
	[Session].[SessionID], 
	[Session].[Salt], 
	[Session].[Data], 
	[Session].[LastModificationTime] 
FROM
	[Session] 
WHERE [Session].[SessionKey] = @sessionKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Session_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Session_SelectSomeBySearch]
	@sessionID UNIQUEIDENTIFIER = '00000000-0000-0000-0000-000000000000',
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Session].[SessionKey], 
	[Session].[SessionID], 
	[Session].[Salt], 
	[Session].[Data], 
	[Session].[LastModificationTime] 
FROM
	[Session] 
WHERE ([Session].[SessionID] = @sessionID OR @sessionID IS NULL OR @sessionID = '00000000-0000-0000-0000-000000000000')

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Session_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Session_SelectSomeBySearchAndPaging]
	@sessionID UNIQUEIDENTIFIER = '00000000-0000-0000-0000-000000000000',
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Session].[SessionKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Session].[SessionKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @sessionID UNIQUEIDENTIFIER'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Session] 
WHERE ([Session].[SessionID] = @sessionID OR @sessionID IS NULL OR @sessionID = '00000000-0000-0000-0000-000000000000')

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Session].[SessionKey], ' +
		'		[Session].[SessionID], ' +
		'		[Session].[Salt], ' +
		'		[Session].[Data], ' +
		'		[Session].[LastModificationTime] ' +
		'	FROM [Session]  ' + 
		'	WHERE ([Session].[SessionID] = @sessionID OR @sessionID IS NULL) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @sessionID

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Session_UpdateOneBySessionKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Session_UpdateOneBySessionKey]
	@sessionKey INT,
	@sessionID UNIQUEIDENTIFIER,
	@salt VARCHAR(150),
	@data VARCHAR(MAX),
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Session]
SET
	[SessionID] = @sessionID,
	[Salt] = @salt,
	[Data] = @data,
	[LastModificationTime] = @lastModificationTime
WHERE [Session].[SessionKey] = @sessionKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_State_DeleteOneByStateKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_State_DeleteOneByStateKey]
	@stateKey VARCHAR(2),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [State]
WHERE [State].[StateKey] = @stateKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_State_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_State_InsertOne]
	@stateKey VARCHAR(2),
	@title VARCHAR(150),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [State]
(
	[StateKey],
	[Title]
)
VALUES
(
	@stateKey,
	@title
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_State_SelectOneByStateKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_State_SelectOneByStateKey]
	@stateKey VARCHAR(2),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[State].[StateKey], 
	[State].[Title] 
FROM
	[State] 
WHERE [State].[StateKey] = @stateKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_State_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_State_SelectSomeBySearch]
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[State].[StateKey], 
	[State].[Title] 
FROM
	[State] 

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_State_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_State_SelectSomeBySearchAndPaging]
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[State].[StateKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [State].[StateKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[State] 

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[State].[StateKey], ' +
		'		[State].[Title] ' +
		'	FROM [State]  ' + 
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_State_UpdateOneByStateKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_State_UpdateOneByStateKey]
	@stateKey VARCHAR(2),
	@title VARCHAR(150),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [State]
SET
	[Title] = @title
WHERE [State].[StateKey] = @stateKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Task_DeleteOneByTaskKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Task_DeleteOneByTaskKey]
	@taskKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Task]
WHERE [Task].[TaskKey] = @taskKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Task_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Task_InsertOne]
	@moduleKey INT,
	@resourceKey INT,
	@assignedToKey INT,
	@objectKey INT,
	@subject VARCHAR(150),
	@taskStatus INT,
	@taskPriority INT,
	@dueDate SMALLDATETIME,
	@startDate SMALLDATETIME,
	@description VARCHAR(MAX),
	@dateAdded DATETIME,
	@dateCompleted DATETIME,
	@lastModificationTime DATETIME,
	@taskKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Task]
(
	[ModuleKey],
	[ResourceKey],
	[AssignedToKey],
	[ObjectKey],
	[Subject],
	[TaskStatus],
	[TaskPriority],
	[DueDate],
	[StartDate],
	[Description],
	[DateAdded],
	[DateCompleted],
	[LastModificationTime]
)
VALUES
(
	@moduleKey,
	@resourceKey,
	@assignedToKey,
	@objectKey,
	@subject,
	@taskStatus,
	@taskPriority,
	@dueDate,
	@startDate,
	@description,
	@dateAdded,
	@dateCompleted,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @taskKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_Task_SelectOneByTaskKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Task_SelectOneByTaskKey]
	@taskKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Task].[TaskKey], 
	[Task].[ModuleKey], 
	[Task].[ResourceKey], 
	[Task].[AssignedToKey], 
	[Task].[ObjectKey], 
	[Task].[Subject], 
	[Task].[TaskStatus], 
	[Task].[TaskPriority], 
	[Task].[DueDate], 
	[Task].[StartDate], 
	[Task].[Description], 
	[Task].[DateAdded], 
	[Task].[DateCompleted], 
	[Task].[LastModificationTime] 
FROM
	[Task] 
WHERE [Task].[TaskKey] = @taskKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Task_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Task_SelectSomeBySearch]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@assignedToKey INT = 0,
	@objectKey INT = 0,
	@taskStatus INT = 0,
	@taskPriority INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Task].[TaskKey], 
	[Task].[ModuleKey], 
	[Task].[ResourceKey], 
	[Task].[AssignedToKey], 
	[Task].[ObjectKey], 
	[Task].[Subject], 
	[Task].[TaskStatus], 
	[Task].[TaskPriority], 
	[Task].[DueDate], 
	[Task].[StartDate], 
	[Task].[Description], 
	[Task].[DateAdded], 
	[Task].[DateCompleted], 
	[Task].[LastModificationTime] 
FROM
	[Task] 
WHERE ([Task].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Task].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Task].[AssignedToKey] = @assignedToKey OR @assignedToKey IS NULL OR @assignedToKey = 0)
AND ([Task].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Task].[TaskStatus] & @taskStatus = [Task].[TaskStatus] OR @taskStatus IS NULL OR @taskStatus = 0)
AND ([Task].[TaskPriority] & @taskPriority = [Task].[TaskPriority] OR @taskPriority IS NULL OR @taskPriority = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_Task_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Task_SelectSomeBySearchAndPaging]
	@moduleKey INT = 0,
	@resourceKey INT = 0,
	@assignedToKey INT = 0,
	@objectKey INT = 0,
	@taskStatus INT = 0,
	@taskPriority INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[Task].[TaskKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [Task].[TaskKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @moduleKey INT, @resourceKey INT, @assignedToKey INT, @objectKey INT, @taskStatus INT, @taskPriority INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[Task] 
WHERE ([Task].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0)
AND ([Task].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)
AND ([Task].[AssignedToKey] = @assignedToKey OR @assignedToKey IS NULL OR @assignedToKey = 0)
AND ([Task].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0)
AND ([Task].[TaskStatus] & @taskStatus = [Task].[TaskStatus] OR @taskStatus IS NULL OR @taskStatus = 0)
AND ([Task].[TaskPriority] & @taskPriority = [Task].[TaskPriority] OR @taskPriority IS NULL OR @taskPriority = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[Task].[TaskKey], ' +
		'		[Task].[ModuleKey], ' +
		'		[Task].[ResourceKey], ' +
		'		[Task].[AssignedToKey], ' +
		'		[Task].[ObjectKey], ' +
		'		[Task].[Subject], ' +
		'		[Task].[TaskStatus], ' +
		'		[Task].[TaskPriority], ' +
		'		[Task].[DueDate], ' +
		'		[Task].[StartDate], ' +
		'		[Task].[Description], ' +
		'		[Task].[DateAdded], ' +
		'		[Task].[DateCompleted], ' +
		'		[Task].[LastModificationTime] ' +
		'	FROM [Task]  ' + 
		'	WHERE ([Task].[ModuleKey] = @moduleKey OR @moduleKey IS NULL OR @moduleKey = 0) ' +
		'	AND ([Task].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		'	AND ([Task].[AssignedToKey] = @assignedToKey OR @assignedToKey IS NULL OR @assignedToKey = 0) ' +
		'	AND ([Task].[ObjectKey] = @objectKey OR @objectKey IS NULL OR @objectKey = 0) ' +
		'	AND ([Task].[TaskStatus] & @taskStatus = [Task].[TaskStatus] OR @taskStatus IS NULL OR @taskStatus = 0) ' +
		'	AND ([Task].[TaskPriority] & @taskPriority = [Task].[TaskPriority] OR @taskPriority IS NULL OR @taskPriority = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @moduleKey, @resourceKey, @assignedToKey, @objectKey, @taskStatus, @taskPriority

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_Task_UpdateOneByTaskKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_Task_UpdateOneByTaskKey]
	@taskKey INT,
	@moduleKey INT,
	@resourceKey INT,
	@assignedToKey INT,
	@objectKey INT,
	@subject VARCHAR(150),
	@taskStatus INT,
	@taskPriority INT,
	@dueDate SMALLDATETIME,
	@startDate SMALLDATETIME,
	@description VARCHAR(MAX),
	@dateAdded DATETIME,
	@dateCompleted DATETIME,
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Task]
SET
	[ModuleKey] = @moduleKey,
	[ResourceKey] = @resourceKey,
	[AssignedToKey] = @assignedToKey,
	[ObjectKey] = @objectKey,
	[Subject] = @subject,
	[TaskStatus] = @taskStatus,
	[TaskPriority] = @taskPriority,
	[DueDate] = @dueDate,
	[StartDate] = @startDate,
	[Description] = @description,
	[DateAdded] = @dateAdded,
	[DateCompleted] = @dateCompleted,
	[LastModificationTime] = @lastModificationTime
WHERE [Task].[TaskKey] = @taskKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_User_DeleteOneByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_User_DeleteOneByUserKey]
	@userKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [User]
WHERE [User].[UserKey] = @userKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_User_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_User_InsertOne]
	@resourceKey INT,
	@username VARCHAR(150),
	@password VARCHAR(256),
	@tokenReset VARCHAR(256),
	@resetExpirationDate DATETIME,
	@accountLocked BIT,
	@firstTimeAccess BIT,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@userKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [User]
(
	[ResourceKey],
	[Username],
	[Password],
	[TokenReset],
	[ResetExpirationDate],
	[AccountLocked],
	[FirstTimeAccess],
	[DateAdded],
	[LastModificationTime],
	[Status]
)
VALUES
(
	@resourceKey,
	@username,
	@password,
	@tokenReset,
	@resetExpirationDate,
	@accountLocked,
	@firstTimeAccess,
	@dateAdded,
	@lastModificationTime,
	@status
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @userKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_User_SelectOneByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_User_SelectOneByUserKey]
	@userKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[User].[UserKey], 
	[User].[ResourceKey], 
	[User].[Username], 
	[User].[Password], 
	[User].[TokenReset], 
	[User].[ResetExpirationDate], 
	[User].[AccountLocked], 
	[User].[FirstTimeAccess], 
	[User].[DateAdded], 
	[User].[LastModificationTime], 
	[User].[Status] 
FROM
	[User] 
WHERE [User].[UserKey] = @userKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_User_UpdateOneByUserKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_User_UpdateOneByUserKey]
	@userKey INT,
	@resourceKey INT,
	@username VARCHAR(150),
	@password VARCHAR(256),
	@tokenReset VARCHAR(256),
	@resetExpirationDate DATETIME,
	@accountLocked BIT,
	@firstTimeAccess BIT,
	@dateAdded DATETIME,
	@lastModificationTime DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [User]
SET
	[ResourceKey] = @resourceKey,
	[Username] = @username,
	[Password] = @password,
	[TokenReset] = @tokenReset,
	[ResetExpirationDate] = @resetExpirationDate,
	[AccountLocked] = @accountLocked,
	[FirstTimeAccess] = @firstTimeAccess,
	[DateAdded] = @dateAdded,
	[LastModificationTime] = @lastModificationTime,
	[Status] = @status
WHERE [User].[UserKey] = @userKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_UserAgreement_DeleteOneByUserAgreementKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_UserAgreement_DeleteOneByUserAgreementKey]
	@userAgreementKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [UserAgreement]
WHERE [UserAgreement].[UserAgreementKey] = @userAgreementKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_UserAgreement_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_UserAgreement_InsertOne]
	@userKey INT,
	@agreementKey INT,
	@dateAdded DATETIME,
	@userAgreementKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [UserAgreement]
(
	[UserKey],
	[AgreementKey],
	[DateAdded]
)
VALUES
(
	@userKey,
	@agreementKey,
	@dateAdded
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @userAgreementKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_UserAgreement_SelectOneByUserAgreementKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_UserAgreement_SelectOneByUserAgreementKey]
	@userAgreementKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[UserAgreement].[UserAgreementKey], 
	[UserAgreement].[UserKey], 
	[UserAgreement].[AgreementKey], 
	[UserAgreement].[DateAdded] 
FROM
	[UserAgreement] 
WHERE [UserAgreement].[UserAgreementKey] = @userAgreementKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_UserAgreement_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_UserAgreement_SelectSomeBySearch]
	@userKey INT = 0,
	@agreementKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[UserAgreement].[UserAgreementKey], 
	[UserAgreement].[UserKey], 
	[UserAgreement].[AgreementKey], 
	[UserAgreement].[DateAdded] 
FROM
	[UserAgreement] 
WHERE ([UserAgreement].[UserKey] = @userKey OR @userKey IS NULL OR @userKey = 0)
AND ([UserAgreement].[AgreementKey] = @agreementKey OR @agreementKey IS NULL OR @agreementKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_UserAgreement_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_UserAgreement_SelectSomeBySearchAndPaging]
	@userKey INT = 0,
	@agreementKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[UserAgreement].[UserAgreementKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [UserAgreement].[UserAgreementKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @userKey INT, @agreementKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[UserAgreement] 
WHERE ([UserAgreement].[UserKey] = @userKey OR @userKey IS NULL OR @userKey = 0)
AND ([UserAgreement].[AgreementKey] = @agreementKey OR @agreementKey IS NULL OR @agreementKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[UserAgreement].[UserAgreementKey], ' +
		'		[UserAgreement].[UserKey], ' +
		'		[UserAgreement].[AgreementKey], ' +
		'		[UserAgreement].[DateAdded] ' +
		'	FROM [UserAgreement]  ' + 
		'	WHERE ([UserAgreement].[UserKey] = @userKey OR @userKey IS NULL OR @userKey = 0) ' +
		'	AND ([UserAgreement].[AgreementKey] = @agreementKey OR @agreementKey IS NULL OR @agreementKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @userKey, @agreementKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_UserAgreement_UpdateOneByUserAgreementKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_UserAgreement_UpdateOneByUserAgreementKey]
	@userAgreementKey INT,
	@userKey INT,
	@agreementKey INT,
	@dateAdded DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [UserAgreement]
SET
	[UserKey] = @userKey,
	[AgreementKey] = @agreementKey,
	[DateAdded] = @dateAdded
WHERE [UserAgreement].[UserAgreementKey] = @userAgreementKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorRating_DeleteOneByVendorRatingKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorRating_DeleteOneByVendorRatingKey]
	@vendorRatingKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [VendorRating]
WHERE [VendorRating].[VendorRatingKey] = @vendorRatingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorRating_InsertOne]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorRating_InsertOne]
	@vendorKey INT,
	@resourceKey INT,
	@ratingOne INT,
	@ratingTwo INT,
	@ratingThree INT,
	@ratingFour INT,
	@ratingFive INT,
	@lastModificationTime DATETIME,
	@vendorRatingKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [VendorRating]
(
	[VendorKey],
	[ResourceKey],
	[RatingOne],
	[RatingTwo],
	[RatingThree],
	[RatingFour],
	[RatingFive],
	[LastModificationTime]
)
VALUES
(
	@vendorKey,
	@resourceKey,
	@ratingOne,
	@ratingTwo,
	@ratingThree,
	@ratingFour,
	@ratingFive,
	@lastModificationTime
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @vendorRatingKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorRating_SelectOneByVendorRatingKey]    Script Date: 1/18/2021 3:48:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorRating_SelectOneByVendorRatingKey]
	@vendorRatingKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[VendorRating].[VendorRatingKey], 
	[VendorRating].[VendorKey], 
	[VendorRating].[ResourceKey], 
	[VendorRating].[RatingOne], 
	[VendorRating].[RatingTwo], 
	[VendorRating].[RatingThree], 
	[VendorRating].[RatingFour], 
	[VendorRating].[RatingFive], 
	[VendorRating].[LastModificationTime] 
FROM
	[VendorRating] 
WHERE [VendorRating].[VendorRatingKey] = @vendorRatingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorRating_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorRating_SelectSomeBySearch]
	@vendorKey INT = 0,
	@resourceKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[VendorRating].[VendorRatingKey], 
	[VendorRating].[VendorKey], 
	[VendorRating].[ResourceKey], 
	[VendorRating].[RatingOne], 
	[VendorRating].[RatingTwo], 
	[VendorRating].[RatingThree], 
	[VendorRating].[RatingFour], 
	[VendorRating].[RatingFive], 
	[VendorRating].[LastModificationTime] 
FROM
	[VendorRating] 
WHERE ([VendorRating].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([VendorRating].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorRating_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorRating_SelectSomeBySearchAndPaging]
	@vendorKey INT = 0,
	@resourceKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[VendorRating].[VendorRatingKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [VendorRating].[VendorRatingKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @vendorKey INT, @resourceKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[VendorRating] 
WHERE ([VendorRating].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([VendorRating].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[VendorRating].[VendorRatingKey], ' +
		'		[VendorRating].[VendorKey], ' +
		'		[VendorRating].[ResourceKey], ' +
		'		[VendorRating].[RatingOne], ' +
		'		[VendorRating].[RatingTwo], ' +
		'		[VendorRating].[RatingThree], ' +
		'		[VendorRating].[RatingFour], ' +
		'		[VendorRating].[RatingFive], ' +
		'		[VendorRating].[LastModificationTime] ' +
		'	FROM [VendorRating]  ' + 
		'	WHERE ([VendorRating].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([VendorRating].[ResourceKey] = @resourceKey OR @resourceKey IS NULL OR @resourceKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @vendorKey, @resourceKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorRating_UpdateOneByVendorRatingKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorRating_UpdateOneByVendorRatingKey]
	@vendorRatingKey INT,
	@vendorKey INT,
	@resourceKey INT,
	@ratingOne INT,
	@ratingTwo INT,
	@ratingThree INT,
	@ratingFour INT,
	@ratingFive INT,
	@lastModificationTime DATETIME,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [VendorRating]
SET
	[VendorKey] = @vendorKey,
	[ResourceKey] = @resourceKey,
	[RatingOne] = @ratingOne,
	[RatingTwo] = @ratingTwo,
	[RatingThree] = @ratingThree,
	[RatingFour] = @ratingFour,
	[RatingFive] = @ratingFive,
	[LastModificationTime] = @lastModificationTime
WHERE [VendorRating].[VendorRatingKey] = @vendorRatingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorService_DeleteOneByVendorServiceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorService_DeleteOneByVendorServiceKey]
	@vendorServiceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [VendorService]
WHERE [VendorService].[VendorServiceKey] = @vendorServiceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorService_InsertOne]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorService_InsertOne]
	@vendorKey INT,
	@serviceKey INT,
	@sortOrder FLOAT(53),
	@vendorServiceKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [VendorService]
(
	[VendorKey],
	[ServiceKey],
	[SortOrder]
)
VALUES
(
	@vendorKey,
	@serviceKey,
	@sortOrder
)
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @vendorServiceKey = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorService_SelectOneByVendorServiceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorService_SelectOneByVendorServiceKey]
	@vendorServiceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[VendorService].[VendorServiceKey], 
	[VendorService].[VendorKey], 
	[VendorService].[ServiceKey], 
	[VendorService].[SortOrder] 
FROM
	[VendorService] 
WHERE [VendorService].[VendorServiceKey] = @vendorServiceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorService_SelectSomeBySearch]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorService_SelectSomeBySearch]
	@vendorKey INT = 0,
	@serviceKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[VendorService].[VendorServiceKey], 
	[VendorService].[VendorKey], 
	[VendorService].[ServiceKey], 
	[VendorService].[SortOrder] 
FROM
	[VendorService] 
WHERE ([VendorService].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([VendorService].[ServiceKey] = @serviceKey OR @serviceKey IS NULL OR @serviceKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorService_SelectSomeBySearchAndPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorService_SelectSomeBySearchAndPaging]
	@vendorKey INT = 0,
	@serviceKey INT = 0,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[VendorService].[VendorServiceKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [VendorService].[VendorServiceKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT, @vendorKey INT, @serviceKey INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[VendorService] 
WHERE ([VendorService].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0)
AND ([VendorService].[ServiceKey] = @serviceKey OR @serviceKey IS NULL OR @serviceKey = 0)

-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[VendorService].[VendorServiceKey], ' +
		'		[VendorService].[VendorKey], ' +
		'		[VendorService].[ServiceKey], ' +
		'		[VendorService].[SortOrder] ' +
		'	FROM [VendorService]  ' + 
		'	WHERE ([VendorService].[VendorKey] = @vendorKey OR @vendorKey IS NULL OR @vendorKey = 0) ' +
		'	AND ([VendorService].[ServiceKey] = @serviceKey OR @serviceKey IS NULL OR @serviceKey = 0) ' +
		') AS FilteredResult ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 

	EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize, @vendorKey, @serviceKey

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END

GO
/****** Object:  StoredProcedure [dbo].[gensp_VendorService_UpdateOneByVendorServiceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[gensp_VendorService_UpdateOneByVendorServiceKey]
	@vendorServiceKey INT,
	@vendorKey INT,
	@serviceKey INT,
	@sortOrder FLOAT(53),
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [VendorService]
SET
	[VendorKey] = @vendorKey,
	[ServiceKey] = @serviceKey,
	[SortOrder] = @sortOrder
WHERE [VendorService].[VendorServiceKey] = @vendorServiceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[sit_VendorManager_BidReq_Select_Paging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- sit_VendorManager_BidReq_Select_Paging 3307,'',50,1,0,0

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[sit_VendorManager_BidReq_Select_Paging]
	@companyKey int,
	@sortOrder varchar(250) = null,
	@pageSize int = 0,
	@pageNumber int = 0,
	@totalRecordCount INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DECLARE @sqlString nvarchar(4000)
DECLARE @parmDefinition nvarchar(1000)
DECLARE @startingRow int

IF (@pageNumber = 0)
	SET @pageNumber = 1

IF (@pageSize = 0)
	SET @pageSize = 10

IF (@pageNumber = 1)
	SET @startingRow = 1
ELSE
	SET @startingRow = ((@pageNumber - 1) * @pageSize) + 1

-- Add the primary key for better sorting results
IF (ISNULL(@sortOrder, '') = '')
	SET @sortOrder = '[BidRequest].[BidRequestKey]'
ELSE
	SET @sortOrder = @sortOrder + ', [BidRequest].[BidRequestKey]'

SET @parmDefinition = N' @startingRow INT, @pageSize INT'

-- Get total records count
SELECT @totalRecordCount = COUNT(*)
FROM
	[BidRequest] inner join BidVendor on BidVendor.BidRequestKey = BidRequest.BidRequestKey where (BidVendor.VendorKey = @companyKey)
-- Determine records exist to retrieve
IF (@totalRecordCount > 0)
BEGIN

	SET @sqlString = N'SELECT * ' + 
		'FROM ( ' + 
		'	SELECT ROW_NUMBER() OVER ( ORDER BY ' + @sortOrder + ' ) AS RowNumber, ' + 
		'		[BidRequest].[BidRequestKey], ' +
		'		[BidRequest].[PropertyKey], ' +
		'		[BidRequest].[ResourceKey], ' +
		'		[BidRequest].[ServiceKey], ' +
		'		[BidRequest].[Title], ' +
		'		[BidRequest].[BidDueDate], ' +
		'		[BidRequest].[StartDate], ' +
		'		[BidRequest].[EndDate], ' +
		'		[BidRequest].[Description], ' +
		'		[BidRequest].[DateAdded], ' +
		'		[BidRequest].[LastModificationTime], ' +
		'		[BidRequest].[BidRequestStatus], pr.Title, pr.NumberOfUnits ' +
		'	from BidRequest inner join BidVendor bv on BidRequest.BidRequestKey = bv.BidRequestKey' +
		'	inner join property pr on pr.PropertyKey = BidRequest.propertykey' +
		'	Where bv.VendorKey = '+ @companyKey +
		')i ' + 
		'WHERE RowNumber >= @startingRow ' + 
		'AND RowNumber < (@startingRow + @pageSize) ' + 
		'ORDER BY RowNumber ' 
	
	execute(@sqlstring)
	--EXECUTE sp_executesql @sqlString, @parmDefinition, @startingRow, @pageSize

	-- Get the Error Code for the statement just executed.
	SELECT @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[site__PushNotificationTemplate_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- site__PushNotificationTemplate_SelectIndexPaging 50,1,'','order by PushNotificationTitle'
CREATE PROCEDURE [dbo].[site__PushNotificationTemplate_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (NT.PushNotificationTitle like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [PushNotificationTemplate] as NT inner join LookUp as Lk on NT.PushNotificationType=Lk.LookUpKey
   '+@qrywhere + ''

  set @qry = 'select * from (select NT.PushNotificaionTemplateKey,NT.PushNotificationTitle,NT.Body,Nt.NTSubject,Lk.Title , @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum  FROM PushNotificationTemplate as NT inner join LookUp as Lk on NT.PushNotificationType=Lk.LookUpKey  '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site__PushNotificationTemplate_SelectIndexPaging_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- site__PushNotificationTemplate_SelectIndexPaging_New 50,1,'','for','order by PushNotificationTitle'
CREATE PROCEDURE [dbo].[site__PushNotificationTemplate_SelectIndexPaging_New]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),    
@TitleType nvarchar(max),
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (((NT.PushNotificationTitle like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )) and (Lk.Title like ''%'+@TitleType+'%''))' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [PushNotificationTemplate] as NT inner join LookUp as Lk on NT.PushNotificationType=Lk.LookUpKey
   '+@qrywhere + ''

  set @qry = 'select * from (select NT.PushNotificaionTemplateKey,NT.PushNotificationTitle,NT.Body,Nt.NTSubject,Lk.Title , @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum  FROM PushNotificationTemplate as NT inner join LookUp as Lk on NT.PushNotificationType=Lk.LookUpKey  '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_GetAcceptRejectBid]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_ABNotification_GetAcceptRejectBid 4254

CREATE Procedure [dbo].[site_ABNotification_GetAcceptRejectBid]
@ResourceKey int
As
Begin
	select * from ABNotification ab
	join BidRequest br on ab.ObjectKey = br.BidRequestKey
	where (ab.NotificationType = 'BidReqStatusAccept' 
	or ab.NotificationType = 'BidReqStatusReject' 
	or ab.NotificationType = 'BidReqStatusRejByAcceptOther')
	and ab.ModuleKey in(100,106) and ab.Status = '900'
	and ab.ForResource = @ResourceKey

End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_GetNotificationModule]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--site_ABNotification_GetNotificationModule 7488
CREATE Procedure [dbo].[site_ABNotification_GetNotificationModule]
@ResourceKey int
As
Begin
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	if(@portalkey = 1)
	begin
		Select ModuleKey,l.Title,COUNT(*) as Total from ABNotification
		join LookUp l on l.LookupKey = Status
		where ModuleKey in(200,705) and ForResource = @ResourceKey and Status = 900
		Group By ModuleKey,l.Title Having Count(*) >= 1
	end
	Else if(@portalkey = 2)
	Begin
		select abn.ModuleKey,l.Title,Count(*) as Total from ABNotification as abn
		join Lookup l on l.Lookupkey = Status
		inner join bidrequest as br on br.bidrequestkey = abn.objectkey
		where 
		br.bidrequeststatus in (600,601,602,603) and 
		abn.ModuleKey in (100,106) and ForResource = @ResourceKey and Status = 900
		Group By abn.ModuleKey,l.Title Having Count(*) >= 1 
	End
	Else if(@portalkey = 3)
	Begin
		select abn.ModuleKey,l.Title,Count(*) as Total 
		from ABNotification as abn
		join LookUp l on l.LookUpKey = Status 
		inner join bidrequest as br on br.bidrequestkey = abn.objectkey
		where br.bidrequeststatus in (600,601,602,603) and abn.ModuleKey in(100,106,302,301,300) and ForResource = @ResourceKey and Status = 900 
		and NotificationType != 'BidReqStatusReject' and NotificationType != 'BidReqStatusRejByAcceptOther'  
		Group By abn.ModuleKey,l.Title Having COUNT(*) >= 1
	End
	

End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_GetNotificationModuleNew]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--site_ABNotification_GetNotificationModule 12796
CREATE Procedure [dbo].[site_ABNotification_GetNotificationModuleNew]
@ResourceKey int
As
Begin
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	if(@portalkey = 1)
	begin
		Select ModuleKey,l.Title,COUNT(*) as Total from ABNotification
		join LookUp l on l.LookupKey = Status
		where ModuleKey in(200,705) and ForResource = @ResourceKey and Status = 900
		Group By ModuleKey,l.Title Having Count(*) >= 1
	end
	Else if(@portalkey = 2)
	Begin
		select abn.ModuleKey,l.Title,Count(*) as Total from ABNotification as abn
		join Lookup l on l.Lookupkey = Status
		inner join bidrequest as br on br.bidrequestkey = abn.objectkey
		where 
		br.bidrequeststatus in (600,601,602,603) and 
		abn.ModuleKey in (100,106) and ForResource = @ResourceKey and Status = 900
		Group By abn.ModuleKey,l.Title Having Count(*) >= 1 
	End
	Else if(@portalkey = 3)
	Begin
		select abn.ModuleKey,l.Title,Count(*) as Total 
		from ABNotification as abn
		join LookUp l on l.LookUpKey = Status 
		inner join bidrequest as br on br.bidrequestkey = abn.objectkey
		where br.bidrequeststatus in (600,601,602,603) and abn.ModuleKey in(100,106,302,301,300) and ForResource = @ResourceKey and Status = 900 
		and NotificationType != 'BidReqStatusReject' and NotificationType != 'BidReqStatusRejByAcceptOther'  
		Group By abn.ModuleKey,l.Title Having COUNT(*) >= 1
	End
	

End


--select abn.ModuleKey,l.Title,br.bidrequeststatus from ABNotification as abn
--		join Lookup l on l.Lookupkey = Status
--		inner join bidrequest as br on br.bidrequestkey = abn.objectkey
--		where abn.ModuleKey in (100,106) and ForResource = 10743 and Status = 900
--		--br.bidrequeststatus in (600,601,602,603) and
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_GetResourceByType]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_ABNotification_GetResourceByType "BidVendorStatus",18406,100      
CREATE Procedure [dbo].[site_ABNotification_GetResourceByType]      
@NotificationType varchar(50),      
@ObjectKey int,      
@ModuleKey int      
AS      
Begin      
 if(@NotificationType = 'RefundReq' or @NotificationType = 'RefundReqMsg' or @NotificationType = 'VendorReg')      
 Begin      
  select * from Resource r      
   join Company c on c.Companykey = r.CompanyKey      
   where c.CompanyTypeKey = (Select LookUpKey from LookUp       
    where LookUpTypeKey = (select LookUpTypeKey from LookUpType       
     where Title = 'Company Type') and Title = 'Administration') and c.Status = 101      
 End      
 else if(@NotificationType = 'BidReqStatus' or @NotificationType = 'BidReqMsg' or @NotificationType = 'BidVendorStatus')      
 Begin      
 declare @propertykey int      
 select @propertykey = PropertyKey from BidRequest where BidRequestKey = @ObjectKey      
 print(@propertykey)      
  select top (1)(br.ResourceKey),br.BidRequestKey,br.Title,pr.PropertyKey,(select Title from Property where PropertyKey = pr.PropertyKey) as Title,r.CompanyKey,r.Email,      
   r.FirstName,gm.GroupKey from BidRequest br      
   LEFT join PropertyResource pr on pr.PropertyKey = br.PropertyKey      
   join Resource r on pr.ResourceKey = r.ResourceKey      
   join GroupMember gm on gm.ResourceKey = r.ResourceKey      
    where pr.PropertyKey = @propertykey and br.BidRequestKey = @ObjectKey and (groupkey = 3  or  GroupKey = 1)     
          
 End      
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_GetResourceByTypeAdmin]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- site_ABNotification_GetResourceByTypeAdmin 'RefundReqMsg',1190,200
CREATE Procedure [dbo].[site_ABNotification_GetResourceByTypeAdmin]
@NotificationType varchar(50),
@ObjectKey int,
@ModuleKey int
AS
Begin
declare @VendorKey int
set @VendorKey = (select Case When @ModuleKey = 200 Then (select top 1 VendorKey from Invoice where InvoiceKey = @ObjectKey) Else 0 End)
print(@VendorKey)
	if(@NotificationType = 'RefundReq' or @NotificationType = 'RefundReqMsg')
	Begin

		select * from Resource r
			join Company c on c.Companykey = r.CompanyKey
			where c.CompanyKey = @VendorKey
	End
	
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_InsertSingle]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[site_ABNotification_InsertSingle]
@NotificationType varchar(50),
@ModuleKey int,
@ObjectKey int,
@ByResource int,
@ForResource int,
@NotificationText nvarchar(max),
@Id int OUTPUT
AS
Begin
declare @st int
select @st = LookUpKey from LookUp where LookUpTypeKey = (select LookUpTypeKey from LookUpType where Title = 'Message Status')
	and Title = 'New'
	Insert into ABNotification(NotificationType,ModuleKey,ObjectKey,ByResource,ForResource,
	NotificationText,DateAdded,LastModificationDate,Status) 
	values(@NotificationType,@ModuleKey,@ObjectKey,@ByResource,@ForResource,
	@NotificationText,GetDate(),GetDate(),@st)

	select @Id = @@Identity
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





--site_ABNotification_SelectTopFive 4254
CREATE Procedure [dbo].[site_ABNotification_SelectAll]
@ResourceKey int
As
Begin
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	print(@portalkey)
	if(@portalkey = 1)
	begin
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in((select ModuleKey from Module where Title = 'Invoices' or Title = 'Register'))
		order by ab.DateAdded desc
	end
	else if(@portalkey = 2)
	Begin
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in(100,106)
		order by ab.DateAdded desc
	End
	Else if(@portalkey = 3)
	Begin
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in(100,106,302,301,300)
	End
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_SelectAllByModuleAndType]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- site_ABNotification_SelectAllByModuleAndType 1062,0,''
CREATE Procedure [dbo].[site_ABNotification_SelectAllByModuleAndType]
@ResourceKey int,
@ModuleKey int = 0,
@NotificationType varchar(200) = ''
AS
Begin
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	print(@portalkey)
	if(@portalkey = 1)
	begin
	
		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Invoices' or Title = 'Register')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
		order by ab.DateAdded desc
	end
	--else if(@portalkey = 2)
	--Begin

	--End
	Else if(@portalkey = 3)
	Begin
		declare @dt table(ModuleKey int)

		select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey 
		and 1 =(
			case when (@ModuleKey = 0 and ab.ModuleKey in (select ModuleKey from Module where Title = 'Bid Requests' or Title = 'Work Orders')) then 1
			when @ModuleKey = ab.ModuleKey then 1
			Else 0 END
			) and 1 = (
			case when (@NotificationType = '') then 1
			when @NotificationType = ab.NotificationType then 1
			Else 0 END)
	End
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_SelectByNotificationId]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--site_ABNotification_SelectByNotificationId 1062,8
CREATE Procedure [dbo].[site_ABNotification_SelectByNotificationId]
@ResourceKey int,
@NotificationId int
AS
Begin
	select 
	Id,
	NotificationType,
	ModuleKey,
	ObjectKey,
	ByResource,
	ForResource,
	NotificationText,
	DateAdded,
	LastModificationDate,
	Status
	from ABNotification
	where ForResource = @ResourceKey and Id = @NotificationId
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_SelectByObjectAndModule]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[site_ABNotification_SelectByObjectAndModule]
@ObjectKey int,
@ModuleKey int,
@ResourceKey int = 0
AS
Begin
declare @isAll int
	select @isAll = case when(@ResourceKey = 0) then 0 else 1 end
	if(@isAll = 0)
	Begin
	select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ab.ModuleKey = @ModuleKey and ab.ObjectKey = @ObjectKey
		order by ab.DateAdded desc
	End
	Else
	Begin
	select ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey = @ModuleKey and ab.ObjectKey = @ObjectKey
		order by ab.DateAdded desc
	End
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_SelectTopFive]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--site_ABNotification_SelectTopFive 1062
CREATE Procedure [dbo].[site_ABNotification_SelectTopFive]
@ResourceKey int
As
Begin
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	if(@portalkey = 1)
	begin
		select top 5 ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in((select ModuleKey from Module where Title = 'Invoices' or Title = 'Register'))
		order by ab.DateAdded desc
	end
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_SelectTopFiveNew]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--site_ABNotification_SelectTopFiveNew 4254
CREATE Procedure [dbo].[site_ABNotification_SelectTopFiveNew]
@ResourceKey int
As
Begin

 ----------------------------------------------
 -------------------------------------------------------------------
 -------------------------------------------------------------------------------------
	declare @portalkey int
	declare @ckey int
	Select @ckey = CompanyKey from Resource where ResourceKey = @ResourceKey
	select @portalkey = PortalKey from Company where CompanyKey = @ckey
	if(@portalkey = 1)
	begin
		select top 5 ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		'' as ObjectTitle,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in((select ModuleKey from Module where Title = 'Invoices' or Title = 'Register'))
		order by ab.DateAdded desc
	end
	else if(@portalkey = 3)
	begin
		select top 5 ab.Id,ab.ModuleKey,ab.ObjectKey,ab.ByResource,ab.ForResource,ab.NotificationType,
		(case when ab.ModuleKey in (100,106) then (select top 1 Title from BidRequest where ab.ObjectKey = BidRequestKey)
		when ab.ModuleKey = 302 then (select top 1 PolicyNumber from Insurance where ab.ObjectKey = InsuranceKey) else '' End) as ObjectTitle,
		ab.NotificationText,ab.DateAdded,ab.LastModificationDate,ab.Status,r.FirstName +' '+r.LastName as ByVendorName,
		c.Name as ByCompanyName,m.Controller,l.Title as StatusTitle from ABNotification ab
		join Resource r on r.ResourceKey = ab.ByResource
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = ab.ModuleKey
		join LookUp l on l.LookUpKey = ab.Status
		where ForResource = @ResourceKey and ab.ModuleKey in(100,106,300,301,302)
		order by ab.DateAdded desc
	end



End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_UpdateAcceptedBid]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_ABNotification_UpdateAcceptedBid]
@ResourceKey int,
@ObjectKey int,
@ModuleKey int,
@status varchar(50),
@errorCode int OUTPUT
As
Begin
	declare @ncount int
	declare @st int
	select @st = LookUpKey from LookUp where LookupTypeKey = (select LookupTypeKey from LookupType where Title = 'Message Status') and Title = @Status

	select @ncount = count(*) from ABNotification where ForResource = @ResourceKey and ObjectKey = @ObjectKey and ModuleKey = @ModuleKey
	if(@ncount > 0)
	begin
		update ABNotification set Status = @st where ObjectKey = @ObjectKey and ModuleKey = @ModuleKey
		select @errorCode = @@Error
	end
	else
	begin
		select @errorCode = 1
	end
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_UpdateStatus]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[site_ABNotification_UpdateStatus]
@Id int,
@Status varchar(20),
@errorCode int output
AS
Begin
declare @st int
	select @st = LookUpKey from LookUp where LookupTypeKey = (select LookupTypeKey from LookupType where Title = 'Message Status')
	and Title = @Status
	if(@st is not null and @st != '')
	begin
		Update ABNotification Set Status = @st where Id = @Id
		set @errorCode = @@ERROR
	end
	else
	begin
		set @errorCode = 2
	end
End
GO
/****** Object:  StoredProcedure [dbo].[site_ABNotification_UpdateStatusByObjectKeyAndType]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[site_ABNotification_UpdateStatusByObjectKeyAndType]
@ObjectKey int,
@NotificationType nvarchar(200),
@Status varchar(20),
@errorCode int output
AS
Begin
declare @st int
	select @st = LookUpKey from LookUp where LookupTypeKey = (select LookupTypeKey from LookupType where Title = 'Message Status')
	and Title = @Status
	if(@st is not null and @st != '')
	begin
		Update ABNotification Set Status = @st where ObjectKey = @ObjectKey and NotificationType = @NotificationType
		set @errorCode = @@ERROR
	end
	else
	begin
		set @errorCode = 2
	end
End
GO
/****** Object:  StoredProcedure [dbo].[site_ACompanymanagement_SelectOneBycompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
    
    
    
    
-- site_ACompanymanagement_SelectOneBycompanyKey 3325,0    
CREATE PROCEDURE [dbo].[site_ACompanymanagement_SelectOneBycompanyKey]    
 @CompanyKey INT,    
 @errorCode INT OUTPUT    
AS    
SET NOCOUNT ON    
    
 select rs.ResourceKey,ps.CompanyKey, Name, LegalName, ps.Work, ps.Work2, rs.FirstName,rs.LastName, ps.Fax, Website, ps.[Address], ps.Address2, ps.City, st.Title as StateName, ps.[State], ps.Zip, ps.BidRequestAmount,    
 ps.BidSubmitDays, ps.BidRequestResponseDays, ps.Description, rs.Email, rs.CellPhone, rs.PrimaryContact    
 from [Company] as ps    
left  join [Resource] rs on rs.CompanyKey = ps.CompanyKey    
left join State st on ps.State = st.StateKey    
where  Ps.CompanyKey= @CompanyKey    
-- Get the Error Code for the statement just executed.    
SELECT @errorCode = @@ERROR    
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_AdminCompany_CheckDuplicatedEmail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


create PROCEDURE [dbo].[site_AdminCompany_CheckDuplicatedEmail]
	 
	@Email varchar(150), 
	@Status int OUTPUT

AS
SET NOCOUNT ON

	if not exists (Select * from Resource where Email = @Email)
		begin
		SET @Status = 1
		end
	else
		begin
		SET @Status = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[site_Admincompany_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[site_Admincompany_Delete]  
 @CompanyKey int,  
 @ResourceKey int,  
 @errorCode int output  
   
  
AS 
begin
SET NOCOUNT ON  

declare @PropertyKey int 
declare @UserKey int 

select @PropertyKey =  (Select Count(propertykey) from  Property where  CompanyKey =@CompanyKey)
select @UserKey  =   (Select Count(Userkey)  From  [User] where  ResourceKey =@ResourceKey)

if(@PropertyKey = 0)
begin
delete from [user] where ResourceKey=@ResourceKey  
delete from [Resource] where CompanyKey = @CompanyKey  
delete [Company] where CompanyKey = @CompanyKey  
select @errorCode  = 1 
end 
else
begin
select @errorCode  = 0
end

end
GO
/****** Object:  StoredProcedure [dbo].[site_AdminCompany_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
CREATE PROCEDURE [dbo].[site_AdminCompany_Insert]  
 @LegalName varchar(150),   
 @CompanyName  varchar(150),  
 @Address varchar(100),   
 @Address2 varchar(100),  
 @City varchar(50),   
 @StateKey varchar(50),  
 @Zip varchar(11),  
 @Work varchar(50),  
 @Work2 varchar(50),  
 @Workss varchar(50),  
 @Workss2 varchar(50),  
 @Fax varchar(50),  
 @Website varchar(255),  
 @PrimaryContact bit,  
 @firstname  varchar(150),   
 @lastname varchar(150),  
 @Email varchar(150),  
 @CellPhone varchar(50), 
  @Password varchar(50),  
 @Description varchar(50),  
 @BidRequestResponseDays  int,  
 @BidSubmitDays  int,  
 @BidRequestAmount int,  
 @Status int,  
 @errorCode INT OUTPUT  
  
AS  
SET NOCOUNT ON  
declare @companytype int  
  
  insert into Company(CompanyTypeKey, LegalName, Name, [Address], Address2, City, [State], Zip, BidRequestAmount,   
      BidRequestResponseDays,BidSubmitDays, [Description],Work,Work2,Fax,Website, [Status],CompanyID,PortalKey)  
  values('1001',@LegalName,@CompanyName,@Address,@Address2,@City,(case when @StateKey = 0 then null else @StateKey end),@Zip,@BidRequestAmount,@BidRequestResponseDays,@BidSubmitDays  
  ,@Description,@Work,@Work2,@Fax,@Website  
  ,(select top 1 l.Title from LookUp l inner join LookUpType lt on l.LookUpTypeKey = lt.LookUpTypeKey where lt.Title = 'Status' and l.Title = 'Approved'),NEWID(),3)  
   
 declare @CompanyKey int = @@identity   
  
 Insert into [Resource] (ResourceTypeKey,CompanyKey, Email, CellPhone, PrimaryContact, FirstName,LastName,Work,Work2, [Status])  
  values (1100,@CompanyKey, @Email, @CellPhone, @PrimaryContact,@firstname,@lastname,@Workss,@Workss2,101)  
--Get the Error Code for the statement just executed.  
  
declare @ResourceKey int   
set @ResourceKey = @@IDENTITY  
  
insert into dbo.GroupMember(GroupKey,ResourceKey)  
select top 1 g.GroupKey,@ResourceKey   
from [Group] g where g.Title='Administrator'  
  
insert into [User](ResourceKey,Username,Password,DateAdded,LastModificationTime,Status)  
values(@ResourceKey,@Email,@Password,getdate(),GETDATE(),101)  
  
select  @errorCode = @@Error
GO
/****** Object:  StoredProcedure [dbo].[site_AdminCompany_InsertedUser]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[site_AdminCompany_InsertedUser]  
 @CompanyKey int,   
 @LegalName varchar(150),   
 @CompanyName  varchar(150),  
 @Address varchar(100),   
 @Address2 varchar(100),  
 @City varchar(50),   
 @StateKey varchar(50),  
 @Zip varchar(11),  
 @Work varchar(50),  
 @Work2 varchar(50),  
 @Workss varchar(50),  
 @Workss2 varchar(50),  
 @Fax varchar(50),  
 @Password varchar(50),  
 @Website varchar(255),  
 @PrimaryContact bit,  
 @firstname  varchar(150),   
 @lastname varchar(150),  
 @Email varchar(150),  
 @CellPhone varchar(50),  
 @Description varchar(50),  
 @BidRequestResponseDays  int,  
 @BidSubmitDays  int,  
 @BidRequestAmount int,  
 @Status int,  
 @errorCode INT OUTPUT  
  
AS  
SET NOCOUNT ON  
declare @companytype int  
  
  insert into Company(CompanyTypeKey, LegalName, Name, [Address], Address2, City, [State], Zip, BidRequestAmount,   
      BidRequestResponseDays,BidSubmitDays, [Description],Work,Work2,Fax,Website, [Status],CompanyID,PortalKey)  
   values('1001',@LegalName,@CompanyName,@Address,@Address2,@City,(case when @StateKey = '0' then null else @StateKey end),@Zip,@BidRequestAmount,@BidRequestResponseDays  
   ,@BidSubmitDays,@Description,@Work,@Work2,@Fax,@Website,101,NEWID()  
   ,2)  
   
 set @CompanyKey = @@identity   
  
 Insert into [Resource] (ResourceTypeKey,CompanyKey, Email, CellPhone, PrimaryContact, FirstName,LastName,Work,Work2, [Status])  
  values (1100,@CompanyKey, @Email, @CellPhone, @PrimaryContact,@firstname,@lastname,@Workss,@Workss2,101)  
--Get the Error Code for the statement just executed.  
  
declare @ResourceKey int   
set @ResourceKey = @@IDENTITY  
  
insert into dbo.GroupMember(GroupKey,ResourceKey)  
select top 1 g.GroupKey,@ResourceKey   
from [Group] g where g.Title='Administrator'  
  
insert into [User](ResourceKey,Username,Password,DateAdded,LastModificationTime,Status)  
values(@ResourceKey,@Email,@Password,getdate(),GETDATE(),101)  
  
declare @UserKey as int  
set @UserKey = @@IDENTITY  
  
select  @errorCode = @@Error  
  
select top 1 * from [User] where UserKey = @UserKey order by userkey desc
GO
/****** Object:  StoredProcedure [dbo].[site_AdminCompany_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [site_AdminCompany_SelectIndexPaging] 10,1,'a','order by work asc','ST',0
CREATE PROCEDURE [dbo].[site_AdminCompany_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                               
@Sort nvarchar(max),
@State nvarchar(50), 
@Status int
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
  declare @total int
    
  set @qrywhere = 'where companytypekey = 1001 
  and (
	   (i.Name like  ''%'+ @Search +'%'') 
	or (i.Work like ''%'+ @Search +'%'') 
    or (i.Address like ''%'+ @Search +'%'') 
	or (i.Title like ''%'+ @Search +'%'') 
	
    or ( '''+@Search+''' = '''' ))
	and ((convert(nvarchar(50),i.Status) = '''+convert(nvarchar(50),@Status) +''')  Or (convert(int,3) = '''+ convert(nvarchar(50),@Status) +'''))
	and ((convert(nvarchar(50),i.State) = '''+ convert(nvarchar(50),@State) +''')  Or (convert(nvarchar(50),''0'' )= '''+ convert(nvarchar(50),@State) +'''))
	' 
  
set @qrytotal = 'declare @TotalRecord as int = 0;
select @TotalRecord = count(CompanyKey) from (
   select c.CompanyTypeKey, c.CompanyKey as CompanyKey,c.Name, c.LegalName, c.state,
  (select (case when c.Address is null then '''' else c.Address + '','' end) + (case when c.Address2 is null then '''' else c.Address2 + '','' end) + (case when c
.City is null then '''' else c.City + '','' end) + (case when c.State is null then '''' else c.State + '','' end) + (case when c.Zip is null then '''' else c.Zip  end)) as Address
,c.Status as Status, @TotalRecord as TotalRecord,sr.Title
,(select top 1 isnull(r.Firstname,'''') + '' '' + isnull(r.LastName,'''') from Resource r where r.CompanyKey = c.companykey and r.PrimaryContact = 1) as Work 
  from [Company] c 
   LEFT join State as sr on sr.StateKey = c.State   
  ) i 
   '+@qrywhere

  set @qry = '
  select * from ( 
  select *, row_number() over('+@Sort+') as  rownum   from (
  select c.CompanyTypeKey, c.CompanyKey as CompanyKey,c.Name, c.LegalName, c.state,
  (select (case when c.Address is null then '''' else c.Address + '','' end) + (case when c.Address2 is null then '''' else c.Address2 + '','' end) + (case when c
.City is null then '''' else c.City + '','' end) + (case when c.State is null then '''' else c.State + '','' end) + (case when c.Zip is null then '''' else c.Zip  end)) as Address
,c.Status as Status, @TotalRecord as TotalRecord,sr.Title
,(select top 1 isnull(r.Firstname,'''') + '' '' + isnull(r.LastName,'''') from Resource r where r.CompanyKey = c.companykey and r.PrimaryContact = 1) as Work 
  from [Company] c 
   LEFT join State as sr on sr.StateKey = c.State  
  ) i 
   '+@qrywhere+'
  )j 
  where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' 
  and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
  print(@qrytotal+ @qry)             
  exec ( @qrytotal+@qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Admincompany_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ********************************    
-- * Stored Procedure Code    
-- ********************************    
CREATE PROCEDURE [dbo].[site_Admincompany_Update]    
    
 @companyKey INT,    
     
 --@companyName VARCHAR(150),    
    @legalName VARCHAR(150),    
 @CompanyName  varchar(150),    
 --@firstname VARCHAR(150),    
 @work VARCHAR(50),    
 @work2 VARCHAR(50),    
    
 @fax VARCHAR(50),    
 @address VARCHAR(100),    
 @address2 VARCHAR(100),    
 @city VARCHAR(50),    
 @StateKey VARCHAR(2),    
 @zip VARCHAR(11),    
 @website VARCHAR(255),    
     
     
    
 @status INT    
     
AS    
SET NOCOUNT ON    
    
UPDATE [Company]    
SET    
     
 [Name] = @companyName,    
 [LegalName] = @legalName,    
 [Work] = @work,    
 [Work2] = @work2,    
 [Fax] = @fax,    
 [Address] = @address,    
 [Address2] = @address2,    
 [City] = @city,    
 [State] = @StateKey,    
 [Zip] = @zip,    
 [Website] = @website,    
     
     
 [Status] = @status    
WHERE [Company].[CompanyKey] = @companyKey
GO
/****** Object:  StoredProcedure [dbo].[site_Admincompanydefault_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
create PROCEDURE [dbo].[site_Admincompanydefault_Update]

	@companyKey INT,

	@description VARCHAR(max),
	@bidRequestResponseDays INT,
	@bidSubmitDays INT,
	@bidRequestAmount money,
	


	@status INT
	
AS
SET NOCOUNT ON

UPDATE [Company]
SET
	

	[Description] = @description,
	[BidRequestResponseDays] = @bidRequestResponseDays,
	[BidSubmitDays] = @bidSubmitDays,
	[BidRequestAmount] = @bidRequestAmount,
	
	[Status] = @status
WHERE [Company].[CompanyKey] = @companyKey
GO
/****** Object:  StoredProcedure [dbo].[site_Adminprimarycompany_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Adminprimarycompany_Update]

	@companyKey INT,
	
	@firstname VARCHAR(150),
	@work VARCHAR(50),
	@work2 VARCHAR(50),
	@email VARCHAR(150),
	@primaryContact BIT,
	@cellPhone VARCHAR(50),
	@status INT
	
AS
SET NOCOUNT ON

UPDATE [Company]
SET
	[Work] = @work,
	[Work2] = @work2,
	[Status] = @status
WHERE [Company].[CompanyKey] = @companyKey

if(0 < (select count(1) from [Resource] r where r.CompanyKey = @companyKey))
begin
	update [Resource] 
	set Email =  @email,CellPhone = @cellPhone,FirstName=@firstname ,PrimaryContact = @primaryContact 
	where CompanyKey = @companyKey
end
else
begin
	insert into [Resource] (CompanyKey, Email,CellPhone,FirstName,PrimaryContact,ResourceTypeKey,Status)
	values(@companyKey, @email,@cellPhone,@firstname,@primaryContact,1001
	,(select top 1 l.LookUpKey from LookUp l inner join LookUpType lt on l.LookUpTypeKey = lt.LookUpTypeKey where lt.Title = 'Status' and l.Title = 'Approved'))
end
GO
/****** Object:  StoredProcedure [dbo].[site_Adminucompanyuser_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Adminucompanyuser_SelectIndexPaging]
@CompanyKey int,                     
@errorCode INT OUTPUT 

AS
SET NOCOUNT ON

declare @TotalREcords int = 0
select  @TotalREcords = count(ResourceKey)
from [Resource] 
where CompanyKey = @CompanyKey

select  CompanyKey, FirstName, Email,PrimaryContact  ,ResourceKey, @TotalREcords as TotalRecords
from [Resource] 
where CompanyKey = @CompanyKey

SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_DeleteOneByAgreementKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
create PROCEDURE [dbo].[site_Agreement_DeleteOneByAgreementKey]
	@agreementKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Agreement]
WHERE [Agreement].[AgreementKey] = @agreementKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_Edit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Agreement_Edit]
	@AgreementKey int,
	@Title varchar(150),
	--@PortalKey int, 
	@AgreementDate datetime,
	@Description varchar(max),
	@Status int,
    @Agreementvalue int output

AS
SET NOCOUNT ON
BEGIN
	UPDATE Agreement set Title = @Title,AgreementDate=@AgreementDate,LastModificationTime=CONVERT(time, GETDATE()), Description = @Description, Status = @Status where AgreementKey = @AgreementKey
	SELECT @Agreementvalue = @@IDENTITY
END
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_Property_Insert 15,'shyam',25,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'desc',1,' Tasksheet  23-04-2020.docx,Tasksheet  24-04-2020.docx,Tasksheet  30-04-2020.docx','21811,21821,22471',1,20
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_Agreement_Insert]
	 
	
	@Title varchar(150),
	@AgreementDate datetime,
	@Description varchar(max),
	@Status int,
	@Agreementvalue int output
	
AS
begin  
 
    Insert into Agreement(Title,PortalKey, AgreementDate,Description,LastModificationTime,Status)values(@Title,1, @AgreementDate, @Description, CAST(GETDATE() AS TIME),@Status)
	declare @AgreementKey int = @@identity  
	select @Agreementvalue = @@IDENTITY
end


--[USP_EmailTemplet_Insert] 'test','test1','test2'
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Agreement_SelectAll]
@errorCode INT OUTPUT
AS
begin
SET NOCOUNT ON
SELECT AgreementKey,Title,AgreementDate,Status, Description FROM Agreement 

SELECT @errorCode = @@ERROR
end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_Agreement_SelectIndexPaging] 50,1,'','order by Title desc'
CREATE PROCEDURE [dbo].[site_Agreement_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
--set @qrywhere = 'where AgreementKey= 1100 and ((Title like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' ))'
  set @qrywhere ='where (Ag.Title like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )' 
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Agreement] as Ag '+@qrywhere + '' 
 set @qry = '   select * from (  SELECT Ag.AgreementKey as AgreementKey,Title,Ag.AgreementDate as AgreementDate,Ag.Status as Status, Ag.Description as Description,
  @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [Agreement] as Ag
  '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)            
END
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_SelectIndexPaging_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [site_Agreement_SelectIndexPaging_New] 50,1,'','approved','order by Title desc'
CREATE PROCEDURE [dbo].[site_Agreement_SelectIndexPaging_New]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),   
@Status nvarchar(20),
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)
  declare @st varchar(10)
  declare @stVal varchar(10)

  if(@Status = '')
  Begin
	set @qrywhere ='where (Ag.Title like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )' 
  End
  Else
  Begin
	select @st = LookupKey from Lookup where Title = @Status and LookupTypeKey  = 1
	select @stVal = Value from Lookup where Title = @Status and LookupTypeKey  = 1
	set @qrywhere ='where ((Ag.Title like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' ))
		and (Ag.Status = '''+@Status+''')'
  End
    
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
--set @qrywhere = 'where AgreementKey= 1100 and ((Title like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' ))'
  --set @qrywhere ='where (Ag.Title like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )' 
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Agreement] as Ag '+@qrywhere + '' 
 set @qry = '   select * from (  SELECT Ag.AgreementKey as AgreementKey,Title,Ag.AgreementDate as AgreementDate,Ag.Status as Status, Ag.Description as Description,
  @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [Agreement] as Ag
  '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)            
END
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_SelectOneByAgreementKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[site_Agreement_SelectOneByAgreementKey]
	@AgreementKey INT,
	@errorCode INT OUTPUT
	
AS
BEGIN
	SET NOCOUNT ON
	SELECT AgreementKey,Title,AgreementDate, Description ,Status FROM Agreement   where  AgreementKey=@AgreementKey 
	SELECT @errorCode = @@ERROR
	print(@errorCode)
END
GO
/****** Object:  StoredProcedure [dbo].[site_Agreement_SelectShowForVendorRegistration]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_Agreement_SelectIndexPaging_New] 50,1,'','approved','order by Title desc'
CREATE PROCEDURE [dbo].[site_Agreement_SelectShowForVendorRegistration]
   
AS
begin
        select AgreementKey, Title,Description from Agreement where status = 1
END
GO
/****** Object:  StoredProcedure [dbo].[site_AstaffCompanymanagement_SelectOneBycompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_AstaffCompanymanagement_SelectOneBycompanyKey]
	@companyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

 select ps.CompanyKey,FirstName,rs.Email,rs.PrimaryContact

                        from [Company] ps
inner join [Resource] rs on rs.CompanyKey = ps.CompanyKey
where  Ps.CompanyKey= @companyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_Bid_DeleteDoc]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[site_Bid_DeleteDoc]  
@Filename nvarchar(max),
@Title nvarchar(max),
@BidKey int output  
AS  
BEGIN  


  declare @bidRequestkey int 

    Select @bidRequestkey=   BidrequestKey From Bidrequest  where   Title = @Title  
 delete  from  Document  where  ObjectKey = @bidRequestkey and  FileName = @Filename
   Select @BidKey= BidrequestKey From Bidrequest  where   Title = @Title  


  --Select BidKey From Bid  where BidVendorKey=2007 and ResourceKey=4254  
END
GO
/****** Object:  StoredProcedure [dbo].[site_Bid_GetMaxBidRequestKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[site_Bid_GetMaxBidRequestKey]  

@Title nvarchar(max),
@BidKey int output  
AS  
BEGIN  


  declare @bidRequestkey int 

    Select @bidRequestkey=   BidrequestKey From Bidrequest  where   Title = @Title  
  
if(@bidRequestkey is  null)
begin

 Select @BidKey = 0
end

 else
 begin
Select @BidKey= BidrequestKey From Bidrequest  where   Title = @Title  
 end

  --Select BidKey From Bid  where BidVendorKey=2007 and ResourceKey=4254  
END
GO
/****** Object:  StoredProcedure [dbo].[site_Bid_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[site_Bid_Insert]
@BidVendorKey int,
@ResourceKey int,
@Title nvarchar(100),
@Total money,
@Description nvarchar(max),
@LastModificationTime nvarchar(100),
@Status nvarchar(100)
AS
BEGIN
declare @MessageStatus nvarchar(100)

(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title=@Status)


  insert into Bid (BidVendorKey,ResourceKey,Title,Total,Description,LastModificationTime,BidStatus) 
  values(@BidVendorKey,@ResourceKey,@Title,@Total,@Description,@LastModificationTime,@MessageStatus)

END
GO
/****** Object:  StoredProcedure [dbo].[site_Bid_InsertOrUpdate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[site_Bid_InsertOrUpdate]
@BidVendorKey int,
@ResourceKey int,
@Title nvarchar(100),
@Total money,
@Description nvarchar(max),
@LastModificationTime nvarchar(100),
@Status nvarchar(100)
AS
BEGIN
declare @MessageStatus nvarchar(100)

(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title=@Status)


Update  BidVendor Set BidVendorStatus=((select top(1) lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status') and Title=@Status))
where BidVendorKey=@BidVendorKey
if((Select Count(*) From Bid where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey)>0)
begin
  Update    Bid set Title=@Title,Total=@Total,Description=@Description,LastModificationTime=@LastModificationTime,BidStatus=@MessageStatus
  where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey
  end  
  else
  begin
  insert into Bid (BidVendorKey,ResourceKey,Title,Total,Description,LastModificationTime,BidStatus) 
  values(@BidVendorKey,@ResourceKey,@Title,@Total,@Description,@LastModificationTime,@MessageStatus)  
  end

  Select (Select BidKey From Bid  where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey) as BidKey
END
GO
/****** Object:  StoredProcedure [dbo].[site_Bid_InsertOrUpdates]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Bid_InsertOrUpdates]
--site_Bid_InsertOrUpdates 2676,4254,'',0,'','12/12/2000','update',0
@BidVendorKey int,
@ResourceKey int,
@Title nvarchar(100),
@Total money,
@Description nvarchar(max),
@LastModificationTime datetime,
@Status nvarchar(100),
@BidKey int output
AS
BEGIN
declare @MessageStatus nvarchar(100)
(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title=@Status)
print(@MessageStatus)
declare @BidVenderstats nvarchar(100)
select top(1) @BidVenderstats= lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status') and Title=@Status

Declare @BidVenderstatsReject  nvarchar(50)
-----1-------------------------------------------------------------------------------
if(@Status='Accepted')
begin
print(1)
select top(1) @BidVenderstatsReject= lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title='Rejected'
select top(1) @BidVenderstats= lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title=@Status
Update  BidVendor Set BidVendorStatus=@BidVenderstatsReject where BidVendorStatus=@BidVenderstats and BidRequestKey in (Select BidRequestKey From BidVendor where BidVendorKey=@BidVendorKey)

print(@BidVenderstatsReject)
print(@BidVenderstats)

end
-----1-------------------------------------------------------------------------------


-----12-------------------------------------------------------------------------------
if(@Status!='getid')
begin
print(12)
Update  BidVendor Set BidVendorStatus=@BidVenderstats where BidVendorKey=@BidVendorKey
end
------12----------------------------------------------------------------------------------

----123-------------------------------------------------------------------------
		if((Select Count(*) From Bid where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey)>0)
		begin
		if(@Status!='getid')
		begin
		print(123)
		  Update    Bid set Title=@Title,Total=@Total,Description=@Description,LastModificationTime=@LastModificationTime,BidStatus=@MessageStatus
		  where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey
		  --
		  --Update BidVendor set RespondByDate=getdate() where BidVendorKey=@BidVendorKey
		  end
		  end 
----123-------------------------------------------------------------------------

-----1234------------------------------------------------------------------------------------------------
	  if((Select Count(*) From Bid where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey)=0)
	  begin
	  print(1234)
		 ---12345--------------------------
				  if(@Status='getid' )
				  begin
				  print(12345)
					(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Status') and Title='In Progress')
				  end
		---12345-------------------------
	  insert into Bid (BidVendorKey,ResourceKey,Title,Total,Description,LastModificationTime,BidStatus) 
	  values(@BidVendorKey,@ResourceKey,@Title,@Total,@Description,@LastModificationTime,@MessageStatus)  

	  -- Commented By Roshan
	  --Update BidVendor set RespondByDate=getdate() where BidVendorKey=@BidVendorKey
	  end
-----1234-------------------------------------------------------------



    Select @BidKey= BidKey From Bid  where BidVendorKey=@BidVendorKey and ResourceKey=@ResourceKey 
	Select @BidKey
  --Select BidKey From Bid  where BidVendorKey=2007 and ResourceKey=4254
END
GO
/****** Object:  StoredProcedure [dbo].[site_Bid_ListSelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Bid_ListSelectIndexPaging] 
--[site_Bid_ListSelectIndexPaging] 3418,4254
@BidVendorKey int,                             
@ResourceKey int  
AS  
BEGIN  
   
 Select b.*,
 Convert(nvarchar(12),b.LastModificationTime,101) as strLastModificationTime From Bid 
 b inner join BidVendor bv on b.BidVendorKey=bv.BidVendorKey
 where b.BidVendorKey=@BidVendorKey and b.ResourceKey=@ResourceKey  
   
           
END
GO
/****** Object:  StoredProcedure [dbo].[site_Bidrequest_GetBidDate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Bidrequest_GetBidDate]
	@Comapanykey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


select  BidRequestResponseDays , BidSubmitDays  from  Company  where  CompanyKey = @Comapanykey
SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_GetInformationForEmail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[site_BidRequest_GetInformationForEmail]
@BidRequestkey int,  
@Modulekey int = 100  
As  
begin  
  select bv.BidVendorKey,br.title,isnull(r.FirstName, '') + ' ' + isnull(r.LastName,'') as ContactPerson,r.email as Email,c.Name  as Name,
  convert(varchar(10),br.BidDueDate,101) as BidDueDate, 
  convert(varchar(10),br.DefaultRespondByDate,101) as ResponseDueDate,S.Title AS Service,p.Title as Property  from bidrequest  as br 
  inner join bidvendor as bv on br.BidRequestKey = bv.BidRequestKey
   inner join company as c on c.companykey = bv.vendorkey
  inner join Resource as r on r.companykey = c.companykey  
  inner join property as p on p.propertykey = br.propertykey 
  inner join service as s on s.ServiceKey = br.ServiceKey
  where br.BidRequestKey = @BidRequestkey 
end
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_GetPropertyForMail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
--  [site_BidRequest_GetPropertyForMail] 2716  
CREATE PROCEDURE [dbo].[site_BidRequest_GetPropertyForMail]     
@BidVendorKey int  
AS      
  begin   

  declare  @paymentMethod int 
  declare  @amount nvarchar(max)

  declare  @vendorKey  int

  select  @vendorKey =  (select VendorKey  from  BidVendor where  BidVendorKey =@BidVendorKey)  
  select @paymentMethod  = (select COUNT(PaymentMethodKey)  from  PaymentMethod where  CompanyKey = @vendorKey )

  if(@paymentMethod is  null or  @paymentMethod = 0)
  begin
 
select pr.Title as Property, convert(int ,nv.Balance )as  BidRequestAmount,  
  
  (select top(1) rs.FirstName + ' ' + rs.LastName  from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey ) as ContactName,      
  (select top(1) rs.Work from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber,      
  (select top(1) rs.Work2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber2,      
  (select top(1) rs.Email from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email,      
  (select top(1) cp.LegalName from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as CompanyName   
  
from bidVendor as bv  
inner join bidrequest as br on br.BidRequestKey = bv.BidRequestKey  
inner join Property as pr on pr.PropertyKey = br.PropertyKey  
inner  join  Invoice  nv on nv.ReferenceNumber = bv.BidVendorKey
where bv.bidvendorkey = @BidVendorKey  
  end
  else
  begin
  
select pr.Title as Property,convert(int ,nv.Amount ) as  BidRequestAmount,  
  
  (select top(1) rs.FirstName + ' ' + rs.LastName  from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey ) as ContactName,      
  (select top(1) rs.Work from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber,      
  (select top(1) rs.Work2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber2,      
  (select top(1) rs.Email from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email,      
  (select top(1) cp.LegalName from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as CompanyName   
  
from bidVendor as bv  
inner join bidrequest as br on br.BidRequestKey = bv.BidRequestKey  
inner join Property as pr on pr.PropertyKey = br.PropertyKey  
inner  join  Invoice  nv on nv.ReferenceNumber = bv.BidVendorKey
where bv.bidvendorkey = @BidVendorKey  
  end


end  





GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_GetReplacementforRejected]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
---site_BidRequest_GetReplacementforRejected    
CREATE procedure [dbo].[site_BidRequest_GetReplacementforRejected]    
as    
begin    
    
declare @bidrequest int    
declare @currentwaiting int    
declare @newrequired int    
declare @invited table    
(inventedid int identity(1,1),    
bidrequestkey int,    
companykey int,    
ResourceKey int,    
BidDueDate  nvarchar(max),
Email nvarchar(max), 
vendorname nvarchar(max),
CompanyName nvarchar(max),
BidTitle nvarchar(max),
PropertyTitle nvarchar(max),
BidVendorID varchar(255),    
IsAssigned int,    
RespondByDate datetime,    
DateAdded datetime,    
LastModificationTime datetime,    
BidVendorStatus int    
)    
    
DECLARE RReamining_BR CURSOR FOR     
select bidrequestkey, currentwaiting, (5 - currentwaiting) as newrequired from     
(select bidrequestkey, (select count(1) from BidVendor where bidvendor.bidrequestkey = bidrequest.bidrequestkey and IsAssigned = 0 and BidVendorStatus not in (select lookupkey from lookup    
where lookuptypekey = 7 and title = 'Not Interested')) as currentwaiting from bidrequest where modulekey = 100 and BidRequestStatus = 601)i where currentwaiting < 5    
    
	
DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)

OPEN RReamining_BR;    
FETCH NEXT FROM RReamining_BR INTO @bidrequest,@currentwaiting,@newrequired;    
    
WHILE @@FETCH_STATUS = 0      
BEGIN    
    
	
select @LAT = Latitude, @LONG = Longitude from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @bidrequest)

SET @geo1= geography::Point(@LAT, @LONG, 4326)

       
 insert into @invited    
 select top (@newrequired) @bidrequest, cp.CompanyKey, rs.Email, br.Title as BidTitle, pp.Title as PropertyTitle,cp.Name as CompanyName, br.BidDueDate, rs.FirstName +rs.LastName as Vendorname , null, '', 0, DATEADD(Day,2,getdate()), getdate(), getdate(),       
 (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Vendor Status') and LookUp.Title in ('In Progress'))  from Company as cp       
 inner join resource as rs on rs.CompanyKey = cp.CompanyKey   
 left join  Bidrequest  br on  br.BidrequestKey = @bidrequest
 left join  Property  pp on  pp.PropertyKey =  br.PropertyKey 
 inner join VendorService as vs on cp.CompanyKey = vs.VendorKey and  vs.ServiceKey = (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @bidrequest)    
 inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey  
 where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and       
 LookUp.Title in ('Company Vendor','Vendor')) and cp.Status = 101 and rs.PrimaryContact = 1      
 and cp.companykey not in (select bv.vendorkey from bidvendor bv where bv.bidrequestkey = @bidrequest)    
 --and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5
    
 insert into BidVendor     
 select bidrequestkey, companykey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus from @invited    
    
        FETCH NEXT FROM RReamining_BR into @bidrequest,@currentwaiting,@newrequired;      
    END;    
    
CLOSE RReamining_BR;    
DEALLOCATE RReamining_BR;    
    
select * from @invited    
    
end
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_GetStatusListForDDL]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
    
  --site_BidRequest_GetStatusListForDDL '',''  
CREATE PROCEDURE [dbo].[site_BidRequest_GetStatusListForDDL]    
--site_BidRequest_SelectIndexPagingBidRequestVender 100,1,'','order by Statuslookup desc',0,3270,16    
@para1 nvarchar(100),    
@para2 nvarchar(100)    
AS    
BEGIN    
    
--declare @MessageStatusNew nvarchar(100)    
--declare @ModuleKey nvarchar(100)    
--Select * From Module where Controller='PMBidRequests'    
--select LookUpKey,Title from lookup     
--where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Vendor Status') --and Title='New'    
    
select * from (select 'Closed' as Title,CONCAT((select LookUpKey from [LookUp] where LookUpTypeKey in (Select LookUpTypeKey from LookUpType where title = 'Bid Vendor Status') and Title = 'Not Interested'), ', ',(select LookUpKey from [LookUp] where LookUpTypeKey in (Select LookUpTypeKey from LookUpType where title = 'Bid Status') and Title = 'Rejected')) as  LookUpKey    
from [LookUp] l     
inner join  LookUpType lt on l.LookUpTypeKey = lt.LookUpTypeKey    
where lt.Title like '%Bid Vendor Status%'    
    
union         
select 'Open' as Title,CONCAT((select LookUpKey from [LookUp] where LookUpTypeKey in (Select LookUpTypeKey from LookUpType where title = 'Bid Vendor Status') and Title = 'In Progress'), ', ', (select LookUpKey from [LookUp] where LookUpTypeKey in (Select 
  
   
 LookUpTypeKey from LookUpType where title = 'Bid Vendor Status') and Title = 'Submitted'),', ',(select LookUpKey from [LookUp] where LookUpTypeKey in (Select    
 LookUpTypeKey from LookUpType where title = 'Bid Vendor Status') and Title = 'Interested')) as  LookUpKey    
from [LookUp] l     
inner join  LookUpType lt on l.LookUpTypeKey = lt.LookUpTypeKey    
where lt.Title like '%Bid Vendor Status%' )i order by title desc    
    
    
END  

select *  from LookUp
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_GetVendorsForBidRequestByAlgorithm]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
        
              
                
-- [site_BidRequest_GetVendorsForBidRequestByAlgorithm] 16361,106               
CREATE procedure [dbo].[site_BidRequest_GetVendorsForBidRequestByAlgorithm]                
@BidRequestkey int,                
@Modulekey int = 100   
As                
begin                
                
declare @count int                
                
                
DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)              
              
select @LAT =isnull(Latitude,''), @LONG =isnull(Longitude,'') from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @BidRequestkey)              
              
SET @geo1= geography::Point(@LAT, @LONG, 4326)              
              
select @count = count(1) from BidVendor where BidVendor.BidRequestKey = @BidRequestkey                
                
if(@count = 0 and @Modulekey =100)                
begin                
 insert into BidVendor                
 select top 5 @BidRequestkey, cp.CompanyKey, null, '', 0, DATEADD(Day,2,getdate()), getdate(), getdate(),                 
 (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Vendor Status') and LookUp.Title in ('In Progress'))                
  from Company as cp                   
 inner join VendorService as vs on cp.CompanyKey = vs.VendorKey and  vs.ServiceKey = (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)                
 inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey              
 where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and                 
 LookUp.Title in ('Company Vendor','Vendor')) and cp.Status = 101               
      
 and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5              
        order by NEWID()         
              
end                
              
Declare @TotalApceptRecord int                
select  @TotalApceptRecord=count(1)                
from BidVendor bv                
inner join Company c on c.companyKey = bv.VendorKey                  
where bv.BidRequestKey = @BidRequestkey            
                
                
                
select @TotalApceptRecord as TotalApceptRecord, Name,bv.BidVendorKey,bv.VendorKey,             
(select top 1 isnull(Resource.FirstName, '') + ' ' + isnull(Resource.LastName,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'ContactPerson',             
convert(varchar(10),bb.LastModificationTime,101) as RespondByDate,convert(varchar(10),br.DefaultRespondByDate,101) as DefaultRespondByDate,  bb.Description as Descrip,              
isnull((select top(1) Total from bid where bid.BidVendorKey = bv.bidvendorkey and bid.BidStatus in (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Status') and LookUp.Title in ('Submitted','Accepted'))),0) as BidAmount,                
(select top 1 service.Title from Service where Service.ServiceKey = (select BidRequest.ServiceKey from BidRequest where BidRequestKey = @BidRequestkey)) as Service, bv.VendorKey as CompanyKey,                
(select top 1 l.Title from [LookUp] l where l.LookUpKey = bv.BidVendorStatus) as BidVendorStatus, (select top 1 l.Title from [LookUp] l where l.LookUpKey = br.BidRequestStatus) as BidRequeststatus,          
(select top 1 isnull(Resource.Email,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Email',             
bv.IsAssigned                
from BidVendor bv                
inner join Company c on c.companyKey = bv.VendorKey            
inner join BidRequest br on  br.BidRequestKey = bv.BidRequestKey          
left  join  bid   bb  on  bb.BidVendorKey = bv.BidVendorKey        
where bv.BidRequestKey = @BidRequestkey         
  --      if(@BidvendorKey != 0)    
  --begin    
  -- declare @Bidvendor int     
  --select  @Bidvendor = (Select  Max(BidVendorKey)+1 from  BidVendor)    
  --update Document     
  --set objectKey = @Bidvendor    
  --where objectKey =  @BidvendorKey    
  --end    
    
         
end  
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_GetVendorsForBidRequestByAlgorithm_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
      
-- [site_BidRequest_GetVendorsForBidRequestByAlgorithm_Copy] 4253,7363            
CREATE procedure [dbo].[site_BidRequest_GetVendorsForBidRequestByAlgorithm_Copy]            
--[site_BidRequest_GetVendorsForBidRequestByAlgorithm_Copy] 1106,7361,100    
@BidRequestkey int,          
@ResourceKey int,    
@Modulekey int = 100            
As            
begin            
            
declare @count int            
            
                  
DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)                
                
select @LAT =isnull(Latitude,''), @LONG =isnull(Longitude,'') from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @BidRequestkey)                
                
SET @geo1= geography::Point(@LAT, @LONG, 4326)                
                       
          
select @count = count(1) from BidVendor where BidVendor.BidRequestKey = @BidRequestkey            
            
if(@count = 0 and @Modulekey =100)            
begin            
 insert into BidVendor            
 select  top 5 @BidRequestkey, cp.CompanyKey, null, '', 0,(Select top 1 DefaultRespondByDate from BidRequest where BidRequestKey = @BidRequestkey), getdate(), getdate(),           -- DATEADD(Day,2,getdate())  
 (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Vendor Status') and LookUp.Title in ('In Progress'))            
  from Company as cp               
 inner join VendorService as vs on cp.CompanyKey = vs.VendorKey and  vs.ServiceKey = (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)            
 inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey          
 where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and             
 LookUp.Title in ('Company Vendor','Vendor')) and cp.Status = 101           
  
        
 and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5         
       order by NEWID()      
          
end            
    
Declare @TotalApceptRecord int            
select  @TotalApceptRecord=count(1)            
from BidVendor bv            
inner join Company c on c.companyKey = bv.VendorKey              
where bv.BidRequestKey = @BidRequestkey        
            
            
            
select  distinct @TotalApceptRecord as TotalApceptRecord, Name,bv.BidVendorKey,bv.VendorKey,         
(select top 1 isnull(Resource.FirstName, '') + ' ' + isnull(Resource.LastName,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'ContactPerson',         
--convert(varchar(10),bb.LastModificationTime,101) as RespondByDate,convert(varchar(10),br.DefaultRespondByDate,101) as DefaultRespondByDate,  bb.Description as Descrip,       
convert(varchar(10),bb.LastModificationTime,101) as RespondByDate,convert(varchar(10),bv.RespondByDate,101) as DefaultRespondByDate,  bb.Description as Descrip,         
isnull((select top(1) Total from bid where bid.BidVendorKey = bv.bidvendorkey and bid.BidStatus in (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Status') and LookUp.Title in ('Submitted','Accepted'))),0) as BidAmount,            
(select top 1 service.Title from Service where Service.ServiceKey = (select BidRequest.ServiceKey from BidRequest where BidRequestKey = @BidRequestkey)) as Service, bv.VendorKey as CompanyKey,            
(select top 1 l.Title from [LookUp] l where l.LookUpKey = bv.BidVendorStatus) as BidVendorStatus, (select top 1 l.Title from [LookUp] l where l.LookUpKey = br.BidRequestStatus) as BidRequeststatus,      
(select top 1 isnull(Resource.Email,'') from Resource where Resource.CompanyKey = c.CompanyKey and Resource.PrimaryContact = 1)  as 'Email',     bv.IsAssigned ,    
   (select top 1(select (CASE WHEN (ab.ModuleKey = @modulekey) and ab.ForResource = @ResourceKey and ab.Status = 900    
   THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource =@ResourceKey    
   and ByResource = (select top 1 ResourceKey from Resource where CompanyKey = bv.VendorKey)    
   and ab.status = 900)AS priority,    
   (select top 1 (CASE WHEN (ab.ModuleKey = @modulekey and ab.ForResource = @ResourceKey) and ab.Status = 900    
   THEN (select STUFF((select ',' + Convert(    
   nvarchar(max), ab1.Id) from ABNotification ab1    
   inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900     
   and vs.ForResource  = @ResourceKey and vs.ObjectKey = br.BidRequestKey    
    FOR XML PATH('')    
),1,1,'')) ELSE '0' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource = @ResourceKey    
and ByResource = (select top 1 ResourceKey from Resource where CompanyKey = bv.VendorKey)     
and ab.status = 900)AS NotificationId,    
    
(select top 1 (CASE WHEN (ab.ModuleKey = @modulekey and ab.ForResource = @ResourceKey and ab.Status = 900)    
   THEN (select STUFF((select ',' + Convert(    
   nvarchar(max), ab1.NotificationType) from ABNotification ab1    
   inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900    
   and vs.ForResource  = @ResourceKey and vs.ObjectKey = br.BidRequestKey    
    FOR XML PATH('')    
),1,1,'')) ELSE '0' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource = @ResourceKey    
and ByResource = (select top 1 ResourceKey from Resource where CompanyKey = bv.VendorKey)    
and ab.status = 900)AS NotificationType    
from BidVendor bv            
inner join Company c on c.companyKey = bv.VendorKey        
inner join BidRequest br on  br.BidRequestKey = bv.BidRequestKey      
left  join  bid   bb  on  bb.BidVendorKey = bv.BidVendorKey    
where bv.BidRequestKey = @BidRequestkey     
end    


GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_GetWorkOrderCreatedByBidRequest]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  site_BidRequest_GetWorkOrderCreatedByBidRequest 'test status'
CREATE Procedure [dbo].[site_BidRequest_GetWorkOrderCreatedByBidRequest]
@BidRequestKey int
As
Begin
--select Count(*) as Count from bidrequest where  modulekey = '106' and title in(select title from bidrequest where title = @Title and modulekey = '100')
select Count(*) as Count from bidrequest where modulekey = '100' and BidRequestKey in (select ParentBidRequestKey from bidrequest where BidRequestKey = @BidRequestKey)
End
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_InsertOne]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_BidRequest_InsertOne]
	@propertyKey INT,
	@resourceKey INT,
	@serviceKey INT,
	@title VARCHAR(150),
	@bidDueDate SMALLDATETIME,
	@ResponseDueDate DATETIME,
	@description VARCHAR(500),
	@bidRequestStatus INT,
	@modulekey INT,
	@bidRequestKey INT OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


    declare @BidRequestTypeKey int
	if @modulekey = 100
	begin
	select  @BidRequestTypeKey = ModuleKey from Module where Controller = 'BidRequest'
	end
	else
	begin 
	select  @BidRequestTypeKey = ModuleKey from Module where Controller = 'WorkOrder'
	end

	

	declare @statusTypeKey int
	select  @statusTypeKey = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'In Progress') from LookUpType as lu where Title = 'Bid Request Status'

 
	INSERT INTO [BidRequest]
		([PropertyKey], [ResourceKey], [ServiceKey], [Title], [BidDueDate], [StartDate],[EndDate], [Description], [DateAdded], BidRequestStatus,[LastModificationTime], ModuleKey, 
		[DefaultRespondByDate])
		VALUES
		(@propertyKey, @resourceKey, @serviceKey, @title, @bidDueDate, '','', @description,getdate(), @statusTypeKey ,GETDATE(),@BidRequestTypeKey,@ResponseDueDate)

SELECT @bidRequestKey = @@IDENTITY
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequest]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_BidRequest_SelectIndexPagingBidRequest 100000,1,'1st July 20 BR 6','order by Title asc',1063,0,0
CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequest]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@ResourceKey int,
@PropertyKey int,
@BidRequestStatus int,
@modulekey int  = 100
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    --For Cout total unread message
declare @MessageStatusNew nvarchar(100)
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')

declare @ModuleKeyForMessage nvarchar(100)
if(@modulekey=100)
begin
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'
end
else
begin
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'
  end
  set @qrytotal =   'declare @total int  
  select  @total  = count(*) from [BidRequest] as br

   inner join Property as ps on ps.PropertyKey = br.PropertyKey 
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' )) 
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 )
and (br.BidRequestStatus = '+CONVERT(nvarchar,@BidRequestStatus)+' or '+CONVERT(nvarchar,@BidRequestStatus)+' = 0 )

and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or 
	' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))
	or (' + Convert(varchar,@resourcekey) + ' = 0))' 

  set @qry = ' select   *,   
  (Select Count(1) From Message Where  MessageStatus='''+@MessageStatusNew+''' and ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  bv.BidRequestKey in
    (Select br.BidRequestKey From BidRequest br where br.BidRequestKey =  j.BidRequestKey and ModuleKey='''+@ModuleKeyForMessage+''') and bv.VendorKey not in 
	(Select CompanyKey From Resource where '+Convert(nvarchar(50),'ResourceKey')+'='+ Convert(nvarchar(50), @ResourceKey)+'))) as NewMsg

  from ( select * , @total  as TotalRecord, row_number() over('+@Sort+') as  rownum from ( 
  select br.BidRequestKey,br.Title,ps.Title as PropertyName
  ,(case when convert(varchar(10),br.StartDate,101)=''01/01/1900'' then '''' else convert(varchar(10),br.StartDate,101) end) as StartDate,convert(varchar(10),BidDueDate,101) as BidDueDate
 ,(select count(1) from BidVendor bv where bv.BidRequestKey = br.BidRequestKey and bv.BidVendorStatus not in (700, 703,800,803)) as NoofBids
 , (select top 1 l.Title from LookUpType lt inner join [LookUp] l on lt.LookUpTypeKey = l.LookUpTypeKey and l.LookUpKey = br.BidRequestStatus) as BidRequestStatus
   from [BidRequest] as br

   inner join Property as ps on ps.PropertyKey = br.PropertyKey 

where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 )
and (br.BidRequestStatus = '+CONVERT(nvarchar,@BidRequestStatus)+' or '+CONVERT(nvarchar,@BidRequestStatus)+' = 0 )

and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or 
	' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))
	or (' + Convert(varchar,@resourcekey) + ' = 0))
  ) i 
  )j
  where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)        
      exec( @qrytotal + @qry)          
end
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequest_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  
  
-- site_BidRequest_SelectIndexPagingBidRequest_New 500,1,'','order by Title asc',1063,2106,0,0
CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequest_New]  
@PageSize int,                             
@PageIndex int,                             
@Search nvarchar(max),                                
@Sort nvarchar(max),  
@ResourceKey int,  
@PropertyKey int,  
@BidRequestStatus int,  
@modulekey int  = 100  
AS  
BEGIN  
  declare @qrywhere varchar(max)                      
  declare @qrytotal varchar(max)                       
  declare @qry varchar(max)      
    --For Cout total unread message  
declare @MessageStatusNew nvarchar(100)  
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')  
  --@BidRequestStatus 
  --open 1
  --close 2 
  --all 0
declare @ModuleKeyForMessage nvarchar(100)  
if(@modulekey=100)  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'  
end  
else  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'  
  end  
  set @qrytotal =   'declare @total int    
  select  @total  = count(*) from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))   
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 )  
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))'   
  
  set @qry = ' select   *,     
  (Select Count(1) From Message Where  MessageStatus='''+@MessageStatusNew+''' and ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  bv.BidRequestKey in  
    (Select br.BidRequestKey From BidRequest br where br.BidRequestKey =  j.BidRequestKey and ModuleKey='''+@ModuleKeyForMessage+''') and bv.VendorKey not in   
 (Select CompanyKey From Resource where '+Convert(nvarchar(50),'ResourceKey')+'='+ Convert(nvarchar(50), @ResourceKey)+'))) as NewMsg  
  
  from ( select * , @total  as TotalRecord, row_number() over('+@Sort+') as  rownum from (   
  select br.BidRequestKey,br.Title,ps.Title as PropertyName  
  ,(case when convert(varchar(10),br.StartDate,101)=''01/01/1900'' then '''' else convert(varchar(10),br.StartDate,101) end) as StartDate,convert(varchar(10),BidDueDate,101) as BidDueDate  
 ,(select count(1) from Bid b where b.BidVendorKey in (Select BidVendorKey from BidVendor bv where bv.BidRequestKey = br.BidRequestKey) and b.BidStatus  = 801) as NoofBids  
 , (select top 1 l.Title from LookUpType lt inner join [LookUp] l on lt.LookUpTypeKey = l.LookUpTypeKey and l.LookUpKey = br.BidRequestStatus) as BidRequestStatus  
   from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
  
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))  
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 ) 
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))  
  ) i   
  )j  
  where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)   
      print(@qrytotal + @qry)          
      exec( @qrytotal + @qry)            
end  
  



  --select * from bidrequest where propertykey = 2106 and bidrequeststatus >= 600 and bidrequeststatus <= 601
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequest_New_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- site_BidRequest_SelectIndexPagingBidRequest_New_Copy 10,1,'','order by Title asc',7446,0,1,100
CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequest_New_Copy]  
@PageSize int,                             
@PageIndex int,                             
@Search nvarchar(max),                                
@Sort nvarchar(max),  
@ResourceKey int,  
@PropertyKey int,  
@BidRequestStatus int,  
@modulekey int  = 100  
AS  
BEGIN  
  declare @qrywhere varchar(max)                      
  declare @qrytotal varchar(max)                       
  declare @qry varchar(max)      
    --For Cout total unread message  
declare @MessageStatusNew nvarchar(100)  
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')  
  --@BidRequestStatus 
  --open 1
  --close 2 
  --all 0
declare @ModuleKeyForMessage nvarchar(100)  
if(@modulekey=100)  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'  
end  
else  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'  
  end  
  set @qrytotal =   'declare @total int    
  select  @total  = count(*) from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))   
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 )  
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603,604) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))'   
  
  set @qry = ' select   *,     
  (Select Count(1) From Message Where  MessageStatus='''+@MessageStatusNew+''' and ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  bv.BidRequestKey in  
    (Select br.BidRequestKey From BidRequest br where br.BidRequestKey =  j.BidRequestKey and ModuleKey='''+@ModuleKeyForMessage+''') and bv.VendorKey not in   
 (Select CompanyKey From Resource where '+Convert(nvarchar(50),'ResourceKey')+'='+ Convert(nvarchar(50), @ResourceKey)+'))) as NewMsg  
  
  from ( select * , @total  as TotalRecord, row_number() over('+@Sort+') as  rownum from (   
  select br.BidRequestKey,br.Title,ps.Title as PropertyName  
  ,(case when convert(varchar(10),br.StartDate,101)=''01/01/1900'' then '''' else convert(varchar(10),br.StartDate,101) end) as StartDate,convert(varchar(10),BidDueDate,101) as BidDueDate  
 ,(select count(1) from Bid b where b.BidVendorKey in (Select BidVendorKey from BidVendor bv where bv.BidRequestKey = br.BidRequestKey) and b.BidStatus  = 801) as NoofBids  
 , (select top 1 l.Title from LookUpType lt inner join [LookUp] l on lt.LookUpTypeKey = l.LookUpTypeKey and l.LookUpKey = br.BidRequestStatus) as BidRequestStatus  ,
   
   (select top 1(select (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@modulekey)+' and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) 
	  THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS priority,
	  (select top 1 (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@modulekey)+' and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.Id) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationId,

(select top 1 (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@modulekey)+' and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.NotificationType) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationType
   from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
  
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))  
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 ) 
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603,604) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))  
  ) i   
  )j  
  where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)   
      print(@qrytotal + @qry)          
      exec( @qrytotal + @qry)            
end  
  



  --select * from bidrequest where propertykey = 2106 and bidrequeststatus >= 600 and bidrequeststatus <= 601
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequestPriority]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  
  
-- site_BidRequest_SelectIndexPagingBidRequestPriority 500,1,'','order by Title asc',1063,2106,0,0
CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequestPriority]  
@PageSize int,                             
@PageIndex int,                             
@Search nvarchar(max),                                
@Sort nvarchar(max),  
@ResourceKey int,  
@PropertyKey int,  
@BidRequestStatus int,  
@modulekey int  = 100  
AS  
BEGIN  
  declare @qrywhere varchar(max)                      
  declare @qrytotal varchar(max)                       
  declare @qry varchar(max)      
    --For Cout total unread message  
declare @MessageStatusNew nvarchar(100)  
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')  
  --@BidRequestStatus 
  --open 1
  --close 2 
  --all 0
declare @ModuleKeyForMessage nvarchar(100)  
if(@modulekey=100)  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'  
end  
else  
begin  
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'  
  end  
  set @qrytotal =   'declare @total int    
  select  @total  = count(*) from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))   
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 )  
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))'   
  
  set @qry = ' ;with cusTable as (select   *,     
  (Select Count(1) From Message Where  MessageStatus='''+@MessageStatusNew+''' and ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  bv.BidRequestKey in  
    (Select br.BidRequestKey From BidRequest br where br.BidRequestKey =  j.BidRequestKey and ModuleKey='''+@ModuleKeyForMessage+''') and bv.VendorKey not in   
 (Select CompanyKey From Resource where '+Convert(nvarchar(50),'ResourceKey')+'='+ Convert(nvarchar(50), @ResourceKey)+'))) as NewMsg  
  
  from ( select * , @total  as TotalRecord, row_number() over('+@Sort+') as  rownum2 from (   
  select Distinct(br.BidRequestKey),br.Title,ps.Title as PropertyName  
  ,(case when convert(varchar(10),br.StartDate,101)=''01/01/1900'' then '''' else convert(varchar(10),br.StartDate,101) end) as StartDate,convert(varchar(10),BidDueDate,101) as BidDueDate  
 ,(select count(1) from Bid b where b.BidVendorKey in (Select BidVendorKey from BidVendor bv where bv.BidRequestKey = br.BidRequestKey) and b.BidStatus  = 801) as NoofBids  
 , (select top 1 l.Title from LookUpType lt inner join [LookUp] l on lt.LookUpTypeKey = l.LookUpTypeKey and l.LookUpKey = br.BidRequestStatus) as BidRequestStatus,
 (select (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKey)+' and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 1 ELSE 0 END)) AS priority,
		(CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKey)+' and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 
		(select STUFF((select '','' + Convert(nvarchar(max), ab1.Id) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END)as NotificationId,
		(CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKey)+'  and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 
         (select STUFF((select '','' + Convert(nvarchar(max), ab1.NotificationType) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey
    FOR XML PATH('''')
),1,1,'''')) ELSE null END) as NotificationType
   from [BidRequest] as br  
  
   inner join Property as ps on ps.PropertyKey = br.PropertyKey   
  LEFT Outer Join ABNotification ab on ab.ObjectKey = br.BidRequestKey and ab.status = 900 and ab.ForResource = '+Convert(varchar,@ResourceKey)+' 
where br.modulekey = ' + CONVERT(nvarchar,@modulekey) + ' and  ((br.Title like ''%'+ @Search +'%'') or (ps.Title like ''%'+ @Search +'%'') or ps.Title + '' '' + br.Title like ''%'+@Search+'%''   or ( '''+@Search+''' = '''' ))  
and (ps.PropertyKey = '+CONVERT(nvarchar,@PropertyKey)+' or '+CONVERT(nvarchar,@PropertyKey)+' = 0 ) 
and ((br.BidRequestStatus in (600,601) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (br.BidRequestStatus in (602,603) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)
  
and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')  
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or   
 ' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))  
 or (' + Convert(varchar,@resourcekey) + ' = 0))  
  ) i   
  )j ), q2 as( select * from(select *,ROW_NUMBER() over (partition by priority '+@Sort+') as rownum1 from cusTable)i)
  select * from (select *,ROW_NUMBER() over (order by priority desc) as rownum from q2)k 
  where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)   
      print(@qrytotal + @qry)          
      exec( @qrytotal + @qry)            
end  
  



  --select * from bidrequest where propertykey = 2106 and bidrequeststatus >= 600 and bidrequeststatus <= 601
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequestVender]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequestVender]    
--site_BidRequest_SelectIndexPagingBidRequestVender 100,1,'','order by Title asc',0,5320,2103,1,'','','BidRequest'    
@PageSize int,                               
@PageIndex int,                               
@Search nvarchar(max),                                  
@Sort nvarchar(max),    
@BidVendorKey int,    
@CompanyKey int,    
@UserId int,    
@BidRequestStatus int,    
@BiddueDateFrom nvarchar(50),    
@BiddueDateTo nvarchar(50),    
@ModuleController nvarchar(50)    
AS    
BEGIN    
--For Get Submitted(BidRequest Table) Record    
declare @BRStatus nvarchar(100)    
select top(1) @BRStatus=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status') and Title='Submitted'    
    
--For Cout total unread message    
declare @MessageStatusNew nvarchar(100)    
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')    
    
Declare @msglookuptype nvarchar(max)    
    
declare @ModuleKeyForMessage nvarchar(100)    
if(@ModuleController='BidRequest')    
begin    
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'    
set @msglookuptype='Bid Vendor Status'    
end    
else    
begin    
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'    
set @msglookuptype='Bid Vendor Status'    
--set @msglookuptype='Bid Status'    
end    
declare @ModuleKeyBr nvarchar(100)    
Select @ModuleKeyBr=ModuleKey From Module where Controller=@ModuleController    
--Update BidRequest Set BidRequestStatus=601 ,MoDuleKey=106 where BidRequestKey=1012    
--Select * From Module where Controller='BidRequest'    
--select * from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status') and Title='Submitted'    
  declare @qrywhere varchar(max)                        
  declare @qrytotal varchar(max)                         
  declare @qry varchar(max)        
  declare @BidSubWhere varchar(max)    
  if(@BidRequestStatus = 803)    
  begin    
 set @BidSubWhere = '';    
  end    
  else    
  begin    
 set @BidSubWhere = '';    
  end    
    --or '+@BidRequestKey+'=''0''    
  set @qrywhere = 'where     
  (br.ModuleKey='''+@ModuleKeyBr+''') and    
  (br.BidRequestStatus='''+@BRStatus+''') and (br.BidRequestStatus <> 600)      
  --(('''+convert(nvarchar(50),@BidRequestStatus)+'''=convert(nvarchar(50),0) or convert(nvarchar(50),bv.BidVendorStatus)='''+convert(nvarchar(50),@BidRequestStatus)+'''    
  --or convert(nvarchar(50),Bid.BidStatus)='''+convert(nvarchar(50),@BidRequestStatus)+'''))     
and ((bv.BidVendorStatus in (700,701,702,802)  and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (bv.BidVendorStatus in (703,803) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)      
   and    
('''+@BiddueDateFrom+'''='''' or  Convert(nvarchar(50), br.BidDueDate,101) >'''+Convert(nvarchar(50),@BiddueDateFrom,101) +''') and    
  ('''+@BiddueDateTo+'''='''' or Convert(nvarchar(50), br.BidDueDate,101) <'''+Convert(nvarchar(50),@BiddueDateTo,101) +''') and    
  '+convert(nvarchar(50),'bv.VendorKey')+' ='+convert(nvarchar(50), @CompanyKey)+' and     
  ('+convert(nvarchar(50),'bv.BidVendorKey')+'='+convert(nvarchar(50), @BidVendorKey)+' or '+convert(nvarchar(50),@BidVendorKey)+'=''0'')     
  and ((br.Title like ''%'+ @Search +'%'') or (prp.Title like ''%'+ @Search +'%'')     
  -- or (br.DateAdded like ''%'+ @Search +'%'')     
   --or (DefaultRespondByDate like ''%'+ @Search +'%'')     
   or ( '''+@Search+''' = '''' )) and (bv.RespondByDate >= '+convert(nvarchar(50),GETDATE(),101)+' and bv.BidVendorStatus != 703)'+@BidSubWhere+' '    
      
  set @qrytotal =   'declare @total int  select  @total  = count(*)   from [BidRequest] as br   
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey    
 inner join company as cp on cp.CompanyKey = bv.vendorKey    
 inner join Property as prp on prp.PropertyKey = br.PropertyKey    
 inner join Service as ser on ser.ServiceKey = br.ServiceKey     
 left join bid on bid.bidvendorkey = bv.bidvendorkey      
    '+@qrywhere + ''     
    
  set @qry = 'select *     
  ,case when (bidstatus = ''Accepted'' or BidStatus = ''Rejected'') then BidStatus else Statuslook end as Statuslookup,    
  (Select Count(1) From Message Where ObjectKey=i.BidVendorKey and ( ModuleKey='''+@ModuleKeyForMessage+''') and MessageStatus='''+@MessageStatusNew+''' and ResourceKey not in ((Select ResourceKey From [User] where '+Convert(nvarchar(50),'UserKey')+'='+Convert(nvarchar(50), @UserId)+'))) as NewMsg    
  from (Select *, row_number() over('+@Sort+') as  rownum    
 From ( select br.BidRequestKey,    
  br.ResourceKey,    
  br.Title,    
     
   Convert(nvarchar(12), br.DefaultRespondByDate,101) as DefaultRespondByDate,    
    Convert(nvarchar(12), br.DateAdded,101) as DateAdded,    
     
  br.Description,    
 Convert(nvarchar(12), br.BidDueDate,101) as BidDueDate,    
 Convert(nvarchar(12), bv.RespondByDate,101) as VendorBidDueDate,    
  Convert(nvarchar(12), br.StartDate,101) as StartDate,    
  (Select top(1) us1.ResourceKey From [User] us1 where '+convert(nvarchar(50),'us1.UserKey')+' ='+convert(nvarchar(50),@UserId)+') as LoginResourceKey,    
  ser.Title as Service,    
  (select top(1) cp.Name from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as CompanyName,    
  prp.Title as Property,    
  prp.NumberOfUnits as NumberOfUnits,    
  prp.Address as Address,    
  prp.Address2 as Address2,    
  prp.City as City,    
   (Select top(1) Title From State where StateKey=prp.State) as State,    
  prp.Zip as Zip,    
 -- res.FirstName + '' '' + res.FirstName as ContactName,    
  --res.Work as WorkNumber,    
 -- res.Work2 as WorkNumber2,     
 -- res.Email as Email,    
  --res.Email2 as Email2,      
  --(Select top(1) resc.FirstName + '' '' + resc.LastName  From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as ContactName,    
  --(Select top(1) resc.Work From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber,    
  --(Select top(1) resc.Work2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber2,    
  --(Select top(1) resc.Email From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email,    
  --(Select top(1) resc.Email2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email2,    
    
  (select top(1) rs.FirstName + '' '' + rs.LastName from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey ) as ContactName,    
  (select top(1) rs.Work from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber,    
  (select top(1) rs.Work2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber2,    
  (select top(1) rs.Email from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email,    
  (select top(1) rs.Email2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email2,    
    
    
      
  0 as NoofBids,    
   BidRequestStatus,    
   BidVendorStatus,     
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title=''Bid Vendor Status'')) as Statuslookup,     
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title=''Bid Status'')) as Statuslookup,     
  isnull((select top 1 title from lookup lu where lu.lookupkey = bid.BIdstatus),'''') as bidstatus,      
  (select top(1) Title from lookup where     
 ( LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt) )    
  ) as Statuslook,     
    --where lt.Title='''+@msglookuptype+''')    
   bv.BidVendorKey as BidVendorKey,    
   @total  as TotalRecords    
   from [BidRequest] as br    
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey    
 inner join company as cp on cp.CompanyKey = bv.vendorKey    
 inner join Property as prp on prp.PropertyKey = br.PropertyKey    
 inner join Service as ser on ser.ServiceKey = br.ServiceKey    
 left join bid on bid.bidvendorkey = bv.bidvendorkey      
    
   '+@qrywhere+'      
  )j)    
   i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)     
      print(@qrytotal + @qry)                 
    
    
exec( @qrytotal + @qry)              
END
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequestVender_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



        
        
          
CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequestVender_Copy]            
--site_BidRequest_SelectIndexPagingBidRequestVender_Copy 10,1,'','order by Title desc',0,8399,5240,1,'','','WorkOrder',9476            
@PageSize int,                                       
@PageIndex int,                                       
@Search nvarchar(max),                                          
@Sort nvarchar(max),            
@BidVendorKey int,            
@CompanyKey int,            
@UserId int,            
@BidRequestStatus int,            
@BiddueDateFrom nvarchar(50),            
@BiddueDateTo nvarchar(50),            
@ModuleController nvarchar(50),        
@ResourceKey int = 0        
AS            
BEGIN            
--For Get Submitted(BidRequest Table) Record            
declare @BRStatus nvarchar(100)            
select top(1) @BRStatus=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status') and Title='Submitted'            
            
--For Cout total unread message            
declare @MessageStatusNew nvarchar(100)            
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')            
            
Declare @msglookuptype nvarchar(max)            
            
declare @ModuleKeyForMessage nvarchar(100)            
if(@ModuleController='BidRequest')            
begin            
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'            
set @msglookuptype='Bid Vendor Status'            
end            
else            
begin            
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'            
set @msglookuptype='Bid Vendor Status'            
--set @msglookuptype='Bid Status'            
end            
declare @ModuleKeyBr nvarchar(100)            
Select @ModuleKeyBr=ModuleKey From Module where Controller=@ModuleController            
--Update BidRequest Set BidRequestStatus=601 ,MoDuleKey=106 where BidRequestKey=1012            
--Select * From Module where Controller='BidRequest'            
--select * from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status') and Title='Submitted'            
  declare @qrywhere varchar(max)                                
  declare @qrytotal varchar(max)                                 
  declare @qry varchar(max)                
  declare @BidSubWhere varchar(max)            
  if(@BidRequestStatus = 803)            
  begin            
 set @BidSubWhere = '';            
  end            
  else            
  begin            
 set @BidSubWhere = '';            
  end            
    --or '+@BidRequestKey+'=''0''            
  set @qrywhere = 'where               
  (br.ModuleKey='''+@ModuleKeyBr+''') and             
    (br.BidRequestStatus='''+@BRStatus+''' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=601) and (br.BidRequestStatus <> 600)                  
  --(('''+convert(nvarchar(50),@BidRequestStatus)+'''=convert(nvarchar(50),0) or convert(nvarchar(50),bv.BidVendorStatus)='''+convert(nvarchar(50),@BidRequestStatus)+'''              
  --or convert(nvarchar(50),Bid.BidStatus)='''+convert(nvarchar(50),@BidRequestStatus)+'''))               
and ((bv.BidVendorStatus in (701,700,702)  and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (bv.BidVendorStatus in (701,700,702,802)  and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 3 and br.BidRequestStatus != 602 and br.BidRequestStatus != 603) or(
  
bv.BidVendorStatus in (703,803,802) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)                
   and              
('''+@BiddueDateFrom+'''='''' or  Convert(nvarchar(50), br.BidDueDate,101) >'''+Convert(nvarchar(50),@BiddueDateFrom,101) +''') and              
  ('''+@BiddueDateTo+'''='''' or Convert(nvarchar(50), br.BidDueDate,101) <'''+Convert(nvarchar(50),@BiddueDateTo,101) +''') and              
  '+convert(nvarchar(50),'bv.VendorKey')+' ='+convert(nvarchar(50), @CompanyKey)+' and               
  ('+convert(nvarchar(50),'bv.BidVendorKey')+'='+convert(nvarchar(50), @BidVendorKey)+' or '+convert(nvarchar(50),@BidVendorKey)+'=''0'')               
  and ((br.Title like ''%'+ @Search +'%'') or (prp.Title like ''%'+ @Search +'%'')           
  -- or (br.DateAdded like ''%'+ @Search +'%'')               
   --or (DefaultRespondByDate like ''%'+ @Search +'%'')               
   or ( '''+@Search+''' = '''' )) and (bv.RespondByDate >= '+convert(nvarchar(50),GETDATE(),101)+'           
   --and bv.BidVendorStatus != 703          
   )'+@BidSubWhere+' '            
              
        
        
  set @qrytotal =   'declare @total int  select  @total  = count(*)   from [BidRequest] as br           
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey            
 inner join company as cp on cp.CompanyKey = bv.vendorKey            
 inner join Property as prp on prp.PropertyKey = br.PropertyKey            
 inner join Service as ser on ser.ServiceKey = br.ServiceKey             
 left join bid on bid.bidvendorkey = bv.bidvendorkey              
    '+@qrywhere + ''             
            
  set @qry = 'select *             
  ,case when (bidstatus = ''Accepted'' or BidStatus = ''Rejected'') then BidStatus else Statuslook end as Statuslookup,            
  (Select Count(1) From Message Where ObjectKey=i.BidVendorKey and ( ModuleKey='''+@ModuleKeyForMessage+''') and MessageStatus='''+@MessageStatusNew+'''         
  and ResourceKey not in ((Select ResourceKey From [User] where '+Convert(nvarchar(50),'UserKey')+'='+Convert(nvarchar(50), @UserId)+'))) as NewMsg            
  from (Select *, row_number() over('+@Sort+') as  rownum            
 From ( select br.BidRequestKey,            
  br.ResourceKey,            
  br.Title, br.ParentBidRequestKey,           
             
   Convert(nvarchar(12), br.DefaultRespondByDate,101) as DefaultRespondByDate,            
    Convert(nvarchar(12), br.DateAdded,101) as DateAdded,                        
  bid.Description,  
   Convert(nvarchar(12), bid.LastModificationTime,101) as EstimatedStartDate,
    bid.Total as TotalamountAccpect,
 Convert(nvarchar(12), br.BidDueDate,101) as BidDueDate,            
 Convert(nvarchar(12), bv.RespondByDate,101) as VendorBidDueDate,            
  Convert(nvarchar(12), br.StartDate,101) as StartDate,            
  (Select top(1) us1.ResourceKey From [User] us1 where '+convert(nvarchar(50),'us1.UserKey')+' ='+convert(nvarchar(50),@UserId)+') as LoginResourceKey,            
  ser.Title as Service,            
  (select top(1) cp.Name from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as CompanyName,            
  prp.Title as Property,            
  prp.NumberOfUnits as NumberOfUnits,            
  prp.Address as Address,            
  prp.Address2 as Address2,            
  prp.City as City,            
   (Select top(1) Title From State where StateKey=prp.State) as State,            
  prp.Zip as Zip,            
 -- res.FirstName + '' '' + res.FirstName as ContactName,            
  --res.Work as WorkNumber,            
 -- res.Work2 as WorkNumber2,             
 -- res.Email as Email,            
  --res.Email2 as Email2,              
  --(Select top(1) resc.FirstName + '' '' + resc.LastName  From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as ContactName,            
  --(Select top(1) resc.Work From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber,            
  --(Select top(1) resc.Work2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber2,            
  --(Select top(1) resc.Email From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email,            
  --(Select top(1) resc.Email2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email2,            
            
  (select top(1) rs.FirstName + '' '' + rs.LastName from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey ) as ContactName,            
  (select top(1) rs.Work from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber,            
  (select top(1) rs.Work2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber2,       
  (select top(1) rs.Email from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email,            
  (select top(1) rs.Email2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email2,            
            
            
              
  0 as NoofBids,            
   BidRequestStatus,            
   BidVendorStatus,             
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title=''Bid Vendor Status'')) as Statuslookup,             
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title=''Bid Status'')) as Statuslookup,             
  isnull((select top 1 title from lookup lu where lu.lookupkey = bid.BIdstatus),'''') as bidstatus,              
  (select top(1) Title from lookup where             
 ( LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt) )            
  ) as Statuslook,             
    --where lt.Title='''+@msglookuptype+''')            
   bv.BidVendorKey as BidVendorKey,        
   bv.IsAssigned as IsAssigned,        
   (select top 1(select (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKeyBr)+' and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and ab.Status = 900)       
 
   
   THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = br.BidRequestKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and ab.status = 900)
  
    
      
        
        
AS priority,        
   (select top 1 (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKeyBr)+' and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and ab.Status = 900)        
   THEN (select STUFF((select '','' + Convert(        
   nvarchar(max), ab1.Id) from ABNotification ab1        
   inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900  and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'')        
   and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey        
    FOR XML PATH('''')        
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'')         
and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationId,        
        
(select top 1 (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKeyBr)+' and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and ab.Status = 900)        
   THEN (select STUFF((select '','' + Convert(        
   nvarchar(max), ab1.NotificationType) from ABNotification ab1        
   inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'')        
   and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey        
    FOR XML PATH('''')        
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = br.BidRequestKey and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'')         
and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationType,        
        
   @total  as TotalRecords            
   from [BidRequest] as br            
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey            
 inner join company as cp on cp.CompanyKey = bv.vendorKey            
 inner join Property as prp on prp.PropertyKey = br.PropertyKey            
 inner join Service as ser on ser.ServiceKey = br.ServiceKey            
 left join bid on bid.bidvendorkey = bv.bidvendorkey              
            
   '+@qrywhere+'              
  )j)            
   i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)             
    --  print(@qrytotal + @qry)                         
    print(@qry)        
            
exec( @qrytotal + @qry)                      
END  

GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequestVenderById]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequestVenderById]
--site_BidRequest_SelectIndexPagingBidRequestVender 100,1,'','order by br.Title desc'
@BidVendorKey int   
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where br.BidRequestKey in (Select bk.BidRequestKey bk From BidVendor where (bk.BidVendorKey='+@BidVendorKey+')'
  
  

  set @qry = 'select * from ( select br.BidRequestKey,br.Title,br.DefaultRespondByDate,br.DateAdded,
  prp.Title as Property,
  ser.Title as Service,
  br.Description,
  br.BidDueDate,
  
  0 as NoofBids,
   BidRequestStatus
   from [BidRequest] as br
   inner join resource as rs on rs.resourceKey = br.ResourceKey
  -- inner join BidVendor as bv on bv.BidRequestKey=br.BidRequestKey
   inner join company as cp on cp.CompanyKey = rs.CompanyKey
    inner join Property as prp on prp.PropertyKey = br.PropertyKey
	inner join Service as ser on ser.ServiceKey = br.ServiceKey
	
   '+@qrywhere+'  
  ) i   '
      print(@qry)             
      exec(@qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectIndexPagingBidRequestVenderPriority]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_BidRequest_SelectIndexPagingBidRequestVenderPriority]              
--site_BidRequest_SelectIndexPagingBidRequestVenderPriority 100,1,'bidrequest12','order by Title asc',0,6410,3134,,'','','BidRequest',7488              
--site_BidRequest_SelectIndexPagingBidRequestVenderPriority 10000,1,'','order by Title asc',0,11675,7444,1,'','','WorkOrder',12799           
@PageSize int,                                         
@PageIndex int,                                         
@Search nvarchar(max),                                            
@Sort nvarchar(max),              
@BidVendorKey int,              
@CompanyKey int,              
@UserId int,              
@BidRequestStatus int,              
@BiddueDateFrom nvarchar(50),              
@BiddueDateTo nvarchar(50),              
@ModuleController nvarchar(50),          
@ResourceKey int          
AS              
BEGIN              
--For Get Submitted(BidRequest Table) Record              
declare @BRStatus nvarchar(100)              
select top(1) @BRStatus=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status') and Title='Submitted'              
              
--For Cout total unread message              
declare @MessageStatusNew nvarchar(100)              
(select top(1) @MessageStatusNew=LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')              
              
Declare @msglookuptype nvarchar(max)              
              
declare @ModuleKeyForMessage nvarchar(100)              
if(@ModuleController='BidRequest')              
begin              
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='BidRequest'              
set @msglookuptype='Bid Vendor Status'              
end              
else              
begin              
Select @ModuleKeyForMessage=ModuleKey From Module where Controller='WorkOrder'              
set @msglookuptype='Bid Vendor Status'              
--set @msglookuptype='Bid Status'              
end              
declare @ModuleKeyBr nvarchar(100)              
Select @ModuleKeyBr=ModuleKey From Module where Controller=@ModuleController              
--Update BidRequest Set BidRequestStatus=601 ,MoDuleKey=106 where BidRequestKey=1012              
--Select * From Module where Controller='BidRequest'              
--select * from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Bid Request Status') and Title='Submitted'              
  declare @qrywhere varchar(max)                                  
  declare @qrytotal varchar(max)                                   
  declare @qry varchar(max)                  
  declare @BidSubWhere varchar(max)              
  if(@BidRequestStatus = 803)              
  begin              
 set @BidSubWhere = '';              
  end              
  else              
  begin              
 set @BidSubWhere = '';              
  end              
    --or '+@BidRequestKey+'=''0''              
  set @qrywhere = 'where               
  (br.ModuleKey='''+@ModuleKeyBr+''') and             
    (br.BidRequestStatus='''+@BRStatus+''' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=601) and (br.BidRequestStatus <> 600)                  
  --(('''+convert(nvarchar(50),@BidRequestStatus)+'''=convert(nvarchar(50),0) or convert(nvarchar(50),bv.BidVendorStatus)='''+convert(nvarchar(50),@BidRequestStatus)+'''              
  --or convert(nvarchar(50),Bid.BidStatus)='''+convert(nvarchar(50),@BidRequestStatus)+'''))               
and ((bv.BidVendorStatus in (701,700,702)  and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 1) or (bv.BidVendorStatus in (701,700,702,802)  and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 3 and br.BidRequestStatus != 602 and br.BidRequestStatus != 603) or(
  
bv.BidVendorStatus in (703,803,802) and ' + CONVERT(nvarchar,@BidRequestStatus)+' = 2)  or '+ CONVERT(nvarchar,@BidRequestStatus)+' = 0)                
   and              
('''+@BiddueDateFrom+'''='''' or  Convert(nvarchar(50), br.BidDueDate,101) >'''+Convert(nvarchar(50),@BiddueDateFrom,101) +''') and              
  ('''+@BiddueDateTo+'''='''' or Convert(nvarchar(50), br.BidDueDate,101) <'''+Convert(nvarchar(50),@BiddueDateTo,101) +''') and              
  '+convert(nvarchar(50),'bv.VendorKey')+' ='+convert(nvarchar(50), @CompanyKey)+' and               
  ('+convert(nvarchar(50),'bv.BidVendorKey')+'='+convert(nvarchar(50), @BidVendorKey)+' or '+convert(nvarchar(50),@BidVendorKey)+'=''0'')               
  and ((br.Title like ''%'+ @Search +'%'') or (prp.Title like ''%'+ @Search +'%'')           
  -- or (br.DateAdded like ''%'+ @Search +'%'')               
   --or (DefaultRespondByDate like ''%'+ @Search +'%'')               
   or ( '''+@Search+''' = '''' )) and (bv.RespondByDate >= '+convert(nvarchar(50),GETDATE(),101)+'           
   --and bv.BidVendorStatus != 703          
   )'+@BidSubWhere+' '              
                
  set @qrytotal =   'declare @total int  select  @total  = count(*)   from [BidRequest] as br             
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey              
 inner join company as cp on cp.CompanyKey = bv.vendorKey              
 inner join Property as prp on prp.PropertyKey = br.PropertyKey              
 inner join Service as ser on ser.ServiceKey = br.ServiceKey               
 left join bid on bid.bidvendorkey = bv.bidvendorkey                
    '+@qrywhere + ''               
              
  set @qry = ';with cusTable as (select *               
  ,case when (bidstatus = ''Accepted'' or BidStatus = ''Rejected'') then BidStatus else Statuslook end as Statuslookup,              
  (Select Count(1) From Message Where ObjectKey=i.BidVendorKey and ( ModuleKey='''+@ModuleKeyForMessage+''') and MessageStatus='''+@MessageStatusNew+'''           
  and ResourceKey not in ((Select ResourceKey From [User] where '+Convert(nvarchar(50),'UserKey')+'='+Convert(nvarchar(50), @UserId)+'))) as NewMsg              
  from (Select *, row_number() over('+@Sort+') as  rownum2              
 From ( select Distinct(br.BidRequestKey),              
  br.ResourceKey,              
  br.Title,              
               
   Convert(nvarchar(12), br.DefaultRespondByDate,101) as DefaultRespondByDate,              
    Convert(nvarchar(12), br.DateAdded,101) as DateAdded,              
               
  br.Description,     
     Convert(nvarchar(12), bid.LastModificationTime,101) as EstimatedStartDate,
    bid.Total as TotalamountAccpect,
 Convert(nvarchar(12), br.BidDueDate,101) as BidDueDate,              
 Convert(nvarchar(12), bv.RespondByDate,101) as VendorBidDueDate,              
  Convert(nvarchar(12), br.StartDate,101) as StartDate,              
  (Select top(1) us1.ResourceKey From [User] us1 where '+convert(nvarchar(50),'us1.UserKey')+' ='+convert(nvarchar(50),@UserId)+') as LoginResourceKey,              
  ser.Title as Service,              
  (select top(1) cp.Name from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as CompanyName,              
  prp.Title as Property,              
  prp.NumberOfUnits as NumberOfUnits,              
  prp.Address as Address,              
  prp.Address2 as Address2,              
  prp.City as City,              
   (Select top(1) Title From State where StateKey=prp.State) as State,              
  prp.Zip as Zip,              
 -- res.FirstName + '' '' + res.FirstName as ContactName,              
  --res.Work as WorkNumber,              
 -- res.Work2 as WorkNumber2,               
 -- res.Email as Email,              
  --res.Email2 as Email2,                
  --(Select top(1) resc.FirstName + '' '' + resc.LastName  From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as ContactName,              
  --(Select top(1) resc.Work From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber,              
  --(Select top(1) resc.Work2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as WorkNumber2,              
  --(Select top(1) resc.Email From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email,              
  --(Select top(1) resc.Email2 From Resource resc where resc.CompanyKey=prp.CompanyKey and PrimaryContact=1) as Email2,              
              
  (select top(1) rs.FirstName + '' '' + rs.LastName from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey ) as ContactName,              
  (select top(1) rs.Work from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber,              
  (select top(1) rs.Work2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as WorkNumber2,              
  (select top(1) rs.Email from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email,              
  (select top(1) rs.Email2 from resource as rs inner join company as cp on rs.companykey = cp.companykey where resourceKey = br.ResourceKey) as Email2,              
              
              
                
  0 as NoofBids,              
   BidRequestStatus,              
   BidVendorStatus,               
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title=''Bid Vendor Status'')) as Statuslookup,               
--  (select top(1) Title from lookup where LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title=''Bid Status'')) as Statuslookup,               
  isnull((select top 1 title from lookup lu where lu.lookupkey = bid.BIdstatus),'''') as bidstatus,                
  (select top(1) Title from lookup where               
 ( LookUpKey=bv.BidVendorStatus and LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt) )              
  ) as Statuslook,               
    --where lt.Title='''+@msglookuptype+''')              
   bv.BidVendorKey as BidVendorKey,            
   (select (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKeyBr)+' and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 1 ELSE 0 END))
  
    
      
        
          
 AS priority,          
  (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKeyBr)+' and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN           
  (select STUFF((select '','' + Convert(nvarchar(max), ab1.Id) from ABNotification ab1          
   inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and ab.NotificationType not        
   in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and         
   vs.ObjectKey = br.BidRequestKey          
    FOR XML PATH('''')          
),1,1,'''')) ELSE ''0'' END)as NotificationId,          
  (CASE WHEN (ab.ModuleKey = '+CONVERT(varchar,@ModuleKeyBr)+' and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'') and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN           
         (select STUFF((select '','' + Convert(nvarchar(max), ab1.NotificationType) from ABNotification ab1          
   inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and ab.NotificationType not in(''BidReqStatusReject'',''BidReqStatusRejByAcceptOther'')         
   and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and vs.ObjectKey = br.BidRequestKey          
    FOR XML PATH('''')          
),1,1,'''')) ELSE null END) as NotificationType,           
   @total  as TotalRecords              
   from [BidRequest] as br              
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey              
 inner join company as cp on cp.CompanyKey = bv.vendorKey              
 inner join Property as prp on prp.PropertyKey = br.PropertyKey              
 inner join Service as ser on ser.ServiceKey = br.ServiceKey              
 left join bid on bid.bidvendorkey = bv.bidvendorkey                
    LEFT Outer Join ABNotification ab on ab.ObjectKey = br.BidRequestKey and ab.status = 900 and ab.ForResource = '+Convert(varchar,@ResourceKey)+'           
   '+@qrywhere+'                
  )j)i) , q2 as( select * from(select *,ROW_NUMBER() over (partition by priority '+@Sort+') as rownum1 from cusTable)i)          
  select * from (select *,ROW_NUMBER() over (order by priority desc) as rownum from q2)k          
 where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)               
print(@qry)                        
              
              
exec( @qrytotal + @qry)                        
END 
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_SelectOneByBidRequestKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_BidRequest_SelectOneByBidRequestKey 1086,0
CREATE PROCEDURE [dbo].[site_BidRequest_SelectOneByBidRequestKey]
	@BidRequestKey INT,
	@errorCode INT OUTPUT
	
AS
SET NOCOUNT ON

declare @cCount INT 
--select @cCount = (select count(title) from BidRequest where Title in(select title from BidRequest where  BidRequestKey = @BidRequestKey))  from BidRequest where BidRequestKey = @BidRequestKey
select @cCount = (select Count(*) as Count from bidrequest where modulekey = '100' and BidRequestKey in (select ParentBidRequestKey from bidrequest where BidRequestKey = @BidRequestKey))
select l.Title as bidstatus,br.BidRequestKey, pp.Title as Property, br.PropertyKey, sv.Title as Service, br.ServiceKey, br.Title, BidDueDate,CONVERT(varchar,BidDueDate,101) as BidDueDates, br.Description,
CONVERT(varchar,DefaultRespondByDate,101) as DefaultRespondByDates ,@cCount as WCount,
DefaultRespondByDate,br.ModuleKey  from BidRequest as br
inner join Service as sv on sv.ServiceKey = br.ServiceKey
inner join Property as pp on pp.PropertyKey = br.PropertyKey
inner join LookUp as l on l.LookUpKey = br.BidRequestStatus
where  br.BidRequestKey= @BidRequestKey
---vendoe  service  table  Inner  join  pending.
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR

print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_StatusUpdate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[site_BidRequest_StatusUpdate]
--site_BidRequest_StatusUpdate 'Submitted',13226,0
	@status VARCHAR(150),
	@BidRequestKey int, 
	@WorkOrderkey int OUTPUT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

declare @bidrequestkey1 int
declare @workkey int
declare @workbidvenkey int
select @bidrequestkey1 = bv.BidRequestKey from BidVendor as bv 
inner join BidRequest as br on br.BidRequestKey  = bv.BidRequestKey
where bv.BidVendorKey = @BidRequestKey
Declare @ModuleKey int
Select top(1) @ModuleKey=ModuleKey From Module where Module.Controller='BidRequest'

if @status = 'InProgress'
begin
declare @statusTypeKey int
select   @statusTypeKey = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Submitted') from LookUpType as lu where Title = 'Bid Request Status'
update BidRequest set BidRequestStatus = @statusTypeKey where BidRequestKey =  @BidRequestKey
end

if @status = 'Submitted'
begin

declare @statusTypeKey1 int
select  @statusTypeKey1 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Completed') from LookUpType as lu where Title = 'Bid Request Status'
update BidRequest set BidRequestStatus = @statusTypeKey1 where BidRequestKey =  @BidRequestKey
print(@statusTypeKey1)
end
if @status = 'Acceptp'
begin
declare @statusTypeKey2 int
select  @statusTypeKey2 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Completed') from LookUpType as lu where Title = 'Bid Request Status'

declare @statusTypeKey3 int
select  @statusTypeKey3 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Accepted') from LookUpType as lu where Title = 'Bid Status'

declare @statusTypeKey4 int
select  @statusTypeKey4 = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Rejected') from LookUpType as lu where Title = 'Bid Status'


--update BidVendor set BidVendorStatus = @statusTypeKey3 where BidVendorKey = @BidRequestKey
update BidVendor set BidVendorStatus = @statusTypeKey3 where BidVendorKey = @BidRequestKey
update BidVendor set BidVendorStatus = @statusTypeKey4 where BidRequestKey = @bidrequestkey1 and  BidVendorStatus   != @statusTypeKey3

if((select ModuleKey from BidRequest where BidRequestKey = @bidrequestkey1)=@ModuleKey)
begin

update BidRequest set BidRequestStatus = @statusTypeKey2 where BidRequestKey =  @bidrequestkey1
INSERT INTO BidRequest
                         (PropertyKey, ResourceKey, ServiceKey, Title, BidDueDate, StartDate, EndDate, Description, DateAdded, LastModificationTime, BidRequestStatus, DefaultRespondByDate, ModuleKey,ParentBidRequestKey)
        (select top(1) PropertyKey,ResourceKey,ServiceKey,Title,BidDueDate,StartDate,EndDate,Description,DateAdded,LastModificationTime,601,DefaultRespondByDate,106,@bidrequestkey1 from BidRequest where BidRequestKey = @bidrequestkey1)

		select  @workkey = @@IDENTITY
		set @WorkOrderkey = @workkey
		
INSERT INTO BidVendor
                         (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)
(select top(1) @workkey,VendorKey,ResourceKey,BidVendorID,IsAssigned,RespondByDate ,DateAdded,LastModificationTime,802 from BidVendor where BidVendorKey= @BidRequestKey and BidRequestKey = @bidrequestkey1 and BidVendorStatus = @statusTypeKey3)
select  @workbidvenkey = @@IDENTITY


INSERT INTO Document
                         ( ModuleKey, ObjectKey, FileName, FileSize, LastModificationTime)
select (select ModuleKey from Module where Controller = 'PMWorkOrders'),@workkey,FileName,FileSize,LastModificationTime 
from Document where ObjectKey = @bidrequestkey1  and ModuleKey in ((select ModuleKey from Module where Controller = 'PMBidRequests'),100) 


INSERT INTO Bid
                         (BidVendorKey, ResourceKey, Title, Total, Description, LastModificationTime, BidStatus)
(select (select BidVendorKey from BidVendor where BidVendorKey = @workbidvenkey),ResourceKey,Title,Total,Description,LastModificationTime,802 from Bid where BidVendorKey =@BidRequestKey)



INSERT INTO Note
                         ( ModuleKey, ResourceKey, ObjectKey, Description, LastModificationTime,Status)
select (select ModuleKey from Module where Controller = 'BidRequest'),ResourceKey,@workkey,Description,LastModificationTime,Status from Note where ObjectKey = @bidrequestkey1  and ModuleKey in (select ModuleKey from Module where Controller = 'BidRequest'








) 

INSERT INTO Message
 ( ModuleKey, ResourceKey, ObjectKey, Body, LastModificationTime,MessageStatus)
select (select ModuleKey from Module where Controller = 'WorkOrder'),ResourceKey,@workbidvenkey,Body,LastModificationTime,MessageStatus from Message 
where ObjectKey = @BidRequestKey  and ModuleKey in (select ModuleKey from Module where Controller = 'BidRequest') 

end

end

if @status = 'Rejectp'
begin
declare @statusTypeKey5 int
select  @statusTypeKey5 = (select l.LookUpKey from [LookUp] as l where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'Rejected')    from LookUpType as lu where Title = 'Bid Status'

update BidVendor set BidVendorStatus = @statusTypeKey5 where BidVendorKey = @BidRequestKey
end





Declare @Table1 table
(
FileCopyTo nvarchar(max)
)
Declare @Table2 table
(
FilePastTo nvarchar(max)
)
insert into @Table1 select Convert(nvarchar, ObjectKey)+' '+FileName as FileCopyTo
from Document where ObjectKey = @bidrequestkey1  and ModuleKey in (select ModuleKey from Module where Controller = 'PMBidRequests')

insert into @Table2 select Convert(nvarchar, ObjectKey)+' '+FileName as FilePastTo
from Document where ObjectKey = @workkey  and ModuleKey in (select ModuleKey from Module where Controller = 'PMWorkOrders')

select j.FileCopyTo,k.FilePastTo from 
(select a.FileCopyTo  , ROW_NUMBER() over(order by (SELECT 1000)) rownum from @Table1 as a 

) j

inner join 
(select a.FilePastTo, ROW_NUMBER() over(order by (SELECT 1000)) rownum from @Table2 as a) k
on j.rownum = k.rownum
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_StatusUpdate_Close]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE Procedure [dbo].[site_BidRequest_StatusUpdate_Close]
@Status nvarchar(20),
@BidRequestKey int,
@errorCode int output
As
Begin

	if @status = 'Closed'
	begin

		declare @ParentBidRequestKey int
		Update BidRequest Set BidRequestStatus = (Select LookupKey from Lookup where LookupTypeKey = 6 and Title = @Status)
		where BidRequestKey = @BidRequestKey
		
		select @ParentBidRequestKey = (select ParentBidRequestKey from BidRequest where BidRequestKey = @BidRequestKey)
		
		if exists(Select * from BidRequest where BidRequestKey = @ParentBidRequestKey)
		begin
			Update BidRequest Set BidRequestStatus = (Select LookupKey from Lookup where LookupTypeKey = 6 and Title = @Status)
			where BidRequestKey = @ParentBidRequestKey
		end
		
		select @errorCode = @@ERROR
	end
	else
	begin

		
		Update BidRequest Set BidRequestStatus = (Select LookupKey from Lookup where LookupTypeKey = 6 and Title = @Status)
		where BidRequestKey = @BidRequestKey
		select @errorCode = @@ERROR
	end
End
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequest_StatusUpdateCancel]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_BidRequest_StatusUpdateCancel]
--site_BidRequest_StatusUpdate 'Acceptp',2647,0
	@status VARCHAR(150),
	@BidRequestKey int, 
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
 
 update BidRequest set BidRequestStatus = 604 where BidRequestKey = @BidRequestKey
GO
/****** Object:  StoredProcedure [dbo].[site_BidRequestDoc_SelectIndexPagingBidRequestVender]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_BidRequestDoc_SelectIndexPagingBidRequestVender]
--site_BidRequestDoc_SelectIndexPagingBidRequestVender 100,1,'','order by Filename desc',10,'PMBidRequests'
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@BidVendorKey int,
@TableName nvarchar(max)
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    


 -- Declare @BidRequestKey varchar(max) 
 -- Select top(1) @BidRequestKey=BidRequestKey From BidVendor where BidVendor.BidRequestKey=@BidVendorKey

    --or '+@BidRequestKey+'=''0''
 
  set @qrywhere = 'where ('+convert(nvarchar(50),'doc.ObjectKey')+'=( Select top(1) '+convert(nvarchar(50),'BidVendor.BidRequestKey')+' From BidVendor where '+convert(nvarchar(50),'BidVendor.BidVendorKey')+' ='+convert(nvarchar(50), @BidVendorKey)+' ) )
   and ((mod.Controller like '''+@TableName+'''))'
  
  set @qrytotal =   '
  
  declare @total int  select  @total  = count(*) from [Document] as doc
   inner join Module as mod on mod.ModuleKey = doc.ModuleKey
    '+@qrywhere + '' 

  set @qry = '   select *
  
  ,convert(nvarchar(50),ObjectKey) +'' ''+FileName1 as FileName
   from ( select 
  doc.DocumentKey,
  doc.FileName as FileName1,
 doc.ObjectKey,
    @total  as TotalRecords,
   row_number() over('+@Sort+') as  rownum from [Document] as doc
   inner join Module as mod on mod.ModuleKey = doc.ModuleKey
   
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
     
	 
	  print(@qrytotal + @qry)             
     exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_AddWorkOrderInsert_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
-- site_BidVendor_Insert_New 3256,3217,1063,'TestDemo',1,'01/01/2000',700  
  
  
CREATE PROCEDURE [dbo].[site_BidVendor_AddWorkOrderInsert_New]  
 @BidRequestKey int,   
 @VendorKey int,  
 @ResourceKey int,  
 @BidVendorID varchar(200),  
 @IsAssigned bit,  
 @RespondByDate datetime,  
 @BidVendorStatus int,
 @BidVendorKey int = 0 output
   
AS  
begin  
 declare @ModuleKey int  
 declare @statusTypeKey int  
 select  @statusTypeKey = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'In Progress') from LookUpType as lu where Title = 'Bid Vendor Status'  
 select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey  
 print(@ModuleKey)  
--insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)  
--    values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, @RespondByDate, getdate(), getdate(), @statusTypeKey)  


   insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)  
   values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, DATEADD(Day,2,getdate()), getdate(), getdate(), @statusTypeKey)  
 
 set @BidVendorKey = @@IDENTITY

end
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_DashboardBidCount]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-- [site_Vendors_invoicesIndexPaging] 50,1,'','order by Cy.LegalName  desc'   
CREATE PROCEDURE [dbo].[site_BidVendor_DashboardBidCount]    

   
AS     
BEGIN    
 Select (Select Count(BidVendorStatus) from bidVendor where BidVendorStatus = 701) as BidCount, (Select Title from lookup  where  lookupKey = 701) as Title,'50' as TotalAmount  from Bidvendor as bv
 where BidVendorStatus = 701 group by BidVendorStatus
 END
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_DeleteByBidVendorKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[site_BidVendor_DeleteByBidVendorKey]
@BidVendorKey int,
@errorCode int output
AS
Begin

	delete from BidVendor where BidVendorKey = @BidVendorKey

	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_GetByBidVendorKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_BidVendor_GetByBidVendorKey 3590,0  
CREATE procedure [dbo].[site_BidVendor_GetByBidVendorKey]  
@BidVendorKey int,  
@errorCode int output  
AS  
Begin  

declare @Forvendorkey int

select @Forvendorkey = (Select VendorKey from BidVendor where  BidvendorKey = @BidVendorKey)

declare  @getReso int 

select @getReso = (Select ResourceKey  from Resource  where  Companykey = @Forvendorkey)
 Select BidVendorKey, BidRequestKey, VendorKey, ResourceKey,  @getReso as ForResource,
 BidVendorID, isAssigned, RespondByDate, DateAdded, LastModificationTime,  
 BidVendorStatus  
 from BidVendor   

 Where BidVendorKey = @BidVendorKey  
  
 select @errorCode = @@ERROR  
End
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_Insert_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
-- site_BidVendor_Insert_New 3256,3217,1063,'TestDemo',1,'01/01/2000',700  
  
  
CREATE PROCEDURE [dbo].[site_BidVendor_Insert_New]  
 @BidRequestKey int,   
 @VendorKey int,  
 @ResourceKey int,  
 @BidVendorID varchar(200),  
 @IsAssigned bit,  
 @RespondByDate datetime,  
 @BidVendorStatus int,  
 @BidVendorKey int = 0 output  
   
AS  
begin  
 declare @ModuleKey int  
 declare @statusTypeKey int  
 select  @statusTypeKey = (select l.LookUpKey from LookUp as l  where l.LookUpTypeKey = lu.LookUpTypeKey  and Title = 'In Progress') from LookUpType as lu where Title = 'Bid Vendor Status'  
 select @ModuleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey  
 print(@ModuleKey)  
--insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)  
--    values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, @RespondByDate, getdate(), getdate(), @statusTypeKey)  
  
 if(@ModuleKey = 100)  
 Begin  
  insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)  
  values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, @RespondByDate, getdate(), getdate(), @statusTypeKey)  
    
  set @BidVendorKey = @@IDENTITY  
   
 End  
 Else  
 Begin  
  declare @Count int  
  select @Count = Count(1) from BidVendor where BidRequestKey = @BidRequestKey  
  print(@Count)  
  if(@Count = 0)  
  Begin  
   insert into BidVendor (BidRequestKey, VendorKey, ResourceKey, BidVendorID, IsAssigned, RespondByDate, DateAdded, LastModificationTime, BidVendorStatus)  
   values (@BidRequestKey, @VendorKey, @ResourceKey, @BidVendorID, @IsAssigned, @RespondByDate, getdate(), getdate(), @statusTypeKey)  
    
   set @BidVendorKey = @@IDENTITY  
  End  
  Else  
  Begin  
   Update BidVendor Set VendorKey = @VendorKey, ResourceKey = @ResourceKey, BidVendorID = @BidVendorID,  
   IsAssigned = @IsAssigned, LastModificationTime = getdate(),BidVendorStatus = @statusTypeKey  
   where BidRequestKey = @BidRequestKey  
  
   select @BidVendorKey = BidVendorKey from BidVendor where BidRequestKey = @BidRequestKey  
  End  
 End  
end  
GO
/****** Object:  StoredProcedure [dbo].[site_Bidvendor_SelectByResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_Bidvendor_SelectByResourceKey]  
@ResourceKey int,
@BidrequestKey int
As  
Begin  
declare @vendorKey int 

select  @vendorKey = (
select c.Companykey  from  Company  c
inner join  Resource  r  on r.CompanyKey  = c.CompanyKey where r.ResourceKey   = @ResourceKey)

 select ResourceKey as bvkey from BidVendor   
 where  VendorKey = @vendorKey and BidrequestKey = @BidrequestKey
End


-- 
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_StatusUpdate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[site_BidVendor_StatusUpdate]
@BidVendorKey int,
@Status nvarchar(100)
AS
BEGIN
  
Update BidVendor set BidVendorStatus=(select top(1) LookUpKey from lookup where LookUpTypeKey = 7 and Title=@Status)
where BidVendorKey=@BidVendorKey
END
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_StatusUpdate_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- site_BidVendor_StatusUpdate_New
CREATE  PROCEDURE [dbo].[site_BidVendor_StatusUpdate_New]
@BidVendorKey int,
@Status nvarchar(100)
AS
BEGIN
	declare @respondDate datetime
	--@Status = 'Accepted
	if(@Status = 'Interested')
	begin
		Update BidVendor set BidVendorStatus=(select top(1) LookUpKey from lookup where LookUpTypeKey = 7 and Title=@Status)
		, RespondByDate = DATEADD(Day,14,getDate())
		where BidVendorKey=@BidVendorKey
	end
else
	begin
		Update BidVendor set BidVendorStatus=(select top(1) LookUpKey from lookup where LookUpTypeKey = 7 and Title=@Status)
		where BidVendorKey=@BidVendorKey

		delete from Bid where BidVendorKey = @BidVendorKey and BidStatus = 801
	end
END
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendor_Top5VendorsInEachCatagory]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
-- [site_BidVendor_Top5VendorsInEachCatagory] 50,1,'0','order by serviename desc'
CREATE PROCEDURE [dbo].[site_BidVendor_Top5VendorsInEachCatagory]    
@ReportPageSize int,                               
@PageIndex int,                               
@Search nvarchar(max),                                  
@Sort nvarchar(max)
AS    
BEGIN    
  declare @qrywhere varchar(max)                        
  declare @qrytotal varchar(max)                         
  declare @qry varchar(max)      
  
		  set @qrywhere = '(s.servicekey = '''+@Search+''' or '''+@Search+''' = ''0'')' 
  
set @qrytotal = '  declare @total int
select top(1) @total = count(1)  
from (select s.servicekey, s.title as serviename, vs.vendorkey as vendorcompany, c.name as companyname,
(select sum(total) from bid b inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
where br.servicekey = vs.servicekey and vs.vendorkey = bv.vendorkey and modulekey = 106 and b.BidStatus = 802) as BidTotalvalue
from service s inner join vendorService vs on vs.servicekey = s.servicekey
inner join company c on c.companykey = vs.vendorkey where ' + @qrywhere + ')i where (BidTotalvalue is not null and bidtotalvalue <> 0)'    
    
		  set @qry = 'select * from
		   (select *, @total as TotalRecord, ROW_NUMBER() over (PARTITION BY [servicekey] order by [BidTotalvalue] desc) AS RowNo, ROW_NUMBER() over (' + @Sort + ') AS rownum 
			from 
			(select s.servicekey, s.title as serviename, vs.vendorkey as vendorcompany, c.name as companyname,
			(select sum(total) from bid b inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
			 where br.servicekey = vs.servicekey and vs.vendorkey = bv.vendorkey and modulekey = 106 and b.BidStatus = 802) as BidTotalvalue
			from service s inner join vendorService vs on vs.servicekey = s.servicekey
			inner join company c on c.companykey = vs.vendorkey where ' + @qrywhere + ')i where (BidTotalvalue is not null and bidtotalvalue <> 0) )j
		    where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)

			  print(@qrytotal + @qry)                 
			  exec( @qrytotal + @qry) 
END
GO
/****** Object:  StoredProcedure [dbo].[site_BidVendorStatus_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[site_BidVendorStatus_Update]      
@BidVendorKey int,        
@errorCode int Output         
as         
begin        
 update  BidVendor  
 set  BidVendorStatus  = 703
 where  BidVendorKey = @BidVendorKey
select @errorCode =@@ERROR        
end
GO
/****** Object:  StoredProcedure [dbo].[site_BidVindor_BidRequestVendorView]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[site_BidVindor_BidRequestVendorView]
	@BidRequestKey int,
	@Docname nvarchar(max),
	@errorCode int output
	

AS
SET NOCOUNT ON
 select '' as BidAmount, isnull(bv.DateAdded,'') as AddedOn, isnull(br.Description,'') as Description, isnull(cp.Name,'') as Company, isnull(rs.FirstName,'') +' '+ isnull(LastName,'') as ContactPerson, isnull(cp.Work,'') as WorkPhone1, isnull(cp.Work2,'') as WorkPhone2,
  isnull(cp.Fax, '') as Fax, isnull(rs.Email,'') as Email, isnull(cp.Address, '') as Address, isnull(cp.Address2,'') as Address2, isnull(cp.City,'') as City, isnull(st.Title,'') as State, isnull(cp.Zip,'') as zip, isnull(ir.EndDate,'') as InsuranceExpiryDate, isnull(ir.InsuranceAmount, '') as InsuranceAmount from BidVendor as bv 
  inner join BidRequest as br on br.BidRequestKey = bv.BidRequestKey
  inner join Company as cp on cp.CompanyKey = bv.BidVendorKey
  inner join Resource as rs on rs.CompanyKey = bv.VendorKey
  inner join Insurance as ir on ir.VendorKey = bv.VendorKey
  inner join State as st on st.StateKey = cp.State where bv.BidRequestKey = @BidRequestKey
  
select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[Site_check_RefundRequest]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  Procedure  [dbo].[Site_check_RefundRequest]
@Vendorkey int,   
@InvoiceKey int,
@errorcode  int output                    
as        
begin  
 select   InvoiceKey ,RefundRequestKey  from  RefundRequest where InvoiceKey = @InvoiceKey and VendorKey  =@Vendorkey 
  
select @errorcode =@@ERROR  
end
GO
/****** Object:  StoredProcedure [dbo].[site_checkUserRole]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--site_checkUserRole 1063,0
CREATE PROCEDURE [dbo].[site_checkUserRole]
@ResourceKey int,
@Groupkey int output 
As
BEGIN
select @Groupkey =  GroupKey from GroupMember where ResourceKey = @ResourceKey and  GroupKey = 1
if @Groupkey is null
begin
select @Groupkey = 0
select @Groupkey as Groupkey
end
select @Groupkey as Groupkey
-- Get the Error Code for the statement just executed.
END
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Acitivity_by_AssociationBids_Company_IndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
 --[site_Company_Acitivity_by_AssociationBids_Company_IndexPaging] 1000,1,'order by PropertyName  desc','0','0'       
CREATE PROCEDURE [dbo].[site_Company_Acitivity_by_AssociationBids_Company_IndexPaging]          
@ReportPageSize int,                                     
@PageIndex int,                                     
@Sort nvarchar(max),    
@CompanyKey nvarchar(max),     
@PropertyKey nvarchar(max)      
         
AS           
BEGIN          
  declare @qrywhere varchar(max)                              
  declare @qrytotal varchar(max)                               
  declare @qry varchar(max)              
           
 set @qrywhere = '(Company.CompanyKey = ' +@CompanyKey+ ' or ' +@CompanyKey+ ' = 0) and (property.propertykey = ' +@PropertyKey+ ' or ' +@PropertyKey+ ' = 0)'
       
          
  set @qrytotal =   'declare @total int  
  select  @total  = count(*) from (
select Company.name as CompanyName, Property.title as PropertyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = br.bidrequeststatus)  as status  from company 
inner join Property on company.companykey = property.companykey 
inner join BidRequest br on br.propertykey = property.propertykey 
where company.Status = 101 and companytypekey = 1001 and    
  '+@qrywhere+')i '           
          
  set @qry = '   select * from (select *,  
  @total  as TotalRecord, row_number() over('+@Sort+') as  rownum     
  from (select Company.name as CompanyName, Property.title as PropertyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = br.bidrequeststatus)  as status  from company 
inner join Property on company.companykey = property.companykey 
inner join BidRequest br on br.propertykey = property.propertykey 
where company.Status = 101 and companytypekey = 1001 and 
'+@qrywhere+')i )j where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)           
      print(@qrytotal + @qry)                       
      exec( @qrytotal + @qry)     
 
END
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Acitivity_by_Management_Company_IndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
      
 --[site_Company_Acitivity_by_Management_Company_IndexPaging] 1000,1,'order by CompanyName  desc'  ,'0'       
CREATE PROCEDURE [dbo].[site_Company_Acitivity_by_Management_Company_IndexPaging]          
@ReportPageSize int,                                     
@PageIndex int,                                              
@Sort nvarchar(max),    
@CompanyKey nvarchar(max)      
         
AS           
BEGIN          
  declare @qrywhere varchar(max)                              
  declare @qrytotal varchar(max)                               
  declare @qry varchar(max)              
              
  set @qrywhere = ' (Company.CompanyKey = ' + @CompanyKey + ' or ' + @CompanyKey + ' = 0)'     
       
  set @qrytotal =   'declare @total int  
  select  @total  = count(*) from (  select Company.name as CompanyName, ''Property'' as ResourceType, Property.Title, '''' as status  from company 
inner join Property on company.companykey = property.companykey 
where company.Status = 101 and companytypekey = 1001 and 
'+@qrywhere+'
union
select Company.name as CompanyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = br.bidrequeststatus)  as status  from company 
inner join Property on company.companykey = property.companykey 
inner join BidRequest br on br.propertykey = property.propertykey 
where company.Status = 101 and companytypekey = 1001 and    
  '+@qrywhere+')i '           
          
  set @qry = '   select * from (select *,  
  @total  as TotalRecord, row_number() over('+@Sort+') as  rownum     
  from (  select Company.name as CompanyName, ''Property'' as ResourceType, Property.Title, '''' as status  from company 
inner join Property on company.companykey = property.companykey 
where company.Status = 101 and companytypekey = 1001 and 
'+@qrywhere+'
union
select Company.name as CompanyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = br.bidrequeststatus)  as status  from company 
inner join Property on company.companykey = property.companykey 
inner join BidRequest br on br.propertykey = property.propertykey 
where company.Status = 101 and companytypekey = 1001 and    
  '+@qrywhere+')i )j where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)           
      print(@qrytotal + @qry)                       
      exec( @qrytotal + @qry)     
 
END
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Acitivity_by_Manager_Company_IndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
      
 --[site_Company_Acitivity_by_Manager_Company_IndexPaging] 1000,1,'order by PropertyName  desc'  ,'0','0'       
CREATE PROCEDURE [dbo].[site_Company_Acitivity_by_Manager_Company_IndexPaging]          
@ReportPageSize int,                                     
@PageIndex int,                                     
@Sort nvarchar(max),    
@CompanyKey nvarchar(max),     
@ManagerKey nvarchar(max)      
             
         
AS           
BEGIN          
  declare @qrywhere varchar(max)                              
  declare @qrytotal varchar(max)                               
  declare @qry varchar(max)              
          
 set @qrywhere = '(Company.CompanyKey = ' +@CompanyKey+ ' or ' +@CompanyKey+ ' = 0) and (PropertyResource.ResourceKey = ' +@ManagerKey+ ' or ' +@ManagerKey+ ' = 0)'
       
          
  set @qrytotal =   'declare @total int  
  select  @total  = count(*) from (
select Company.name as CompanyName, Property.title as PropertyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = br.bidrequeststatus)  as status  from company 
inner join Property on company.companykey = property.companykey 
inner join PropertyResource on PropertyResource.Propertykey = property.Propertykey 
inner join Resource on Resource.ResourceKey = PropertyResource.ResourceKey 
inner join BidRequest br on br.propertykey = property.propertykey 
where company.Status = 101 and companytypekey = 1001 and    
  '+@qrywhere+')i '           
          
  set @qry = '   select * from (select *,  
  @total  as TotalRecord, row_number() over('+@Sort+') as  rownum     
  from (select Company.name as CompanyName, Property.title as PropertyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = br.bidrequeststatus)  as status  from company 
inner join Property on company.companykey = property.companykey 
inner join PropertyResource on PropertyResource.Propertykey = property.Propertykey 
inner join Resource on Resource.ResourceKey = PropertyResource.ResourceKey 
inner join BidRequest br on br.propertykey = property.propertykey 
where company.Status = 101 and companytypekey = 1001 and 
'+@qrywhere+')i )j where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)           
      print(@qrytotal + @qry)                       
      exec( @qrytotal + @qry)     
 
       
END
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Acitivity_by_Vendor_Company_IndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 --[site_Company_Acitivity_by_Vendor_Company_IndexPaging] 200,1,'order by companyname  desc'  ,'0'     
CREATE PROCEDURE [dbo].[site_Company_Acitivity_by_Vendor_Company_IndexPaging]        
@ReportPageSize int,                                   
@PageIndex int,                                            
@Sort nvarchar(max),  
@vendorKey nvarchar(max)    
       
AS         
BEGIN           
  declare @qrywhere varchar(max)                              
  declare @qrytotal varchar(max)                               
  declare @qry varchar(max)              
              
  set @qrywhere = ' (Company.CompanyKey = ' + @vendorKey + ' or ' + @vendorKey + ' = 0)'     
       
  set @qrytotal =   'declare @total int  
  select  @total  = count(*) from (
select Company.name as CompanyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = bv.bidvendorstatus)  as status  from company 
inner join BidVendor bv on bv.vendorkey = Company.companykey 
inner join BidRequest br on br.bidrequestkey = bv.bidrequestkey 
where company.Status = 101 and companytypekey in (1002,1003) and    
  '+@qrywhere+')i '           
          
  set @qry = '   select * from (select *,  
  @total  as TotalRecord, row_number() over('+@Sort+') as  rownum     
  from (
select Company.name as CompanyName, case when br.modulekey = 100 then ''BidRequest'' else ''WorkOrder'' end as ResourceType, br.Title, (select title from lookup where lookup.lookupkey = bv.bidvendorstatus)  as status  from company 
inner join BidVendor bv on bv.vendorkey = Company.companykey 
inner join BidRequest br on br.bidrequestkey = bv.bidrequestkey 
where company.Status = 101 and companytypekey in (1002,1003) and    
  '+@qrywhere+')i )j where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)           
      print(@qrytotal + @qry)                       
      exec( @qrytotal + @qry)     
 
END
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Acitivity_by_Vendor_Company_IndexPagingForVendor]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 --[site_Company_Acitivity_by_Vendor_Company_IndexPagingForVendor] 150,1,'','order by cp.LegalName  asc'  ,'4254'     
CREATE PROCEDURE [dbo].[site_Company_Acitivity_by_Vendor_Company_IndexPagingForVendor]        
@ReportPageSize int,                                   
@PageIndex int,                                   
@Search nvarchar(max),                                     
@Sort nvarchar(max),  
@ResourceKey nvarchar(max)    
       
AS         
BEGIN        
  declare @qrywhere varchar(max)                            
  declare @qrytotal varchar(max)                             
  declare @qry varchar(max)            
         
     
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'')         
  set @qrywhere = ' where rs.ResourceKey = '+@ResourceKey+' and  (cp.LegalName like ''%' + @Search + '%'' Or ''' + @Search + ''' = '''')'    
     
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as cp   
  inner join BidVendor as bv on cp.CompanyKey = bv.VendorKey  
  inner join BidRequest as br on br.BidRequestKey = bv.BidRequestKey  
  inner join Property as ps on ps.PropertyKey = br.PropertyKey   
  inner join Resource as rs on rs.CompanyKey = cp.CompanyKey   
     left join Module as md on br.ModuleKey = md.ModuleKey 
  '+@qrywhere+' '         
        
  set @qry = '   select * from (select cp.LegalName as CompanyName,ps.Title as PropertyTitle, ps.BidRequestAmount,br.Title as BidTitle, md.Title, 
  @total  as TotalRecord, row_number() over('+@Sort+') as  rownum   
  from company as cp  
  inner join BidVendor as bv on cp.CompanyKey = bv.VendorKey  
  inner join BidRequest as br on br.BidRequestKey = bv.BidRequestKey  
  inner join Property as ps on ps.PropertyKey = br.PropertyKey   
  inner join Resource as rs on rs.CompanyKey = cp.CompanyKey   
     left join Module as md on br.ModuleKey = md.ModuleKey 
   '+@qrywhere+'          
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)         
      print(@qrytotal + @qry)                     
      exec( @qrytotal + @qry)   
  
END
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Exists_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_Company_Exists_New 'My New Invite',0  
CREATE PROCEDURE [dbo].[site_Company_Exists_New]     
    @Name VARCHAR(50),
	@id int,
 @count int output  
AS  
BEGIN  
  


    select @count = (SELECT COUNT(c.CompanyKey)  FROM Company AS c   WHERE c.Name = @Name  and  c.CompanyKey != @id
 )  
  
END  
  
  --site_Company_Exists_New  'CheckIst',0
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Exit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Company_Exit]   
    @Name VARCHAR(50),
	@count int output
AS
BEGIN

    select @count = (SELECT COUNT(c.CompanyKey)
    FROM Company AS c
	inner join LookUp as l on l.LookUpKey = c.CompanyTypeKey 
    WHERE c.Name = @Name and l.Title =  'Vendor'
	)

	
          
    


END
GO
/****** Object:  StoredProcedure [dbo].[site_Company_GetAllVendorsForBidRequest]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
      
            
              
 --site_Company_GetAllVendorsForBidRequest 4335,'','',0,0  --select * from LookUp                
CREATE procedure [dbo].[site_Company_GetAllVendorsForBidRequest]                
@BidRequestKey int,                
@VendorName nvarchar(100),                
@CompanyName nvarchar(100),                
@IsStaredVendor bit,                
@lastWorkedWith int                
As                
begin                
           
		   
declare  @moduleKey int 
declare  @parentkey int 

select  @moduleKey  =  ( select  ModuleKey from BidRequest where BidRequestKey = @BidRequestKey)   
select  @parentkey  =  (select ParentBidRequestKey from BidRequest where BidRequestKey = @BidRequestKey)  

if(@moduleKey = 100 and @parentkey  is  not null)
begin

declare @resourceKey int                
select @resourceKey = ResourceKey from BidRequest where BidRequestKey = @BidRequestKey                
                
        DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)                    
                    
select @LAT =isnull(Latitude,''), @LONG =isnull(Longitude,'') from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @BidRequestkey)                    
                    
SET @geo1= geography::Point(@LAT, @LONG, 4326)              
select distinct CompanyKey, CompanyName, VendorName, isStared,       
--isnull((select max ((FORMAT (LastModificationTime, 'MM/dd/yyyy '))) from BidVendor      
--where bidvendorkey in (select bidvendorkey from bidvendor where vendorkey = i.companykey)      
--and BidVendorStatus = 802),'1/1/1900') as 'last worked date'      
isnull((select max ((FORMAT (LastModificationTime, 'MM/dd/yyyy '))) from Bid      
where bidvendorkey in (select bidvendorkey from bidvendor bv1      
join BidRequest br1 on br1.BidRequestKey = bv1.BidRequestKey      
where vendorkey = i.companykey and br1.BidRequestStatus = 602)      
and BidStatus = 802),'') as 'last worked date',      
LastWorkDate from                
(select cp.CompanyKey, Name as CompanyName, isnull(rs.FirstName,'') + ' ' + isnull(rs.LastName,'') as 'VendorName',                
isnull((select top 1 1 from StarVendor cv where cv.VendorKey = cp.CompanyKey and ResourceKey = @resourceKey),0) as 'isStared',                
--datediff(month, isnull((select max(LastModificationTime)       
--from BidVendor where bidvendorkey in (select bidvendorkey from bidvendor       
--where vendorkey = cp.companykey) and BidVendorStatus = 802),'1/1/1900'),getdate()) as 'LastWorkDate'      
(select  max ((FORMAT (LastModificationTime, 'MM/dd/yyyy ')))       
from BidVendor where bidvendorkey in (select bidvendorkey from bidvendor bv1      
join BidRequest br1 on br1.BidRequestKey = bv1.BidRequestKey      
where vendorkey = cp.CompanyKey and br1.BidRequestStatus = 602) and BidVendorStatus = 802) as 'LastWorkDate'        
from Company as cp                 
inner join resource as rs on rs.CompanyKey = cp.CompanyKey and rs.PrimaryContact = 1                
inner join VendorService as vs on vs.VendorKey = cp.CompanyKey and vs.ServiceKey in (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)       
 inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey     
where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and LookUp.Title in ('Company Vendor','Vendor'))                
and cp.companykey not in (select bv.vendorkey from BidVendor bv where bv.BidRequestKey = @BidRequestKey)                
and cp.status = 101 and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5                  
)i                
where (i.CompanyName like '%' + @CompanyName + '%' or @CompanyName = '')                 
and (i.VendorName like '%' + @VendorName + '%' or @VendorName = '')                
and (i.isStared = @IsStaredVendor or @IsStaredVendor is null)                
and (@lastWorkedWith = 0 or (i.LastWorkDate != '' and CONVERT(DateTime,i.LastWorkDate) > DATEADD(month,-@lastWorkedWith,GetDate())))   

end
   
--and  (@lastWorkedWith = 0 or (LastWorkDate <= @lastWorkedWith))              
   
      else
	  begin
	  
            
select @resourceKey = ResourceKey from BidRequest where BidRequestKey = @BidRequestKey                
                
                  
                    
select @LAT =isnull(Latitude,''), @LONG =isnull(Longitude,'') from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @BidRequestkey)                    
                    
SET @geo1= geography::Point(@LAT, @LONG, 4326)              
select distinct CompanyKey, CompanyName, VendorName, isStared,       
--isnull((select max ((FORMAT (LastModificationTime, 'MM/dd/yyyy '))) from BidVendor      
--where bidvendorkey in (select bidvendorkey from bidvendor where vendorkey = i.companykey)      
--and BidVendorStatus = 802),'1/1/1900') as 'last worked date'      
isnull((select max ((FORMAT (LastModificationTime, 'MM/dd/yyyy '))) from Bid      
where bidvendorkey in (select bidvendorkey from bidvendor bv1      
join BidRequest br1 on br1.BidRequestKey = bv1.BidRequestKey      
where vendorkey = i.companykey and br1.BidRequestStatus = 602)      
and BidStatus = 802),'') as 'last worked date',      
LastWorkDate from                
(select cp.CompanyKey, Name as CompanyName, isnull(rs.FirstName,'') + ' ' + isnull(rs.LastName,'') as 'VendorName',                
isnull((select top 1 1 from StarVendor cv where cv.VendorKey = cp.CompanyKey and ResourceKey = @resourceKey),0) as 'isStared',                
--datediff(month, isnull((select max(LastModificationTime)       
--from BidVendor where bidvendorkey in (select bidvendorkey from bidvendor       
--where vendorkey = cp.companykey) and BidVendorStatus = 802),'1/1/1900'),getdate()) as 'LastWorkDate'      
(select  max ((FORMAT (LastModificationTime, 'MM/dd/yyyy ')))       
from BidVendor where bidvendorkey in (select bidvendorkey from bidvendor bv1      
join BidRequest br1 on br1.BidRequestKey = bv1.BidRequestKey      
where vendorkey = cp.CompanyKey and br1.BidRequestStatus = 602 and ModuleKey = 106) and BidVendorStatus = 802) as 'LastWorkDate'        
from Company as cp                 
inner join resource as rs on rs.CompanyKey = cp.CompanyKey and rs.PrimaryContact = 1                
inner join VendorService as vs on vs.VendorKey = cp.CompanyKey and vs.ServiceKey in (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)       
 inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey     
where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and LookUp.Title in ('Company Vendor','Vendor'))                
and cp.companykey not in (select bv.vendorkey from BidVendor bv where bv.BidRequestKey = @BidRequestKey)                
and cp.status = 101 and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5                  
)i                
where (i.CompanyName like '%' + @CompanyName + '%' or @CompanyName = '')                 
and (i.VendorName like '%' + @VendorName + '%' or @VendorName = '')                
and (i.isStared = @IsStaredVendor or @IsStaredVendor is null)                
and (@lastWorkedWith = 0 or (i.LastWorkDate != '' and CONVERT(DateTime,i.LastWorkDate) > DATEADD(month,-@lastWorkedWith,GetDate())))   
	  end
                
end              
              
 --site_Company_GetAllVendorsForBidRequest 18410,'','',0,2  --select * from LookUp       
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--USP_Company_Insert 'firsttineinsert','how','7434','bfgfdbd','dfgdf','Ahmedabad','ID','454','3','2232','223','abc2.com','2,3',2,'dfdfdf','171,95','bullet2.png?body-bg.png','0'
   
CREATE PROCEDURE [dbo].[site_Company_Insert]
	 
    @Email          varchar(500),
    @FirstName	    varchar(500),
    @LastName	    varchar(500),
	@CompanyName    varchar(500),
	@LegalName		varchar(500),
	@TaxID 			varchar(500),
	@Address		varchar(500),
	@Address2		varchar(500),
	@City			varchar(500),
	@StateKey		varchar(500),
	@Zip			varchar(500),
	@Work			varchar(500),
	@Work2			varchar(500),
	@Fax			varchar(500),
	@Website		varchar(500),									
	@ServiceTitle1	varchar(500),
	@RadiusKey		varchar(500),
	@ServiceAddress	varchar(500),		
	@FileSize		varchar(500),
	@FileName		varchar(500),
    @VendorKeyval		varchar(500),
	@Resourcekey		varchar(500),
	@companyvalue INT OUTPUT,
	@Resourcevalue INT OUTPUT

AS
SET NOCOUNT ON



declare @vendorkey int
declare @companytype int
declare @status int
declare @modulekey int
declare @insurancekey int


           declare @ResourceTypeKey int
		   select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'




           select @companytype = LookUpKey from LookUp where Title = 'Company Vendor' 
           select @status = LookUpKey from LookUp where Title = 'Pending'
		           
	       select @modulekey = count(ModuleKey) from Module Where Controller = 'Registration' and Action = 'RegistrationInsert'
	       if(@modulekey = 0)
	       begin	    
	          insert into Module (ModuleKey,Controller,[Action],Title)values((select max(ModuleKey) + 1  from Module),'Registration','RegistrationInsert','Registration')		  
           end 

		   if @VendorKeyval = '0'
           begin
		   
           insert into Company(Name,[State],LegalName,TaxID,[Address],Address2,City,Zip,Work,Work2,Fax,Website,[Status],CompanyTypeKey,CompanyID)
		                      values(@CompanyName,@StateKey,@LegalName,@TaxID,@Address,@Address2,@City,@Zip,@Work,@Work2,@Fax,@Website,101,@companytype,NEWID())

           set @vendorkey = @@identity
		   select  @companyvalue = @@IDENTITY

		    insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values(@vendorkey,@vendorkey,getdate(),101)

			
		  insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,@RadiusKey)

		  Insert into Resource (CompanyKey, ResourceTypeKey, FirstName, LastName, Email,Work, Work2,Fax, Address, Address2, City, State, Zip,DateAdded,LastModificationTime, Status) 
	      values 
	      (@vendorkey,@ResourceTypeKey,@FirstName, @LastName,  @Email, @Work, @Work2, @Fax, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),101)

		  select  @Resourcevalue = @@IDENTITY

		   end
		   else
		   begin

		   update Company set Name = @CompanyName ,[State] = @StateKey,LegalName = @LegalName,TaxID=@TaxID,Address =@Address,Address2=@Address2,City=@City,
		   Zip=@Zip,Work=@Work,Work2=@Work2,Fax=@Fax,Website=@Website where CompanyKey=@VendorKeyval

		   update Resource set Email = @Email,FirstName = @FirstName,LastName=@LastName where ResourceKey = @ResourceKey
		   set @vendorkey = @VendorKeyval
		   select  @companyvalue = @VendorKeyval
		   select  @Resourcevalue = @Resourcekey
		   end
		
		   
		   


		   insert into [User] (ResourceKey,Username,ResetExpirationDate,TokenReset,DateAdded,LastModificationTime,Status,Password,FirstTimeAccess)
		   values(@Resourcevalue,@FirstName,getdate(),1,GETDATE(),GETDATE(),1,1,1)

		   INSERT INTO Insurance
                   (VendorKey, CompanyName, Work, Fax, Address, Address2, City, State, Zip, Status,StartDate,EndDate)
           VALUES (@vendorkey,@CompanyName,@Work,@Fax,@Address,@Address2,@City,@StateKey,@Zip,@status,GETDATE(),(SELECT DATEADD(year, 101, GETDATE())))


		   set @insurancekey  = @@IDENTITY

	

		 	   		    
		   insert into ServiceArea (VendorKey,[Address],Address2,City,[State],Zip,Radius)
	                   values (@vendorkey,@Address,@Address2,@City,@StateKey,@Zip,@RadiusKey)	            
		   


            select @modulekey = ModuleKey from Module Where Controller = 'Registration' and Action = 'RegistrationInsert'
			declare FileNamecur cursor for  
  
               select j.Item as FileName,k.Item as FileSize from 
               (select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileName,'?') as a ) j
               inner join ( select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileSize,',') as a)k
                on j.rownum = k.rownum

                 open FileNamecur     
                 declare @File as nvarchar(max), @Size as nvarchar(max)

           fetch next from FileNamecur into @File,@Size
                   while @@FETCH_STATUS = 0  
               begin 

               Insert Into Document(ModuleKey, ObjectKey, [FileName], FileSize,LastModificationTime)
               values(@modulekey, @insurancekey ,@File ,convert(varchar,@Size), GETDATE())

            fetch next from FileNamecur into @File,@Size  
                       end        
            close FileNamecur      
              deallocate FileNamecur
 
 declare  vendorcur cursor for

 select item from  SplitString(@ServiceTitle1,',')

 declare @servicekey int

 open vendorcur 

 fetch  next from vendorcur into @servicekey
    while @@FETCH_STATUS = 0  
    begin 
    insert into VendorService (servicekey,vendorkey)values(@servicekey,@vendorkey) 

 fetch  next from vendorcur into @servicekey
    end
 close vendorcur
 deallocate vendorcur
GO
/****** Object:  StoredProcedure [dbo].[site_Company_Insert_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
        
        
            
            
            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
    
      
        
          
            
            
--USP_Company_Insert 'firsttineinsert','how','7434','bfgfdbd','dfgdf','Ahmedabad','ID','454','3','2232','223','abc2.com','2,3',2,'dfdfdf','171,95','bullet2.png?body-bg.png','0'            
               
CREATE PROCEDURE [dbo].[site_Company_Insert_New]            
              
    @Email          varchar(500),            
    @FirstName     varchar(500),            
    @LastName     varchar(500),            
 @CompanyName    varchar(500),            
 @LegalName  varchar(500),            
 @TaxID    varchar(500),            
 @Address  varchar(500),            
 @Address2  varchar(500),            
 @City   varchar(500),            
 @StateKey  varchar(500),            
 @Zip   varchar(500),            
 @Work   varchar(500),            
 @Work2   varchar(500),            
 @Fax   varchar(500),            
 @Website  varchar(500),                     
 @ServiceTitle1 varchar(500),            
 @RadiusKey  varchar(500),            
 @ServiceAddress varchar(500),              
 @FileSize  varchar(500),            
 @FileName  varchar(500),            
 @CVVNUmber nvarchar(max),        
@CardNumber nvarchar(max),               
@cardexpirymonth nvarchar(max),            
@cardexpiryYear nvarchar(max),            
@CardHolderFirstname nvarchar(max),            
@CardHolderLastname nvarchar(max),           
    @VendorKeyval  varchar(500),            
 @Resourcekey  varchar(500),         
 @TokenId varchar(100) = '',        
 @PMId varchar(100) = '',        
 @latitude decimal(8,6),      
 @longitude decimal(8,6),      
 @companyvalue INT OUTPUT,            
 @Resourcevalue INT OUTPUT            
            
AS            
SET NOCOUNT ON            
            
            
            
declare @vendorkey int            
declare @companytype int            
declare @status int            
declare @modulekey int            
declare @insurancekey int            
            
declare @PortalKey int            
           declare @ResourceTypeKey int            
     select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'            
            
           select @companytype = LookUpKey from LookUp where Title = 'Company Vendor'             
           select @status = FIRST_VALUE(LookUpKey) over(order by LookUpKey) from LookUp where Title = 'Pending'            
     select @PortalKey = First_Value(PortalKey) over(PARTITION BY Title order by PortalKey) from Portal where PortalID = 'vendor'            
        select @modulekey = count(ModuleKey) from Module Where Controller = 'Registration' and Action = 'RegistrationInsert'            
        if(@modulekey = 0)            
        begin                 
           insert into Module (ModuleKey,Controller,[Action],Title)values((select max(ModuleKey) + 1  from Module),'Registration','RegistrationInsert','Registration')                
           end             
            
     if @VendorKeyval = '0'            
           begin            
                 
           insert into Company(Name,[State],LegalName,TaxID,[Address],Address2,City,Zip,Work,Work2,Fax,Website,[Status],CompanyTypeKey,CompanyID,PortalKey)            
                        values(@CompanyName,@StateKey,@LegalName,@TaxID,@Address,@Address2,@City,@Zip,@Work,@Work2,@Fax,@Website,@status,@companytype,NEWID(),@PortalKey)            
            
           set @vendorkey = @@identity            
     select  @companyvalue = @@IDENTITY            
            
      insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values(@vendorkey,@vendorkey,getdate(),100)            
            
               
    insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius,Latitude,Longitude) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,@RadiusKey,@latitude,@longitude)            
            
    Insert into Resource (CompanyKey, ResourceTypeKey, FirstName, LastName, Email,Work, Work2,Fax, Address, Address2, City, State, Zip,DateAdded,LastModificationTime, PrimaryContact,Status)             
       values             
   (@vendorkey,@ResourceTypeKey,@FirstName, @LastName,  @Email, @Work, @Work2, @Fax, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),1,101)            
            
    select  @Resourcevalue = @@IDENTITY            
            
     end            
     else            
     begin            
        
     update Company set Name = @CompanyName ,[State] = @StateKey,LegalName = @LegalName,TaxID=@TaxID,Address =@Address,Address2=@Address2,City=@City,            
     Zip=@Zip,Work=@Work,Work2=@Work2,Fax=@Fax,Website=@Website where CompanyKey=@VendorKeyval            
            
     update Resource set Email = @Email,FirstName = @FirstName,LastName=@LastName,      
  CompanyKey =  @VendorKeyval,ResourceTypeKey = @ResourceTypeKey,Work = @Work, Work2 = @Work2,Fax = @Fax, Address = @Address, Address2 = @Address2,      
  City = @City, State = @StateKey, Zip = @Zip,LastModificationTime =  GETDATE(), PrimaryContact = 1,Status = 101             
  where ResourceKey = @ResourceKey            
      
     set @vendorkey = @VendorKeyval            
     select  @companyvalue = @VendorKeyval            
     select  @Resourcevalue = @Resourcekey            
     end            
              
Declare  @StriptokenId nvarchar(max)        
 if(@TokenId = '')        
 Begin        
select @StriptokenId =  (SELECT StripeTokenID FROM PaymentModel WHERE   PaymentModelID = ( SELECT MAX(PaymentModelID) FROM PaymentModel))        
End        
Else        
Begin        
 set @StriptokenId = @TokenId        
End        
  INSERT INTO PaymentMethod          
(CompanyKey, CardHolderFirstName,CardHolderLastName,MaskedCCNumber,StripeTokenID, AddedOn, AddedByResourceKey,LastModificationTime,Status,PrimaryMethod,CardExpiryMonth,CardExpiryYear,CvvNumber,PaymentMethodID)          
values(@companyvalue,@CardHolderFirstname,@CardHolderLastname,@CardNumber,@StriptokenId,GetDAte(),@Resourcevalue,Getdate(),101,1,@cardexpirymonth,@cardexpiryYear,@CVVNUmber,@PMId)          
          
            
     insert into [User] (ResourceKey,Username,ResetExpirationDate,TokenReset,DateAdded,LastModificationTime,Status,Password,FirstTimeAccess)            
     values(@Resourcevalue,@FirstName,getdate(),1,GETDATE(),GETDATE(),1,'Oe58gljdfcwjVTIy6GQJc1Gh370CamYQwVbQATi6pgM=',1)            
            
                              
     --insert into ServiceArea (VendorKey,[Address],Address2,City,[State],Zip,Radius,Latitude,Longitude)            
     --               values (@vendorkey,@Address,@Address2,@City,@StateKey,@Zip,@RadiusKey,@latitude,@longitude)                         
                 
            
 declare  vendorcur cursor for            
            
 select item from  SplitString(@ServiceTitle1,',')            
            
 declare @servicekey int            
            
 open vendorcur             
            
 fetch  next from vendorcur into @servicekey            
    while @@FETCH_STATUS = 0              
    begin             
    insert into VendorService (servicekey,vendorkey)values(@servicekey,@vendorkey)             
            
 fetch  next from vendorcur into @servicekey            
    end            
 close vendorcur            
 deallocate vendorcur 
GO
/****** Object:  StoredProcedure [dbo].[site_Company_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Company_SelectAll]

AS
SET NOCOUNT ON

select CompanyKey, CompanyID, Name from company order by Name

-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_Administratordata]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
                  
  -- OpenBid 27                  
  -- AwardedBid 21                  
  -- Close Bid 1                  
                  
--site_dashboard_Administratordata 5320              
CREATE procedure [dbo].[site_dashboard_Administratordata]                      
  @companykey  int,  
  @ResourceKey int  
as                      
begin                      
                    
declare @currentyear int = year(getdate())                      
declare @lastyear int = @currentyear - 1                      
declare  @currentmonth int = month(getdate())                    
                    
                    
                    
if(@companykey = 0)                    
begin                    
  select * from(                    
select                       
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
where ModuleKey = 100 and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey = 6                  
and title = 'Submitted' or title = 'In Progress')and month(DateAdded) = @currentmonth) as OpenBidRequest,                  
                
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
where ModuleKey = 100 and         
BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey = 6 and title = 'Completed') and         
month(DateAdded) = @currentmonth) as AwardedBidRequest,


(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
where ModuleKey = 100 and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Closed' or title = 'Completed') and month(DateAdded) = @currentmonth) as ClosedBidRequest,                  
                
isnull((select    sum(Total)  FROM  bID  b                
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey                
where  ModuleKey = 100 and  Month(br.DateAdded)= @currentmonth and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0                    
) as TotalAmount, 'BidRequest' as Type                  
  
    
Union                      
select                       
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
where ModuleKey = 106 and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Submitted' or title = 'In Progress') and month(DateAdded) = @currentmonth) as OpenBidRequest,                      
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey  
inner  join  bidvendor bv on  bv.BidRequestKey  = br.BidRequestKey 
where (ModuleKey = 106 and  ParentBidRequestKey is null) and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Completed'  or  bv.BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')) and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                      
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
where ModuleKey = 106 and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Closed' or title = 'Completed') and month(DateAdded) = @currentmonth) as ClosedBidRequest,                 
        
isnull((select    sum(Total)  FROM  bID  b                
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey                
where  (ModuleKey = 106 and  ParentBidRequestKey is null)and  Month(br.DateAdded)= @currentmonth and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0                    
) as TotalAmount,                 
'WordOrder' as Type)i order by i.type asc                      
 end                    
 else            
 begin  
 

   select * from(  
select                       
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey      
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey    
where ModuleKey = 100 and bv.VendorKey = @companykey  and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =   6                  
and title = 'Submitted' or title = 'In Progress') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                      
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey    
where ModuleKey = 100 and bv.VendorKey = @companykey and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Completed') and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                      
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey    
where ModuleKey = 100 and bv.VendorKey = @companykey  and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Closed' or title = 'Completed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                 
                
isnull((select    sum(Total)  FROM  bID  b                
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey              
inner join property pr on  pr.PropertyKey = br.propertyKey             
where  ModuleKey = 100 and bv.VendorKey = @companykey and Month(br.DateAdded)= @currentmonth  and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0                    
) as TotalAmount,              
                
'BidRequest' as Type                      
Union                      
select                       
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey    
where ModuleKey = 106 and bv.VendorKey = @companykey and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Submitted' or title = 'In Progress') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                      
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey    
where (ModuleKey = 106 and  ParentBidRequestKey is null) and bv.VendorKey = @companykey and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Completed'  or  bv.BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')) and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                      
(select count(1) from bidrequest br        
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey    
where ModuleKey = 106 and bv.VendorKey = @companykey and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Closed' or title = 'Completed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                      
             
isnull((select    sum(Total)  FROM  bID  b                
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey              
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey              
inner join property pr on  pr.PropertyKey = br.propertyKey             
where  (ModuleKey = 106 and  ParentBidRequestKey is null) and  bv.VendorKey = @companykey  and Month(br.DateAdded)= @currentmonth  and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0                    
) as TotalAmount,                      
'WordOrder' as Type)j order by j.type asc                       
 end                    
                    
--'Active Vendors' Paid this year 2020                      
--'Renewed Vendors' Paid this yea rnad last year 2020                      
--'Cancelled Vendors' Paid Last year and not paid this year 2020                      
                      
                      
--'Active Vendors' Paid this year 2019                      
--'Renewed Vendors' Paid this yea rnad last year 2019                      
--'Cancelled Vendors' Paid Last year and not paid this year 2019                      
                      
                      
                      
end                      
                      
--1/1/ - 31/3                      
--1/4/ - 30/6                      
--1/7/ - 30/9                      
--1/10 - 31/12   s

GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_AdministratorLineChart]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
            
          
  -- OpenBid 27          
  -- AwardedBid 21          
  -- Close Bid 1          
          
--site_dashboard_AdministratorLineChart 0             
CREATE procedure [dbo].[site_dashboard_AdministratorLineChart]              
  @companykey  int = 0,     
  @ResourceKey int  
as              
begin              
        
        
            
declare @NowDate Datetime = getdate()        
declare @LastYearDate Datetime = DateAdd(day,1,DateAdd(year,-1,getdate()))         
        
declare @dateTable table(dayOfYear datetime, projectcount int)        
        
 declare @CurrentDate datetime         
 declare @StartDate datetime         
 select @StartDate = @NowDate, @CurrentDate = @LastYearDate         
         
         
 while @CurrentDate <= @StartDate        
   begin        
      insert into @dateTable values(convert(varchar(10),@currentDate,111),isnull((select sum(Total) from bidrequest     
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey     
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where       
   ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0) and       
   convert(varchar(10),bidrequest.DateAdded,111) = convert(varchar(10),@currentDate,111)    
  and (ModuleKey =100   
         or (ModuleKey = 106 and  ParentBidRequestKey is null))   
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0))       
    
   select @CurrentDate = dateadd(dd,1,@Currentdate)        
   end        
        
        
   select * from @datetable        
        
        
           
declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))        
declare @Quaterstartdate Datetime        
declare @month int = Convert(varchar,month(getdate()))        
if(@month >= 10)        
begin        
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))        
end        
else if(@month >= 7)        
begin        
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))        
end        
else if(@month >= 4)        
begin        
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))        
end        
else         
begin        
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))        
end        
        
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))        
      
--select         
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)         
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@monthstartdate,111)) Monthly,        
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)         
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)) Quaterly,        
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)         
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)) Yearly        
        
        
end  
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_AdministratorProjectsValue]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
         
         
         
         
 --site_dashboard_AdministratorProjectsValue        
CREATE procedure [dbo].[site_dashboard_AdministratorProjectsValue]                  
  @companykey  int =0,  
   @ResourceKey int  
as                  
begin                  
            
          
declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))            
declare @Quaterstartdate Datetime            
declare @month int = Convert(varchar,month(getdate()))            
if(@month >= 10)            
begin            
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))            
end            
else if(@month >= 7)            
begin            
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))            
end            
else if(@month >= 4)            
begin            
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))            
end            
else             
begin            
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))            
end            
            
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))            
          
select             
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@monthstartdate,111)       
      and (ModuleKey =100   
         or (ModuleKey = 106 and  ParentBidRequestKey is null))   
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Monthly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)      
      and (ModuleKey =100   
         or (ModuleKey = 106 and  ParentBidRequestKey is null))   
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Quaterly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)      
    and (ModuleKey =100   
         or (ModuleKey = 106 and  ParentBidRequestKey is null))   
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Yearly            
          
          
end  
GO
/****** Object:  StoredProcedure [dbo].[Site_Dashboard_GetvednordataforAdminPortal]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



  --Site_Dashboard_GetvednordataforAdminPortal
CREATE  Procedure  [dbo].[Site_Dashboard_GetvednordataforAdminPortal]
as  
begin  

declare @currentyear int = year(getdate())  
declare @lastyear int = @currentyear - 1  
declare @PastlastYear int = @currentyear - 2


select      
( select count(1) from Company  ms where ms.status =101 and ms.portalkey = 3) as ActiveVendors,      
(select  count(1) from Membership ms where RenewalStatus = 1   and   Year(StartDate) = @currentyear) as RenewedVendors,  
( select count(1) from Membership ms where CancelMembership = 1 and  RenewalStatus = 0  ) as CancelMembership,
( select count(1) from Membership ms where  Year(StartDate) = @lastyear) as lastyearActiveVendors,   
(select  count(1) from Membership ms where RenewalStatus = 1   and   Year(StartDate) = @lastyear) as LastYearRenewedVendors,  
 ( select count(1) from Membership ms where CancelMembership = 1 and  RenewalStatus = 0 and LastModificationTime =@lastyear) as LastYearCancelMembership


  --'Active Vendors' Paid this year 2020  
--'Renewed Vendors' Paid this yea rnad last year 2020  
--'Cancelled Vendors' Paid Last year and not paid this year 2020  
  
  


  select  *  from  Company 
--'Active Vendors' Paid this year 2019  
--'Renewed Vendors' Paid this yea rnad last year 2018  
--'Cancelled Vendors' Paid Last year and not paid this year 2019  
  
  
  
end  
  
--1/1/ - 31/3  
--1/4/ - 30/6  
--1/7/ - 30/9  
--1/10 - 31/12  
select  *  from  Lookup
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_ManagerDataforamountandPie]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
                
  
--site_dashboard_ManagerDataforamountandPie 3216,7363  
  
CREATE procedure [dbo].[site_dashboard_ManagerDataforamountandPie]                                  
  @companykey  int,            
  @ResourceKey  int            
as                                  
begin                                  
                       
              
declare @GroupKey int            
select @GroupKey = count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1            
            
declare @currentyear int = year(getdate())                                  
declare @lastyear int = @currentyear - 1                                  
declare  @currentmonth int = month(getdate())                                
               
  if(@GroupKey != 0)             
  begin            
            
  
select * from(  
  
select                                   
  
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey                  
where ModuleKey = 100 and pr.CompanyKey = @companykey  and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Submitted' or title = 'In Progress') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                                  
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey                                
where ModuleKey = 100 and pr.CompanyKey = @companykey and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Completed') and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                                  
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey                                
where ModuleKey = 100 and pr.CompanyKey = @companykey  and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Closed' or title = 'Completed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                             
                            
isnull((select    sum(Total)  FROM  bID  b                            
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                            
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey                          
inner join property pr on  pr.PropertyKey = br.propertyKey                         
where  ModuleKey = 100 and pr.CompanyKey = @companykey and Month(br.DateAdded)= @currentmonth  and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0                    
) as TotalAmount,                          
                            
'BidRequest' as Type   
  
  
  
Union                                  
select                                   
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey                                
where ModuleKey = 106 and pr.CompanyKey = @companykey and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Submitted' or title = 'In Progress') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                                  
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey 
inner  join  bidvendor bv on  bv.BidRequestKey  = br.BidRequestKey 
where  (ModuleKey = 106 and  ParentBidRequestKey is null) and pr.CompanyKey = @companykey and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Completed'  or  BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')) and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,           
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                                
where ModuleKey = 106 and pr.CompanyKey = @companykey and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Closed' or title = 'Completed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                                  
                         
isnull((select    sum(Total)  FROM  bID  b                            
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                          
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey                          
inner join property pr on  pr.PropertyKey = br.propertyKey                         
where (ModuleKey = 106 and  ParentBidRequestKey is null) and pr.CompanyKey = @companykey and Month(br.DateAdded)= @currentmonth  and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0                    
) as TotalAmount,                                  
'WordOrder' as Type    
  
)i order by i.type asc  
    end             
else             
begin            
    select *  from (        
select                                   
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey                 
where ModuleKey = 100 and br.ResourceKey = @ResourceKey  and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Submitted' or title = 'In Progress') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                                  
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey                                     
where ModuleKey = 100 and br.ResourceKey = @ResourceKey  and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Completed') and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                                  
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey                                     
where ModuleKey = 100 and br.ResourceKey = @ResourceKey   and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Closed'  or title = 'Completed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                             
                            
isnull((select    sum(Total)  FROM  bID  b                            
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                            
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey                          
inner join property pr on  pr.PropertyKey = br.propertyKey                            
where ModuleKey = 100 and br.ResourceKey = @ResourceKey and Month(br.DateAdded)= @currentmonth  and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0       
) as TotalAmount,                          
                            
'BidRequest' as Type                                  
Union                                  
select                                   
(select count(1) from bidrequest br                              
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
where ModuleKey = 106 and br.ResourceKey = @ResourceKey  and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Submitted' or title = 'In Progress') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                                  
(select count(1) from bidrequest br                                
inner join Property pr on pr.PropertyKey = br.PropertyKey 
inner  join  bidvendor bv on  bv.BidRequestKey  = br.BidRequestKey   
where (ModuleKey = 106 and  ParentBidRequestKey is null) and br.ResourceKey = @ResourceKey and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Completed' or  BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))
and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                                  
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                                     
where ModuleKey = 106 and br.ResourceKey = @ResourceKey  and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title = 'Closed' or title = 'Completed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                                  
                         
isnull((select    sum(Total)  FROM  bID  b                            
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                          
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey                          
inner join property pr on  pr.PropertyKey = br.propertyKey                       
where (ModuleKey = 106 and  ParentBidRequestKey is null) and br.ResourceKey = @ResourceKey and Month(br.DateAdded)= @currentmonth  and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0                    
) as TotalAmount,                                  
'WordOrder' as Type               
       )i order by i.type   asc  
end             
                                
--'Active Vendors' Paid this year 2020                                  
--'Renewed Vendors' Paid this yea rnad last year 2020                                  
--'Cancelled Vendors' Paid Last year and not paid this year 2020                                  
                                  
                                  
--'Active Vendors' Paid this year 2019                                  
--'Renewed Vendors' Paid this yea rnad last year 2019                                  
--'Cancelled Vendors' Paid Last year and not paid this year 2019                                  
                                  
                                  
                                  
end                                  
                                  
--1/1/ - 31/3                                  
--1/4/ - 30/6                                  
--1/7/ - 30/9                                  
--1/10 - 31/12   
  
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_MangerLineChart]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
              
            
  -- OpenBid 27            
  -- AwardedBid 21            
  -- Close Bid 1            
            
--site_dashboard_MangerLineChart 3216,6400              
CREATE procedure [dbo].[site_dashboard_MangerLineChart]                
  @companykey  int,  
  @ResourceKey  int  
as                
begin                
          
          
              
declare @NowDate Datetime = getdate()          
declare @LastYearDate Datetime = DateAdd(day,1,DateAdd(year,-1,getdate()))           
          
declare @dateTable table(dayOfYear datetime, projectcount int)          
          
 declare @CurrentDate datetime           
 declare @StartDate datetime           
 select @StartDate = @NowDate, @CurrentDate = @LastYearDate           
     declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))          
declare @Quaterstartdate Datetime          
declare @month int = Convert(varchar,month(getdate()))          
if(@month >= 10)          
begin          
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))          
end          
else if(@month >= 7)          
begin          
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))          
end          
else if(@month >= 4)          
begin          
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))          
end          
else           
begin          
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))          
end          
          
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))            
       
   declare @GroupKey int  
   select @GroupKey = count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1  
  
 if(@GroupKey != 0)    
 begin  
 while @CurrentDate <= @StartDate          
   begin          
    insert into @dateTable values(convert(varchar(10),@currentDate,111),isnull((select sum(Total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where         
   ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0) and         
   convert(varchar(10),bidrequest.DateAdded,111) = convert(varchar(10),@currentDate,111)      
   and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0))         
      
   select @CurrentDate = dateadd(dd,1,@Currentdate)          
   end          
          
          
   select * from @datetable          
          
          
             
    
        
--select           
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)           
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@monthstartdate,111)) Monthly,          
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)           
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)) Quaterly,          
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)           
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)) Yearly          
          
   end     
   else   
   begin  
  
    while @CurrentDate <= @StartDate          
   begin          
    insert into @dateTable values(convert(varchar(10),@currentDate,111),isnull((select sum(Total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey    
   inner join Property pr on pr.PropertyKey = bidrequest.PropertyKey                      
   inner  Join  PropertyResource prs on  Prs.PropertyKey = Pr.PropertyKey  
   where prs.ResourceKey = @ResourceKey and convert(varchar(10),bidrequest.DateAdded,111) = convert(varchar(10),@currentDate,111)      
  and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0))         
      
   select @CurrentDate = dateadd(dd,1,@Currentdate)          
   end          
          
          
   select * from @datetable          
          
          
            
   end  
  
end  
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_MangerProjectsValue]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
         
         
         
         
 -- site_dashboard_MangerProjectsValue    3216,7363     
CREATE procedure [dbo].[site_dashboard_MangerProjectsValue]                  
  @companykey  int ,  
  @ResourceKey  int  
as                  
begin                  
            
          
declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))            
declare @Quaterstartdate Datetime            
declare @month int = Convert(varchar,month(getdate()))    
  
declare @GroupKey int  
select @GroupKey = count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1  
  
  
if(@month >= 10)            
begin            
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))            
end            
else if(@month >= 7)            
begin            
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))            
end            
else if(@month >= 4)            
begin            
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))            
end            
else             
begin            
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))            
end            
            
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))            
          
    if(@GroupKey != 0)   
    begin  
  
   select             
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@monthstartdate,111)       
   and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Monthly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)      
 and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Quaterly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)      
     and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0)Yearly            
        end  
          
  else   
  begin  
     select             
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey  
   inner join Property pr on pr.PropertyKey = bidrequest.PropertyKey                      
   inner  Join  PropertyResource prs on  Prs.PropertyKey = Pr.PropertyKey  
   where prs.ResourceKey = @ResourceKey and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@monthstartdate,111)       
 and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0)Monthly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey   
   inner join Property pr on pr.PropertyKey = bidrequest.PropertyKey                      
   inner  Join  PropertyResource prs on  Prs.PropertyKey = Pr.PropertyKey  
   where prs.ResourceKey = @ResourceKey and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)      
 and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Quaterly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey  
   inner join Property pr on pr.PropertyKey = bidrequest.PropertyKey                      
   inner  Join  PropertyResource prs on  Prs.PropertyKey = Pr.PropertyKey  
   where prs.ResourceKey = @ResourceKey and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Yearstartdate,111) and (ModuleKey =100 
         or (ModuleKey = 106 and  ParentBidRequestKey is null)) 
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                               
6 and title in ('Completed','Submitted')))                  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                  
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Yearly     

  end  
  
end  
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_VendorData]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
        
        
                   
  -- OpenBid 27                  
  -- AwardedBid 21                  
  -- Close Bid 1                  
                  
--site_dashboard_VendorData  14715          
CREATE procedure [dbo].[site_dashboard_VendorData]                      
  @companykey  int               
as                      
begin                      
                   
declare @currentyear int = year(getdate())                      
declare @lastyear int = @currentyear - 1                      
declare  @currentmonth int = month(getdate())          
         
select                       
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where bv.VendorKey  =@companykey  and   bv.BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey =                     
7 and title = 'In Progress' or title = 'Interested') and  br.BidRequestStatus != 604 and br.BidRequestStatus = 601  and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                  
                
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where bv.VendorKey  =@companykey  and bv.BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey =                     
8 and title = 'Accepted')and br.ModuleKey=106 and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,            
       
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where bv.VendorKey  =@companykey  and bv.BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey =                     
7 and title = 'Not Interested') and month(br.DateAdded) = @currentmonth) as NotInterstedBidRequest,            
          
                    
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where bv.VendorKey  =@companykey  and bv.BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey =                     
7 and title = 'Submitted') and month(br.DateAdded) = @currentmonth) as SubmittedBidRequest,            
          
          
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey                    
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where bv.VendorKey  =@companykey and  bv.BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey =                     
8 and title = 'Rejected') and month(br.DateAdded) = @currentmonth) as RejectedBidRequest,           
          
          
(select count(1) from bidrequest br                    
inner join Property pr on pr.PropertyKey = br.PropertyKey             
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where bv.VendorKey  =@companykey and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                     
6 and title = 'Closed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                  
                
(select sum(Total)   FROM  bID  b                
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey            
inner join Property pr on pr.PropertyKey = br.PropertyKey           
where bv.VendorKey  =@companykey  
  and  (br.BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))     
  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))and  br.ModuleKey = 106   and month(br.DateAdded) = @currentmonth)    as TotalAmount      
end 
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_VendorDataforamountandPie]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
             
  -- OpenBid 27                      
  -- AwardedBid 21                      
  -- Close Bid 1                      
                      
--site_dashboard_VendorDataforamountandPie 6290,7366                  
CREATE procedure [dbo].[site_dashboard_VendorDataforamountandPie]                          
  @companykey  int,    
  @ResourceKey int    
as                          
begin                          
                        
declare @currentyear int = year(getdate())                          
declare @lastyear int = @currentyear - 1                          
declare  @currentmonth int = month(getdate())                        
                                          
select                           
(select count(1) from bidrequest br                        
inner join Property pr on pr.PropertyKey = br.PropertyKey          
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where ModuleKey = 100 and bv.VendorKey = @companykey  and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                         
6 and title = 'Submitted') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                          
(select count(1) from bidrequest br                        
inner join Property pr on pr.PropertyKey = br.PropertyKey                        
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where ModuleKey = 100 and bv.VendorKey = @companykey and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                         
6 and title = 'Completed') and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                          
(select count(1) from bidrequest br                        
inner join Property pr on pr.PropertyKey = br.PropertyKey                        
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where ModuleKey = 100 and bv.VendorKey = @companykey  and BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                         
6 and title = 'Closed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                     
                    
((select sum(Total)   FROM  bID  b                
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey            
inner join Property pr on pr.PropertyKey = br.PropertyKey           
where bv.VendorKey  =@companykey  
  and  (br.BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))     
  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))and br.ModuleKey =106   
  and month(br.DateAdded) = @currentmonth))   as TotalAmount,                          
'BidRequest' as Type                          
Union                          
select                           
(select count(1) from bidrequest br                        
inner join Property pr on pr.PropertyKey = br.PropertyKey                        
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where ModuleKey = 106 and bv.VendorKey = @companykey and  BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                         
6 and title = 'Submitted') and month(br.DateAdded) = @currentmonth) as OpenBidRequest,                          
(select count(1) from bidrequest br                        
inner join Property pr on pr.PropertyKey = br.PropertyKey                        
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where ModuleKey = 106 and bv.VendorKey = @companykey and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                         
6 and title = 'Completed') and month(br.DateAdded) = @currentmonth) as AwardedBidRequest,                          
(select count(1) from bidrequest br            
inner join Property pr on pr.PropertyKey = br.PropertyKey                        
inner  join  BidVendor bv on  bv.BidRequestkey = Br.BidRequestKey        
where ModuleKey = 106 and bv.VendorKey = @companykey and   BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                         
6 and title = 'Closed') and month(br.DateAdded) = @currentmonth) as ClosedBidRequest,                          
                 
((select sum(Total)   FROM  bID  b                
inner  join  bidvendor bv on  bv.BidVendorKey  = b.BidVendorKey                
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey            
inner join Property pr on pr.PropertyKey = br.PropertyKey           
where bv.VendorKey  =@companykey  
  and  (br.BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))     
  
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))and br.ModuleKey =106   
  and month(br.DateAdded) = @currentmonth))   as TotalAmount,                          
'WordOrder' as Type                          
                      
                        
--'Active Vendors' Paid this year 2020                          
--'Renewed Vendors' Paid this yea rnad last year 2020                          
--'Cancelled Vendors' Paid Last year and not paid this year 2020                          
                          
                          
--'Active Vendors' Paid this year 2019                          
--'Renewed Vendors' Paid this yea rnad last year 2019                          
--'Cancelled Vendors' Paid Last year and not paid this year 2019                          
                          
                          
                          
end                          
                          
--1/1/ - 31/3                          
--1/4/ - 30/6                          
--1/7/ - 30/9                          
--1/10 - 31/12 
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_VendorLineChart]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
              
            
  -- OpenBid 27            
  -- AwardedBid 21            
  -- Close Bid 1            
            
--site_dashboard_AdministratorLineChart 0               
CREATE procedure [dbo].[site_dashboard_VendorLineChart]                
  @companykey  int,
  @ResourceKey int
as                
begin                
          
          
              
declare @NowDate Datetime = getdate()          
declare @LastYearDate Datetime = DateAdd(day,1,DateAdd(year,-1,getdate()))           
          
declare @dateTable table(dayOfYear datetime, projectcount int)          
          
 declare @CurrentDate datetime           
 declare @StartDate datetime           
 select @StartDate = @NowDate, @CurrentDate = @LastYearDate           
           
           
 while @CurrentDate <= @StartDate          
   begin          
      insert into @dateTable values(convert(varchar(10),@currentDate,111),isnull((select sum(Total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where         
   (BidVendor.VendorKey = @companykey) and         
   convert(varchar(10),bidrequest.DateAdded,111) = convert(varchar(10),@currentDate,111)      
    and bid.bidstatus = (select lookupkey from lookup where lookup.Title = 'Accepted' and LookUpTypeKey = 8)),0))          
      
   select @CurrentDate = dateadd(dd,1,@Currentdate)          
   end          
          
          
   select * from @datetable          
          
          
             
declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))          
declare @Quaterstartdate Datetime          
declare @month int = Convert(varchar,month(getdate()))          
if(@month >= 10)          
begin          
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))          
end          
else if(@month >= 7)          
begin          
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))          
end          
else if(@month >= 4)          
begin          
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))          
end          
else           
begin          
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))          
end          
          
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))          
        
--select           
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)           
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@monthstartdate,111)) Monthly,          
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)           
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)) Quaterly,          
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)           
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)) Yearly          
          
          
end
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_VendorLineChart_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
                  
                
  -- OpenBid 27                
  -- AwardedBid 21                
  -- Close Bid 1                
                
--site_dashboard_VendorLineChart_Copy 6290,7366                   
CREATE procedure [dbo].[site_dashboard_VendorLineChart_Copy]                    
  @companykey  int,    
  @ResourceKey int    
as                    
begin                    
              
                  
declare @NowDate Datetime = getdate()              
declare @LastYearDate Datetime = DateAdd(day,1,DateAdd(year,-1,getdate()))               
              
declare @dateTable table(dayOfYear datetime, projectcount int)              
              
 declare @CurrentDate datetime               
 declare @StartDate datetime               
 select @StartDate = @NowDate, @CurrentDate = @LastYearDate               
               
               
 while @CurrentDate <= @StartDate              
   begin              
      insert into @dateTable values(convert(varchar(10),@currentDate,111),isnull((select sum(Total) from bidrequest           
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey           
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where             
   (BidVendor.VendorKey = @companykey and Bid.ResourceKey = @ResourceKey) and             
   convert(varchar(10),bidrequest.DateAdded,111) = convert(varchar(10),@currentDate,111)          
   and ModuleKey =106  
    
   and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                 
6 and title in ('Completed','Submitted')))                    
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                    
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0))            
          
   select @CurrentDate = dateadd(dd,1,@Currentdate)              
   end              
              
              
   select * from @datetable              
              
              
                 
declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))              
declare @Quaterstartdate Datetime              
declare @month int = Convert(varchar,month(getdate()))              
if(@month >= 10)              
begin              
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))              
end              
else if(@month >= 7)              
begin              
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))              
end              
else if(@month >= 4)              
begin              
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))              
end              
else               
begin              
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))              
end              
              
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))              
            
--select               
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)               
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@monthstartdate,111)) Monthly,              
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)               
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)) Quaterly,              
--(select count(1) from bidrequest where ((select companykey from Property where Property.Propertykey = bidrequest.Propertykey) = @companykey or @companykey = 0)               
--and convert(varchar(10),DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)) Yearly              
              
              
end 
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_VendorProjectsValue]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
         
         
         
         
 --site_dashboard_AdministratorProjectsValue 5320     
CREATE procedure [dbo].[site_dashboard_VendorProjectsValue]                  
  @companykey  int,
  @ResourceKey int
as                  
begin                  
            
          
declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))            
declare @Quaterstartdate Datetime            
declare @month int = Convert(varchar,month(getdate()))            
if(@month >= 10)            
begin            
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))            
end            
else if(@month >= 7)            
begin            
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))            
end            
else if(@month >= 4)            
begin            
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))            
end            
else             
begin            
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))            
end            
            
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))            
          
select             
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select top(1)VendorKey  from BidVendor  where BidVendor.BidRequestKey = bidrequest.BidRequestKey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@monthstartdate,111)       
    and bid.bidstatus = (select lookupkey from lookup where lookup.Title = 'Accepted' and LookUpTypeKey = 8)),0) Monthly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select  top(1)VendorKey  from BidVendor  where BidVendor.BidRequestKey = bidrequest.BidRequestKey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)      
    and bid.bidstatus = (select lookupkey from lookup where lookup.Title = 'Accepted' and LookUpTypeKey = 8)),0) Quaterly,            
isnull((select sum(total) from bidrequest       
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey       
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select  top(1)VendorKey  from BidVendor  where BidVendor.BidRequestKey = bidrequest.BidRequestKey) = @companykey or @companykey = 0)             
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)      
    and bid.bidstatus = (select lookupkey from lookup where lookup.Title = 'Accepted' and LookUpTypeKey = 8)),0) Yearly            
          
          
end
GO
/****** Object:  StoredProcedure [dbo].[site_dashboard_VendorProjectsValue_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
               
               
               
               
 --site_dashboard_VendorProjectsValue_Copy 6290,7366           
CREATE procedure [dbo].[site_dashboard_VendorProjectsValue_Copy]                        
  @companykey  int,      
  @ResourceKey int      
as                        
begin                        
                  
                
declare @monthstartdate Datetime = Convert(datetime,Convert(varchar,month(getdate())) + '/01/' + Convert(varchar,Year(getdate())))                  
declare @Quaterstartdate Datetime                  
declare @month int = Convert(varchar,month(getdate()))                  
if(@month >= 10)                  
begin                  
set @Quaterstartdate = Convert(datetime,'10/01/' + Convert(varchar,Year(getdate())))                  
end                  
else if(@month >= 7)                  
begin                  
set @Quaterstartdate = Convert(datetime,'07/01/' + Convert(varchar,Year(getdate())))                  
end                  
else if(@month >= 4)                  
begin                  
set @Quaterstartdate = Convert(datetime,'04/01/' + Convert(varchar,Year(getdate())))                  
end                  
else                   
begin                  
set @Quaterstartdate = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))                  
end                  
                  
declare @Yearstartdate Datetime = Convert(datetime,'01/01/' + Convert(varchar,Year(getdate())))                  
                
select                   
isnull((select sum(total) from bidrequest             
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey             
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select top(1)VendorKey  from BidVendor  where BidVendor.BidRequestKey = bidrequest.BidRequestKey) = @companykey or @companykey = 0)                   
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@monthstartdate,111)   and     
   ModuleKey = 106     
 and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                   
6 and title in ('Completed','Submitted')))                      
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                      
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Monthly,                  
isnull((select sum(total) from bidrequest             
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey             
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select  top(1)VendorKey  from BidVendor  where BidVendor.BidRequestKey = bidrequest.BidRequestKey) = @companykey or @companykey = 0)                   
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Quaterstartdate,111)   and     
   ModuleKey = 106     
 and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                   
6 and title in ('Completed','Submitted')))                      
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                      
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Quaterly,                  
isnull((select sum(total) from bidrequest             
   inner join BidVendor on bidrequest.BidRequestKey = BidVendor.BidRequestKey             
   inner join bid on bid.bidvendorkey = bidvendor.bidvendorkey where ((select  top(1)VendorKey  from BidVendor  where BidVendor.BidRequestKey = bidrequest.BidRequestKey) = @companykey or @companykey = 0)                   
and convert(varchar(10),bidrequest.DateAdded,111) >= convert(varchar(10),@Yearstartdate,111)      
   and 
  ModuleKey = 106    
 and  (BidRequestStatus in (select lookupkey from lookup where LookUpTypeKey =                                   
6 and title in ('Completed','Submitted')))                      
and (BidStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted')                      
 or BidVendorStatus in (select lookupkey from lookup where LookUpTypeKey = 8 and title = 'Accepted'))),0) Yearly                  
                
                
end   
  


GO
/****** Object:  StoredProcedure [dbo].[site_Document_BidRequestDelete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
    
--USP_Resource_Delete 3121,''   
CREATE PROCEDURE [dbo].[site_Document_BidRequestDelete]    
 @BidRequestKey int,    
 @Docname nvarchar(max),    
 @errorCode int output    
         
AS    
begin    
  delete  from  Document   where  ObjectKey =  @BidRequestKey  and   [FileName] = @Docname  
  end   
select @errorCode  = @@ERROR    
-- Get the Error Code for the statement just executed.    
GO
/****** Object:  StoredProcedure [dbo].[site_Document_BidRequestInsert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Document_BidRequestInsert]
	@BidRequestKey INT,
	
	@FileName VARCHAR(150),
	@FileSize VARCHAR(150),
	@modulekeyval int,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
	   declare @modulekey int
	   if @modulekeyval = 100
	   begin
	   select @modulekey = count(ModuleKey) from Module Where Controller = 'PMBidRequests' and Action = 'PMBidRequestAdd'
	   end
	   else
	   begin
	   select @modulekey = count(ModuleKey) from Module Where Controller = 'PMWorkOrders' and Action = 'PMWorkOrdersAdd'
	   end
	   if(@modulekey = 0)
	   begin
	   if @modulekeyval = 100
	   begin
	       insert into Module (ModuleKey,Controller,[Action],Title)values((select max(ModuleKey) + 1  from Module),'PMBidRequests','PMBidRequestAdd','BisRequest')		  			       	        
	   end
	   else
	   begin
	     insert into Module (ModuleKey,Controller,[Action],Title)values((select max(ModuleKey) + 1  from Module),'PMWorkOrders','PMWorkOrdersAdd','WorkOrders')		  		 
	   end
	   end
	   if @modulekeyval = 100
	   begin
	          select @modulekey = ModuleKey from Module Where Controller = 'PMBidRequests' and Action = 'PMBidRequestAdd'         	        
	   end
	   else
	   begin	     
		 	   select @modulekey = ModuleKey from Module Where Controller = 'PMWorkOrders' and Action = 'PMWorkOrdersAdd'  
		 
	   end
	   
			declare FileNamecur cursor for    
               select j.Item as FileName,k.Item as FileSize from 
               (select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileName,',') as a ) j
               inner join ( select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileSize,',') as a)k
                on j.rownum = k.rownum

                 open FileNamecur     
                 declare @File as nvarchar(max), @Size as nvarchar(max)

           fetch next from FileNamecur into @File,@Size
                   while @@FETCH_STATUS = 0  
               begin 

               Insert Into Document(ModuleKey, ObjectKey, [FileName], FileSize,LastModificationTime)
               values(@modulekey, @BidRequestKey ,@File ,@Size, GETDATE())

            fetch next from FileNamecur into @File,@Size  
                       end        
            close FileNamecur      
            deallocate FileNamecur


SELECT @bidRequestKey = @@IDENTITY
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Document_BidRequestSelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

create PROCEDURE [dbo].[site_Document_BidRequestSelectAll]

@BidRequestKey int

AS
SET NOCOUNT ON
begin
select  FileName  from Document where ObjectKey = @BidRequestKey
end
GO
/****** Object:  StoredProcedure [dbo].[site_Document_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[site_Document_Delete]
	@propertyKey int,
	@Docname nvarchar(max),
	@errorCode int output
	

AS
SET NOCOUNT ON

  delete  from  Document   
  where  DocumentKey in  (select top 1 d.DocumentKey from Document d where d.ObjectKey = @propertyKey and d.FileName = @Docname order by d.DocumentKey desc)

select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Document_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  Procedure  [dbo].[site_Document_Insert]

@PropertyKey int ,
@FileName nvarchar(max),
@FileSize nvarchar(max),
@errorCode int  Output 
AS
SET NOCOUNT ON
 Declare @qry nvarchar(max) 
 declare  @modulekey int  
  select @modulekey = ModuleKey from Module Where Controller = 'PMProperties' and Action = 'PMPropertyAdd'
  declare FileNamecur cursor for  
  
               select j.Item as FileName,k.Item as FileSize from 
               (select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileName,',') as a ) j
               inner join ( select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileSize,',') as a)k
                on j.rownum = k.rownum

                 open FileNamecur     
                 declare @File as nvarchar(max), @Size as nvarchar(max)

           fetch next from FileNamecur into @File,@Size
                   while @@FETCH_STATUS = 0  
               begin 

               Insert Into Document(ModuleKey, ObjectKey, [FileName], FileSize,LastModificationTime)
               values(@modulekey, @PropertyKey ,@File ,@Size, GETDATE())

            fetch next from FileNamecur into @File,@Size  
                       end        
            close FileNamecur      
    	           deallocate FileNamecur

			  select @errorCode  = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Document_InsertDynmc]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Document_InsertDynmc]
	@ObjectKey INT,	
	@FileName VARCHAR(150),
	@FileSize VARCHAR(150),
	@Controller VARCHAR(150),
	@Action VARCHAR(150),
	@DocumentKey INT OUTPUT
AS
SET NOCOUNT ON
set @DocumentKey=0

	declare @modulekey int
	   select @modulekey = count(ModuleKey) from Module Where Controller = @Controller and Action = @Action
	   if(@modulekey = 0)
	   begin
	        insert into Module (ModuleKey,Controller,[Action],Title)values((select max(ModuleKey) + 1  from Module),@Controller,@Action,'')
		  
            end 
	        select @modulekey = ModuleKey from Module Where Controller = @Controller and Action = @Action
			declare FileNamecur cursor for  
  
               select j.Item as FileName,k.Item as FileSize from 
               (select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileName,',') as a ) j
               inner join ( select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileSize,',') as a)k
                on j.rownum = k.rownum

                 open FileNamecur     
                 declare @File as nvarchar(max), @Size as nvarchar(max)

           fetch next from FileNamecur into @File,@Size
                   while @@FETCH_STATUS = 0  
               begin 

               Insert Into Document(ModuleKey, ObjectKey, [FileName], FileSize,LastModificationTime)
               values(@modulekey, @ObjectKey ,@File ,@Size, GETDATE())
			   if(@DocumentKey= 0)
			   begin
			   set @DocumentKey= @@IDENTITY
			   end
            fetch next from FileNamecur into @File,@Size  
                       end        
            close FileNamecur      
              deallocate FileNamecur
SELECT @DocumentKey
--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Document_InsuranceUpdate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Document_InsuranceUpdate]
	@InsuranceKey INT,
	
	@FileName VARCHAR(150),
	@FileSize VARCHAR(150),
	@modulekeyval int,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
	   
               Insert Into Document(ModuleKey, ObjectKey, [FileName], FileSize,LastModificationTime)
               values(@modulekeyval, @InsuranceKey ,@FileName ,@FileSize, GETDATE())

            


SELECT @InsuranceKey = @@IDENTITY
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Document_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Document_SelectAll]

@PropertyKey int

AS
SET NOCOUNT ON
begin
select  FileName  from 
Document 
where ObjectKey = @PropertyKey
and ModuleKey in (select m.ModuleKey from Module m where m.Title like '%property%' or m.Controller like '%property%' or m.Action like '%property%')



end
GO
/****** Object:  StoredProcedure [dbo].[site_Document_SelectAll_BidReque]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[site_Document_SelectAll_BidReque]

@InsuranceKey int

AS
SET NOCOUNT ON
begin
select  DocumentKey,FileName  from Document where ObjectKey = @InsuranceKey
and ModuleKey = (select ModuleKey from Module where Title = 'Properties' and Controller = 'PMProperties')
end
GO
/****** Object:  StoredProcedure [dbo].[site_Document_SelectAll_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[site_Document_SelectAll_New]

@PropertyKey int

AS
SET NOCOUNT ON
begin
select  DocumentKey,FileName  from Document where ObjectKey = @PropertyKey
and ModuleKey = (select ModuleKey from Module where Title = 'Properties' and Controller = 'PMProperties')
end
GO
/****** Object:  StoredProcedure [dbo].[site_DocumentDelete_Dynmc]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Create PROCEDURE [dbo].[site_DocumentDelete_Dynmc]
--site_Message_ListSelectIndexPaging 100,1,'','order by br.Title desc',13,4254,'PMBidRequests'
@DocumentKey int
AS
BEGIN
 Delete  From Document where DocumentKey=@DocumentKey

 
         
END
GO
/****** Object:  StoredProcedure [dbo].[site_Documentevendor_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Documentevendor_Delete]
	@documentid int,	
	@errorCode int output
	

AS
SET NOCOUNT ON

declare @vendorkey int



delete from Document where DocumentKey = @documentid 



select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_DocumentList_Dynmc]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[site_DocumentList_Dynmc]
--site_DocumentList_Dynmc 10,'PMBidRequests','PMBidRequestAdd'
@ObjectKey int,                                                  
@Controller nvarchar(max),                              
@Action nvarchar(max)
AS
BEGIN
declare @modulekey int
	   select top(1) @modulekey = ModuleKey from Module Where Controller = @Controller and Action = @Action
 Select * From Document where ObjectKey=@ObjectKey and 
 ModuleKey =@modulekey
         
END
GO
/****** Object:  StoredProcedure [dbo].[site_EmailTemplate_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create PROCEDURE [dbo].[site_EmailTemplate_Delete]
	 
	@EmailTemplateKey int,
	@errorCode int output
AS
SET NOCOUNT ON
begin
	delete EmailTemplate  where EmailTemplateKey  = @EmailTemplateKey
	
	
	--delete GroupMember where ResourceKey = @ResourceKey

	select @errorCode  = @@ERROR

	End
GO
/****** Object:  StoredProcedure [dbo].[site_EmailTemplate_Edit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_EmailTemplate_Edit]
	@EmailTemplateKey int,
	@EmailTitle varchar(200), 
	@EmailSubject varchar(max), 
	@Body varchar(max),
	@lookUpType int,
	@EmailTmpvalue int output

AS
SET NOCOUNT ON
BEGIN
	Update EmailTemplate set EmailTitle = @EmailTitle,lookUpType=@lookUpType, EmailSubject = @EmailSubject, Body = @Body, DateAdded = GETDATE ()
	where EmailTemplateKey = @EmailTemplateKey
	select @EmailTmpvalue = @@IDENTITY
END
GO
/****** Object:  StoredProcedure [dbo].[site_EmailTemplate_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_Property_Insert 15,'shyam',25,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'desc',1,' Tasksheet  23-04-2020.docx,Tasksheet  24-04-2020.docx,Tasksheet  30-04-2020.docx','21811,21821,22471',1,20
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_EmailTemplate_Insert]
	 
	
	@EmailTitle varchar(200), 
	@EmailSubject varchar(max), 
	@Body varchar(max),
	@LookupType int,
	@EmailTmpvalue int output
	
AS
begin  
    Insert into EmailTemplate(EmailTitle,lookUpType, EmailSubject, Body,DateAdded)values(@EmailTitle,@LookupType, @EmailSubject, @Body, GETDATE ())
	declare @EmailTemplateKey int = @@identity  
	select @EmailTmpvalue = @@IDENTITY
end


--[USP_EmailTemplet_Insert] 'test','test1','test2'
GO
/****** Object:  StoredProcedure [dbo].[site_EmailTemplate_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
    
      
--site_EmailTemplate_SelectAll 'Refund Processed'     
CREATE PROCEDURE [dbo].[site_EmailTemplate_SelectAll]      
--@errorCode INT OUTPUT      
@LookUpTitle varchar(100)      
AS      
begin      
SET NOCOUNT ON

if(@LookUpTitle = 'Refund Processed')
begin
SELECT Em.EmailTemplateKey ,EmailTitle,EmailTitle as Title, Em.EmailSubject,Em.Body        
FROM EmailTemplate em   
inner join Lookup as lu on em.lookuptype = lu.lookupkey 

where   EmailTitle = @LookUpTitle  
end
else
begin
SELECT Em.EmailTemplateKey ,EmailTitle,EmailTitle as Title, Em.EmailSubject,Em.Body        
FROM EmailTemplate em   
inner join  Lookup as lu on em.lookuptype = lu.lookupkey 

where   lu.Title = @LookUpTitle  
  end
end  


GO
/****** Object:  StoredProcedure [dbo].[site_EmailTemplate_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




-- [site_EmailTemplate_SelectIndexPaging] 50,1,'','','','order by EmailTitle desc'
CREATE PROCEDURE [dbo].[site_EmailTemplate_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max), 
@emailtitle nvarchar(max),
@emailtype nvarchar(max),              
@Sort nvarchar(max)
--@EmailTite nvarchar(max)
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
  --if LEN(ISNULL(@EmailTite, '')) = 0
 -- if (@EmailTite = N'')
 -- begin
	--set @qrywhere = 'where (Em.EmailTitle like ''%'+ @EmailTite +'%'')'
 -- end
 -- else
  begin
	set @qrywhere = 'where ((Em.EmailTitle like  ''%'+ @Search +'%'') or (Em.EmailSubject like ''%'+ @Search +'%'')
	or ( '''+@Search+''' = '''' )) and ((Em.EmailTitle like  ''%'+ @emailtitle +'%'') or ( '''+@emailtitle+''' = '''' ))
	 and ((LK.Title like  ''%'+ @emailtype +'%'') or ( '''+@emailtype+''' = '''' ))'
	end
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [EmailTemplate] as Em inner join [LookUp] as LK on LK.LookUpKey =Em.lookUpType
   '+@qrywhere + ''

  set @qry = 'select * from (SELECT Em.EmailTemplateKey ,EmailTitle, lk.Title ,Em.EmailSubject,Em.Body ,lk.title as emailtype ,
   row_number() over('+@Sort+') as  rownum,@total  as TotalRecord  FROM EmailTemplate as Em 
   inner join [LookUp] as LK on LK.LookUpKey = Em.lookUpType  '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)   
END
GO
/****** Object:  StoredProcedure [dbo].[site_EmailTemplate_SelectOneByEmailTemplateKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_EmailTemplate_SelectOneByEmailTemplateKey]
	@EmailTemplateKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
select E.EmailTemplateKey,E.EmailTitle,L.Title  ,E.EmailSubject ,E.Body,E.lookUpType  from EmailTemplate as E right join LookUp as L on l.LookUpKey =e.lookUpType    where EmailTemplateKey= @EmailTemplateKey  


			
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_EmailTemplate_update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_EmailTemplate_update]
	
    @EmailTitle varchar(150), 
	@EmailSubject int, 
	@Body varchar(100),
	@DateAdded datetime,
	@EmailTemplateKey INT,
	@lookUpType int
AS
SET NOCOUNT ON
begin
Update EmailTemplate set  EmailTitle = @EmailTitle, lookUpType=@lookUpType,EmailSubject = @EmailSubject, Body = @Body, DateAdded = @DateAdded
	where EmailTemplateKey = @EmailTemplateKey

	End
GO
/****** Object:  StoredProcedure [dbo].[site_Errorlog_insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- ********************************  
-- * Stored Procedure Code  
-- ********************************  
CREATE PROCEDURE [dbo].[site_Errorlog_insert]  
@remarks varchar(max),
@errorCode int Output
AS  
begin
insert  into  ErrorLog (Details,Session,DateAdded)
values (@remarks,null,Getdate())
   
SELECT @errorCode = @@ERROR  
 end
GO
/****** Object:  StoredProcedure [dbo].[site_GetallAdministrator_RefundMail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE  procedure  [dbo].[site_GetallAdministrator_RefundMail]       
as      
begin      
  select  top(1) r.firstname+' '+r.lastname as ConatctPerson , r.Email   from  Resource  r     
  inner join  Company cp on  cp.CompanyKey = r.CompanyKey    
  where  cp.PortalKey = 1    
end
GO
/****** Object:  StoredProcedure [dbo].[site_getallbiddSubmission_Reminders]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
CREATE   procedure  [dbo].[site_getallbiddSubmission_Reminders]  
  
as  
begin   
declare @checkdate datetime       
select @checkdate =  (select  DATEADD(day,+1,GETDATE()))  
declare @withoutTime datetime  
select @withoutTime = dateadd(d, datediff(d, 0, @checkdate), 0)   
select  br.Title, r.firstName+r.lastname As ContactPerson,r.Email,br.BidDueDate ,'' as CompanyName from  bidVendor  bv  
inner  join  Bidrequest br on  br.bidrequestKey = bv.bidrequestKey   
inner   join Company c on  c.CompanyKey = bv.VendorKey  
inner  join  Resource r  on  r.CompanyKey = c.CompanyKey  
where  br.BidDueDate = @withoutTime and br.BidRequestStatus = 601 and bv.BidVendorStatus = 702   
end
GO
/****** Object:  StoredProcedure [dbo].[site_getallbidduevendors]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  --site_getallbidduevendors
CREATE  procedure  [dbo].[site_getallbidduevendors]  
  
as  
begin   
declare @checkdate datetime       
select @checkdate =  (select  DATEADD(day,+1,GETDATE()))  
declare @withoutTime datetime  
select @withoutTime = dateadd(d, datediff(d, 0, @checkdate), 0)  
  
select  br.Title, r.firstName+r.lastname As ContactPerson,r.Email,br.BidDueDate,c.LegalName as CompanyName  from  bidVendor  bv  
inner  join  Bidrequest br on  br.bidrequestKey = bv.bidrequestKey   
inner   join Company c on  c.CompanyKey = bv.VendorKey  
inner  join  Resource r  on  r.CompanyKey = c.CompanyKey  
where  br.BidDueDate = @withoutTime and br.BidRequestStatus = 601 and bv.BidVendorStatus = 700   

end
GO
/****** Object:  StoredProcedure [dbo].[Site_GetAllBidresponseDuespassed]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[Site_GetAllBidresponseDuespassed]
AS
BEGIN
	Select distinct(br.BidRequestKey) from BidVendor b
	join BidRequest br on br.BidRequestKey = b.BidRequestKey
	where br.BidRequestStatus = 601 and b.BidVendorStatus = 700 and
	Convert(date,b.RespondByDate) < Convert(date,GETDATE())
END
GO
/****** Object:  StoredProcedure [dbo].[site_GetallInsaurnceExpired]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE  procedure  [dbo].[site_GetallInsaurnceExpired] 
as
begin

select  PolicyNumber, RenewalDate , r.Email, R.FirstName+ ' ' +r.LastName as ConatactPerson from  Insurance i 
inner  join  Resource  r on  r.CompanyKey = i.VendorKey
where RenewalDate < getdate()
end
GO
/****** Object:  StoredProcedure [dbo].[site_GetallInsaurnceRenamwal]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  procedure  [dbo].[site_GetallInsaurnceRenamwal] 
as
begin

declare @checkdate datetime       
select @checkdate =  (select  DATEADD(day,+15,GETDATE()))  
declare @withoutTime datetime  
select @withoutTime = dateadd(d, datediff(d, 0, @checkdate), 0) 

select  PolicyNumber, RenewalDate , r.Email, R.FirstName+r.LastName as ConatactPerson from  Insurance i 
inner  join  Resource  r on  r.CompanyKey = i.VendorKey
where RenewalDate = @withoutTime
end
GO
/****** Object:  StoredProcedure [dbo].[site_GetallVendor_RefundMail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
create procedure  [dbo].[site_GetallVendor_RefundMail]     
@ResourceKey int 
as    
begin    
  select  r.firstname+' '+r.lastname as ConatctPerson , r.Email   from  Resource  r   
  inner join  Company cp on  cp.CompanyKey = r.CompanyKey  
   where resourceKey = @ResourceKey
end
GO
/****** Object:  StoredProcedure [dbo].[Site_GetAllVendorBidNotSubmmited]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
CREATE  procedure [dbo].[Site_GetAllVendorBidNotSubmmited]      
as      
begin      

update bidvendor 
set bidvendor.bidvendorstatus = 703
where bidvendor.bidvendorstatus = 700
and respondbydate < getdate()
and (select bidrequeststatus from bidrequest where bidrequest.bidrequestkey = bidvendor.bidrequestkey) = 601


select  pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber, BR.Title, bv.vendorkey, br.bidrequestKey,
CONVERT(varchar,bv.BidvendorKey) as bvid, (Select LookUpkey from  LookUp where title = 'No Bid Fee') as PayMentType,
pm.MaskedCCNumber as ccNumber,(select top 1  CONVERT(int,Fee) from  Pricing where  PricingTypeKey = 1202 ) as Amt, 
R.Email,R.Zip as PostalCode, R.Address as Line1, r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,R.State As State  ,R.Description as Description 
from  BidVendor Bv      
inner  join PaymentMethod Pm on  Pm.companyKey = Bv.vendorKey       
inner  join   Company  c on   c.CompanyKey =  bv.VendorKey      
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey     
inner  join  LookUp  l on l.LookUpKey = bv.BidVendorStatus      
inner join  Resource  R  on R.CompanyKey =  c.CompanyKey      
 where  bv.BidVendorStatus= 702   and  bv.respondbydate < getdate() and  
 bv.bidVendorKey not in (select  ReferenceNumber from  Payment where  ReferenceNumber = bv.bidVendorKey )  
 
end
GO
/****** Object:  StoredProcedure [dbo].[Site_GetCardExpireDetails]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  Site_GetCardExpireDetails 2
CREATE  Procedure [dbo].[Site_GetCardExpireDetails]
@lookUpTitle int
As
begin

declare @checkdate datetime       
select @checkdate =  (select  DATEADD(Month,+1,GETDATE()))  
declare @withoutTime datetime  
select @withoutTime = dateadd(d, datediff(d, 0, @checkdate), 0)  
declare  @CExpiryMonth nvarchar(max)
select @CExpiryMonth = datepart(mm,@withoutTime)
if(LEN(@CExpiryMonth) = 1)
begin
set @CExpiryMonth = '0' + @CExpiryMonth
end
declare  @CExpiryYear nvarchar(max)
select @CExpiryYear = datepart(yyyy,@withoutTime)

	if(@lookUpTitle != 1)
	begin
		select r.Email, r.FirstName+ ' '+r.Lastname as Membername, CardHolderFirstName+CardHolderLastName AS ContactPerson , 'XXXX-XXXX-XXXX-'+MaskedCCNumber as CardNumber, 
			CardExpiryMonth+'/'+'01'+'/'+CardExpiryYear As CardExpiryDate,@CExpiryMonth -1 as CExpiryMonth,   RIGHT(YEAR(@CExpiryYear), 2) as CExpiryYear from  PaymentMethod py
		inner  join Resource  r on  r.ResourceKey = py.AddedByResourceKey
		where  CardExpiryMonth =  @CExpiryMonth -1 and  CardExpiryYear < @CExpiryYear
	end
	else
	begin
		select r.Email, r.FirstName+ ' ' +r.Lastname as Membername, CardHolderFirstName+CardHolderLastName AS ContactPerson , 'XXXX-XXXX-XXXX-'+MaskedCCNumber as CardNumber, 
			CardExpiryMonth+'/'+'01'+'/'+CardExpiryYear As CardExpiryDate,@CExpiryMonth  as CExpiryMonth,   RIGHT(YEAR(@CExpiryYear), 2) as CExpiryYear from  PaymentMethod py
		inner  join Resource  r on  r.ResourceKey = py.AddedByResourceKey
		where  CardExpiryMonth =  @CExpiryMonth  and  CardExpiryYear < @CExpiryYear
	end
 end
GO
/****** Object:  StoredProcedure [dbo].[site_getdate_bid]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  Procedure  [dbo].[site_getdate_bid]
@InsuranceKey int 
as
begin

select * from Document as d where  d.ObjectKey = @InsuranceKey
End
GO
/****** Object:  StoredProcedure [dbo].[site_GetGroupkey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[site_GetGroupkey]
@ResourceKey nvarchar(max)

As
BEGIN

select ResourceKey from Resource where (FirstName +' ' + Lastname)=@ResourceKey or ( Lastname +' ' +  FirstName)=@ResourceKey  


-- Get the Error Code for the statement just executed.
END
GO
/****** Object:  StoredProcedure [dbo].[site_GetLoginAuthentication_Data]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--site_GetLoginAuthentication_Data 'rr@test.com','Oe58gljdfcwjVTIy6GQJc1Gh370CamYQwVbQATi6pgM=',0,0
CREATE PROCEDURE [dbo].[site_GetLoginAuthentication_Data]
@username varchar(500),                           
@password varchar(500),
@countworkorder int output,
@countbid int output,
@DefaultBidDueDays int = 0 OUTPUT,
@DefaultBidRespondDays int = 0 OUTPUT
  
AS
BEGIN
  declare @usertype varchar(max)                    
  declare @type varchar(max) 

  select  top (1) @usertype =  lu.Title from [User] as u
  inner join Resource as r on r.ResourceKey = u.ResourceKey
  inner join LookUp as lu on lu.LookUpKey = r.ResourceTypeKey
  inner join LookUpType as lut on lut.LookUpTypeKey = lu.LookUpTypeKey   
  where u.Username = @username and u.Password =  @password    
  
 

  if @usertype = 'Management Company' or @usertype = 'staff'
  begin 
     
	   select @countbid = count(*) from Message as m 
	   inner join Module as module on module.ModuleKey = m.ModuleKey
       inner join Resource as r on r.ResourceKey = m.ResourceKey
       inner join [User] as u on u.ResourceKey = r.ResourceKey
       inner join LookUp as lu on lu.LookUpKey = r.ResourceTypeKey
       inner join LookUpType as lut on lut.LookUpTypeKey = lu.LookUpTypeKey
	   where u.Username = @username and u.Password =  @password  and  lu.Title = 'New' and  module.Title = 'Bids'
	   select @countbid  as v

	  

	    select @countworkorder = count(*) from Message as m 
		inner join Module as module on module.ModuleKey = m.ModuleKey
       inner join Resource as r on r.ResourceKey = m.ResourceKey
       inner join [User] as u on u.ResourceKey = r.ResourceKey
       inner join LookUp as lu on lu.LookUpKey = r.ResourceTypeKey
       inner join LookUpType as lut on lut.LookUpTypeKey = lu.LookUpTypeKey
	   where u.Username = @username and u.Password =  @password and  lu.Title = 'New'   and module.Title = 'Work Orders'
	       select @countworkorder  as countworkorder 

			select @DefaultBidRespondDays = BidRequestResponseDays, @DefaultBidDueDays = BidSubmitDays from Company c
			join Resource r on r.CompanyKey = c.CompanyKey
			join [User] u on u.ResourceKey = r.ResourceKey
			where u.UserName = @UserName and u.Password = @password
	   
  end
  if @usertype = 'Vendor'
  begin
 
	   select @countbid = count(*) from Message as m 
	   inner join Module as module on module.ModuleKey = m.ModuleKey
       inner join Resource as r on r.ResourceKey = m.ResourceKey
       inner join [User] as u on u.ResourceKey = r.ResourceKey
       inner join LookUp as lu on lu.LookUpKey = r.ResourceTypeKey
       inner join LookUpType as lut on lut.LookUpTypeKey = lu.LookUpTypeKey
	    where u.Username = @username and u.Password =  @password  and   lu.Title = 'New' and  module.Title = 'Bids'
			   select @countbid as countbid 
	 
	    select @countworkorder = count(*) from Message as m 
		inner join Module as module on module.ModuleKey = m.ModuleKey
       inner join Resource as r on r.ResourceKey = m.ResourceKey
       inner join [User] as u on u.ResourceKey = r.ResourceKey
       inner join LookUp as lu on lu.LookUpKey = r.ResourceTypeKey
       inner join LookUpType as lut on lut.LookUpTypeKey = lu.LookUpTypeKey
	  where u.Username = @username and u.Password =  @password   and   lu.Title = 'New' and module.Title = 'Work Orders'
	  select @countworkorder   as countworkorder

	   end
	  select @DefaultBidRespondDays = BidRequestResponseDays, @DefaultBidDueDays = BidSubmitDays from Company c
			join Resource r on r.CompanyKey = c.CompanyKey
			join [User] u on u.ResourceKey = r.ResourceKey
			where u.UserName = @UserName and u.Password = @password
  end
GO
/****** Object:  StoredProcedure [dbo].[site_getvendorBidFeepaymentDetails]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
       
 --site_getvendorBidFeepaymentDetails  1086, '285', 1    
CREATE Procedure  [dbo].[site_getvendorBidFeepaymentDetails]            
@BidrequestKey int,      
@BidVendorkey nvarchar(max),      
@errorcode int output            
as            
begin     
declare  @Fixedamount int    
declare  @BidAmount  int    
declare  @PricingKey int    
declare  @feetype nvarchar(max)    
declare  @fee  int     
declare  @amount  int     
select   @BidAmount    =  (select  Total  from  bid  where  BidvendorKey = @BidVendorkey)    
select  @PricingKey    =  (select  top(1)PricingKey   from  Pricing    where  PricingTypeKey = 1202 and  COALESCE(StartAmount,0) <= @BidAmount and EndAmount >= @BidAmount  order by  StartAmount desc )     
select  @feetype     =   (select   FeeType   FROM  pricing  where  PricingKey = @PricingKey)    
    
if(@feetype ='Percentage')    
begin    
    
 select  @fee   = (select  Fee  from    Pricing  where  PricingKey =  @PricingKey)    
 select  @amount    = (@fee*@BidAmount/100)    
    
select  pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber, CONVERT(varchar, bv.BidVendorKey) as bvid, bv.vendorKey,br.title as Title,  
(Select LookUpkey from  LookUp where title = 'Bid Fee') as PayMentType, pm.MaskedCCNumber as ccNumber,  (select cast(replace(@amount, '.','') as integer))  as Amt, R.Email,  
R.Zip as PostalCode, R.Address as Line1, r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,R.State As State,  
R.Description as Description from  BidRequest  
 br             
inner  join BidVendor  bv on  bv.BidRequestKey = br.BidRequestKey            
left  join PaymentMethod Pm on  Pm.companyKey = bv.vendorKey             
inner  join   Company  c on   c.CompanyKey =  bv.vendorKey            
inner  join  Resource r on  r.CompanyKey = bv.VendorKey            
where  br.bidrequestKey = @BidrequestKey   and  bv.BidVendorKey = @BidVendorkey  
end    
else    
begin    
Select  @Fixedamount  =  (select  Fee  from    Pricing  where  PricingKey =  @PricingKey)    
select  pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber,  
CONVERT(varchar, bv.BidVendorKey) as bvid, bv.vendorKey,br.title as Title,     
(Select LookUpkey from  LookUp where title = 'Bid Fee') as PayMentType,pm.MaskedCCNumber as ccNumber,  
(select cast(replace(@Fixedamount, '.','') as integer))  as Amt, R.Email,R.Zip as PostalCode, R.Address as Line1,  
r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,  
R.State As State,R.Description as Description from  BidRequest br  
             
inner  join BidVendor  bv on  bv.BidRequestKey = br.BidRequestKey            
left  join PaymentMethod Pm on  Pm.companyKey = bv.vendorKey             
inner  join   Company  c on   c.CompanyKey =  bv.vendorKey            
inner  join  Resource r on  r.CompanyKey = bv.VendorKey            
where  br.bidrequestKey = @BidrequestKey   and  bv.BidVendorKey = @BidVendorkey      
end            
    
select @errorcode = @@error             
end
GO
/****** Object:  StoredProcedure [dbo].[Site_GetVendordetailBidAccpetedforPayment]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  
CREATE  procedure [dbo].[Site_GetVendordetailBidAccpetedforPayment]    
as    
begin    
select    pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber, BR.Title, bv.vendorkey,  CONVERT(varchar,bv.BidvendorKey) as bvid, (Select LookUpkey from  LookUp where title = 'Bid Fee') as PayMentType,pm.MaskedCCNumber as ccNumber,(select  CONVERT(int,Fee) from  Pricing where  PricingTypeKey = 1202 ) as Amt,
R.Email,R.Zip as PostalCode, R.Address as Line1, r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,R.State As State,
R.Description as Description from  BidVendor Bv    
inner  join PaymentMethod Pm on  Pm.companyKey = Bv.vendorKey     
inner  join   Company  c on   c.CompanyKey =  bv.VendorKey    
inner  join  BidRequest br on  br.BidRequestKey = bv.BidRequestKey   
inner  join  LookUp  l on l.LookUpKey = bv.BidVendorStatus    
inner join  Resource  R  on R.CompanyKey =  c.CompanyKey    
 where  bv.BidVendorStatus= 802   and  bv.bidVendorKey not in (select  ReferenceNumber from  Payment where  ReferenceNumber = bv.bidVendorKey )
 end
GO
/****** Object:  StoredProcedure [dbo].[Site_GetVendordetailMembershipFeePayment]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
CREATE  procedure [dbo].[Site_GetVendordetailMembershipFeePayment]      
as      
begin      
declare @checkdate datetime           
select @checkdate =  getdate()      
declare @Enddate datetime      
select @Enddate = dateadd(d, datediff(d, 0, @checkdate), 0)   
select    pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber, Ms.vendorKey as vkey, (Select LookUpkey from  LookUp where title = 'Membership Fee') as PayMentType,pm.MaskedCCNumber as ccNumber,(select  CONVERT(int,Fee
) from  Pricing where  PricingTypeKey = 1200 ) as Amt, R.Email,R.Zip as PostalCode, R.Address as Line1, r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,R.State As State  
,R.Description as Description from  Resource r      
inner  join PaymentMethod Pm on  Pm.companyKey = r.CompanyKey       
inner  join   Company  c on   c.CompanyKey =  r.CompanyKey   
inner  join  Membership  Ms on  Ms.Vendorkey = r.CompanyKey   
where Ms.EndDate =  @Enddate  
 end
GO
/****** Object:  StoredProcedure [dbo].[site_Group_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Group_SelectAll]

AS
SET NOCOUNT ON

select * from [Group]  where  GroupKey = 1  or  GroupKey = 3
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Group_SelectforStaffView]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Group_SelectforStaffView]
@ResourceKey int  
AS
SET NOCOUNT ON
select  GroupKey from GroupMember where  ResourceKey = @ResourceKey
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_INsertAutomaticallyVendorForBid]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[site_INsertAutomaticallyVendorForBid]
@BidRequestKey int,
@errorCode int output
As
Begin
declare @count int
declare @tblduevendor table(bidvendorid int) 
declare @tblvendor table(bidvendorid int)
declare @tblcompany table(companykey int)
declare @DefaultDueDate datetime
declare @BidDueDate datetime
declare @defaultdays int
insert into @tblduevendor(bidvendorid) 
(select BidVendorKey from BidVendor bv where Convert(date,bv.RespondByDate) < CONVERT(date,GetDate()) 
and bv.BidVendorStatus = 700 and BidRequestKey = @BidRequestKey)

insert into @tblcompany(companykey) (select VendorKey from BidVendor where BidRequestKey = @BidRequestKey)

select @count = Count(*) from @tblduevendor

insert into @tblvendor(bidvendorid)(select BidVendorKey from BidVendor 
where BidVendorKey not in(select bidVendorid from @tblduevendor where BidRequestKey = @BidRequestKey))

update BidVendor set BidVendorStatus = 703 where BidVendorKey in (select bidvendorid from @tblduevendor)

DECLARE @GEO1 GEOGRAPHY, @LAT VARCHAR(10), @LONG VARCHAR(10)                
                
select @LAT =isnull(Latitude,''), @LONG =isnull(Longitude,'') from Property where PropertyKey = (select br.propertykey from bidrequest br where br.BidRequestKey = @BidRequestkey)                
                


				
SET @geo1= geography::Point(@LAT, @LONG, 4326)

select @defaultdays = isnull(BidRequestResponseDays,0) from Company 
where CompanyKey = (select top 1 CompanyKey from Property
where PropertyKey = (select top 1 PropertyKey from BidRequest where BidRequestKey = @BidRequestKey))
select @BidDueDate = BidDueDate from BidRequest where BidRequestKey = @BidRequestKey
if(@defaultdays = 0)
begin
	set @DefaultDueDate = @BidDueDate
end
else
begin
	set @DefaultDueDate = DATEADD(day,@defaultdays,GetDate())
	if(@DefaultDueDate > @BidDueDate)
	begin
		set @DefaultDueDate = @BidDueDate
	end
end
--(Select top 1 DefaultRespondByDate from BidRequest where BidRequestKey = @BidRequestkey) replaced with @DefaultDueDate
	insert into BidVendor            
 select  top (@count) @BidRequestkey, cp.CompanyKey, null, '', 0,@DefaultDueDate, getdate(), getdate(),           -- DATEADD(Day,2,getdate())  
 (select LookUpKey from LookUp where lookup.LookUpTypeKey = (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Bid Vendor Status') and LookUp.Title in ('In Progress'))            
  from Company as cp               
 inner join VendorService as vs on cp.CompanyKey = vs.VendorKey and  vs.ServiceKey = (select br.ServiceKey from BidRequest as br where br.BidRequestKey = @BidRequestkey)            
 inner join ServiceArea as sa on sa.vendorkey = vs.vendorkey          
 where cp.CompanyTypeKey in (select LookUpKey from LookUp where lookup.LookUpTypeKey in (select LookUpType.lookuptypekey from LookUpType where LookUpType.Title = 'Company Type') and             
 LookUp.Title in ('Company Vendor','Vendor')) and cp.Status = 101 and cp.CompanyKey not in(select companykey from @tblcompany)

 and (Convert(float, LEFT(CONVERT(VARCHAR,(@geo1.STDistance(geography::Point(ISNULL(sa.Latitude,0), ISNULL(sa.Longitude,0), 4326)))/1000),5))/1.609344) < (sa.radius * 5) + 5         
       order by NEWID()     

update ABNotification set Status = 901 where ObjectKey = @BidRequestKey 
	and ForResource in(select ResourceKey from Resource where CompanyKey in (select VendorKey from BidVendor
	where BidVendorKey in(select bidvendorid from @tblduevendor) and BidRequestKey = @BidRequestKey))

declare @tblnewvendor table(companykey int)
declare @byresourcekey int
declare @forresource int
declare @vendorKey int
declare @moduleKey int
select @moduleKey = ModuleKey from BidRequest where BidRequestKey = @BidRequestKey
declare cr cursor for (select VendorKey from BidVendor where VendorKey not in(select companykey from @tblcompany) and BidRequestKey = @BidRequestKey);
open cr
Fetch next from cr into @vendorKey 
while @@FETCH_STATUS = 0
begin
	select top 1 @forresource = ResourceKey from Resource where CompanyKey = @vendorKey
	select top 1 @byresourcekey = ResourceKey from Resource 
	where CompanyKey = (select top 1 CompanyKey from Property
	where PropertyKey = (select top 1 PropertyKey from BidRequest where BidRequestKey = @BidRequestKey))
	print(@forresource)
	print(@byresourcekey)

	insert into ABNotification(NotificationType,ModuleKey,ObjectKey,ByResource,
	ForResource,NotificationText,DateAdded,LastModificationDate,Status)
	values('BidReqStatus',@moduleKey,@BidRequestKey,@byresourcekey,@forresource,'New Bid Request.',GETDATE(),GETDATE(),900)

	Fetch next from cr into @vendorKey 
end
close cr
deallocate cr

select BidVendorKey from BidVendor where VendorKey not in(select companykey from @tblcompany) and BidRequestKey = @BidRequestKey

End

GO
/****** Object:  StoredProcedure [dbo].[site_Insurance_SelectByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[site_Insurance_SelectByCompanyKey]
@CompanyKey int,
@errorCode int OUTPUT
AS
Begin
	Select InsuranceKey,VendorKey,CompanyName,PolicyNumber,
	InsuranceAmount,AgentName,StartDate,EndDate,RenewalDate,Status
	from Insurance
	Where VendorKey = @CompanyKey

	select @errorCode = @@ERROR
End
GO
/****** Object:  StoredProcedure [dbo].[site_insurance_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- site_insurance_SelectIndexPaging 50,1,'','order by u.PolicyNumber desc'
CREATE PROCEDURE [dbo].[site_insurance_SelectIndexPaging]
@CompanyKey INT,
@errorCode INT OUTPUT                          

AS
SET NOCOUNT ON
 select u.PolicyNumber, u.InsuranceKey , u.InsuranceAmount,  u.StartDate,u.EndDate,DATEADD(DAY, 1, u.EndDate) AS RenewalDate
       from [Insurance] u	    
	   inner  Join  Company   Ps  on  Ps.CompanyKey =  u.VendorKey
	   where  Ps.CompanyKey= @Companykey

SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_Insurance_UpdateOne]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Insurance_UpdateOne]
	@InsuranceKey INT,
	@vendorKey INT,
	@policyNumber VARCHAR(150),
	@insuranceAmount MONEY,
	@startDate DATETIME,
	@endDate DATETIME,
	@renewalDate DATETIME,
	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON


Update [Insurance] set 
[PolicyNumber] = @policyNumber,
[InsuranceAmount] = @insuranceAmount,
[StartDate] = @startDate,
[EndDate] = @endDate,
[RenewalDate] = @renewalDate 
where InsuranceKey = @InsuranceKey

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
GO
/****** Object:  StoredProcedure [dbo].[site_invitevendor_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_vendor_Delete 2226,5
create PROCEDURE [dbo].[site_invitevendor_Delete]
	@companyKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON




delete from VendorService where VendorKey = @companyKey
delete from Insurance where VendorKey = @companyKey

delete from [user] where ResourceKey in (select CompanyKey from Resource where CompanyKey =  @companyKey)

delete from Resource where CompanyKey = @companyKey
delete from [Company] where CompanyKey = @companyKey
select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_inviteVendor_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_inviteVendor_Insert]

	@CompanyName    varchar(500),
	@Address		varchar(500),
	@Address2		varchar(500),
	@City			varchar(500),
	@StateKey		varchar(2),
	@zip			varchar(150),
	@Work			varchar(150),
	@Work2			varchar(150),
	@Email          varchar(500),
	@Description    varchar(500),

	@Fax			varchar(500),
	@Website		varchar(500),									

	@Title      	varchar(500),


	@companyvalue INT OUTPUT

AS
SET NOCOUNT ON

declare @vendorkey int
declare @companytype int
declare @status int
declare @insurancekey int

declare @Resourcevalue int
select @companytype = LookUpKey from LookUp where Title = 'Company Vendor' 
select @status = LookUpKey from LookUp where Title = 'Pending'

  insert into Company(Name,[State],[Address],Address2,City,Zip,Fax,Website,[Status],[Description],CompanyTypeKey,CompanyID)
		                      values(@CompanyName,@StateKey,@Address,@Address2,@City,@zip,@Fax,@Website,100,@Description,@companytype,NEWID())

           set @vendorkey = @@identity
		   select  @companyvalue = @@IDENTITY
		   declare @ResourceTypeKey int
		   select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'
		   
		  Insert into Resource (CompanyKey,FirstName, ResourceTypeKey,CellPhone, Email,Fax, Address, Address2, City, State, Zip,DateAdded,LastModificationTime, Status) 
	      values 
	      (@vendorkey,@Work,@ResourceTypeKey, @Work2, @Email, @Fax, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),1)


		  insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values(@vendorkey,@vendorkey,getdate(),101)


		  insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,1)
GO
/****** Object:  StoredProcedure [dbo].[site_inviteVendor_Insurance]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_Vendor_Insurance 50,1,'','order by u.PolicyNumber desc'
CREATE PROCEDURE [dbo].[site_inviteVendor_Insurance]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (u.PolicyNumber like  ''%'+ @Search +'%'') or (u.InsuranceAmount like ''%'+ @Search +'%'') 
  or (u.StartDate like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' )' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Insurance] as u
   '+@qrywhere + ''

  set @qry = 'select * from (  select  u. as InsuranceKey, u.PolicyNumber,u.InsuranceAmount,StartDate @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum  from [Insurance] as u '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_inviteVendor_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- site_Vendor_SelectIndexPaging 50,1,'','order by SeriveTitle desc'


create PROCEDURE [dbo].[site_inviteVendor_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)
    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (lu.Title = ''Company Vendor'') and  ((look.Title like  ''%'+ @Search +'%'') or (u.Name like  ''%'+ @Search +'%'') or (r.FirstName + '' '' + r.LastName like ''%'+ @Search +'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] 
  inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' ))' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u
   
	inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
	inner join CompanyVendor as vc on vc.CompanyKey = u.CompanyKey 	 
	inner join LookUp as look on look.LookUpKey = vc.Status
		  inner join  Resource as r on R.CompanyKey = U.CompanyKey
   '+@qrywhere + ''

set @qry = '   select * from (select *,row_number() over('+@Sort+') as  rownum from ( 
 select u.Name, u.CompanyKey,look.Title as Favorite 
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey
    FOR XML PATH('''')),1,1,'''')) as SeriveTitle , r.FirstName + '' '' + r.LastName as Work,
    @total  as TotalRecord from [Company] u 
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey 	    
	  inner join CompanyVendor as vc on vc.CompanyKey = u.CompanyKey 	 
	  inner join LookUp as look on look.LookUpKey = vc.Status
	  inner join  Resource as r on R.CompanyKey = U.CompanyKey
   '+@qrywhere+'
   
  ) j ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_invitevendor_SelectOneByvendorKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[site_invitevendor_SelectOneByvendorKey]
	@CompanyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

 select ps.CompanyKey, LegalName,rs.FirstName + ' ' + rs.LastName as Name,ps.Name as CompanyName ,ps.Work,ps.Work2,ps.Fax,Website,ps.Address,ps.Address2,ps.City,ps.State,ps.Zip,rs.CellPhone, rs.Email,ps.name from [Company] ps
left join  Resource rs on rs.CompanyKey = ps.CompanyKey
left join Service s on s.ServiceKey = ps.CompanyKey
where  Ps.CompanyKey= @CompanyKey
---vendoe  service  table  Inner  join  pending.
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_inviteVendor_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
create PROCEDURE [dbo].[site_inviteVendor_Update]
    @companyKey     INT,


	@companyName    varchar(150),
	@Work			varchar(50),
	@email          varchar(150),
	@Address		varchar(100),
	@Address2		varchar(100),
	@City			varchar(50),
	@StateKey		varchar(2),
	@zip			varchar(11),
	
	
	@status INT							
	
AS
SET NOCOUNT ON

UPDATE [Company]   
SET

	[Name] = @companyName,
	[Address] = @Address,
	[Address2] = @Address2,
	[City] = @City,
	[State] = @StateKey,
	[Work] = @work,
	[Zip] = @zip

	
	
	
WHERE [Company].[CompanyKey] = @companyKey

 update [Resource] set Email = @email where ResourceKey = @companyKey
GO
/****** Object:  StoredProcedure [dbo].[site_Invoice_SelectOneByInvoiceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[site_Invoice_SelectOneByInvoiceKey]            
 @InvoiceKey INT,            
 @errorCode INT OUTPUT            
AS            
SET NOCOUNT ON            
            
        
            
SELECT (SELECT CONVERT(varchar, br.bidduedate,1)) as bidDueDate,i.vendorKey, rf.RefundAmount,
(SELECT CONVERT(varchar, i.ReferenceNumber)) as RferenceNumber, m.invoicekey as memberfeekey,  
rf.RefundRequestKey, rf.MarkAsRefund, i.TransactionDate,  i.invoicekey,br.Title,r.Address,  
r.Address2, r.city,r.state, I.Amount,I.Balance  , r.Email,i.Strip_TokenID, r.Zip, r.ResourceKey,  
(SELECT CONVERT(varchar, i.TransactionDate, 1)) as invoiceDate,c.Name as CompanyName  
FROM InvoiceLine as il           
inner join Invoice i on  i.InvoiceKey = il.Invoicekey      
left join RefundRequest rf on rf.InvoiceKey = il.InvoiceKey      
left  Join  BidVendor bv on  bv.BidVendorKey = i.ReferenceNumber          
left  join  BidRequest br on  Br.BidRequestKey = bv.BidRequestKey          
left  join  Resource r on  r.CompanyKey = i.VendorKey      
left join Company c on c.CompanyKey = I.VendorKey  
left  join  Membership m  on  m.invoicekey = il.InvoiceKey          
WHERE il.InvoiceKey=@InvoiceKey        
            
         
  
            
               
-- Get the Error Code for the statement just executed.            
SELECT @errorCode = @@ERROR            
print(@errorCode)            
            
--[site_Property_SelectOneByPropertyKey] 1023, null            
GO
/****** Object:  StoredProcedure [dbo].[site_InvoieForVendor_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_InvoieForVendor_SelectIndexPaging 50,1,'','order by n.Amount asc','6290'            



CREATE PROCEDURE [dbo].[site_InvoieForVendor_SelectIndexPaging]            
@PageSize int,                                       
@PageIndex int,                                       
@Search nvarchar(max),            
@Sort nvarchar(max),            
@CompanyKey nvarchar(max)            
AS            
BEGIN            
  declare @qrywhere varchar(max)                                
  declare @qrytotal varchar(max)                                 
  declare @qry varchar(max)                
                
  set @qrywhere = '          
          
            
  where (n.VendorKey= '+@CompanyKey+') '           
              
  set @qrytotal =   'declare @total int              
  select  @total  = count(*)             
  from [Invoice] as n          
   left join RefundRequest rf on rf.InvoiceKey = n.InvoiceKey        
   inner join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey       
   '+@qrywhere + ''            
            
  set @qry = 'select * from (              
  select n.vendorkey,( select convert(varchar, n.LastModificationTime, 101)) as Date ,n.InvoiceKey,n.ReferenceNumber,ln.Description, rf.refundRequestKey, Isnull(rf.MarkAsRefund,0) as MarkAsRefund, n.Amount As amount,n.Balance as balance, @total  as TotalRecords,            
   row_number() over('+@Sort+') as  rownum              
   from [Invoice] as n        
   left join RefundRequest rf on rf.InvoiceKey = n.InvoiceKey        
   inner join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey       
   '+@qrywhere+'            
              
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)             
      print(@qrytotal + @qry)                         
      exec( @qrytotal + @qry)                      
END  
GO
/****** Object:  StoredProcedure [dbo].[site_LookUp_GetBidRequestStatusFilter]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--site_LookUp_GetBidRequestStatusFilter
CREATE procedure [dbo].[site_LookUp_GetBidRequestStatusFilter]
as
begin

--select l.Title,l.LookUpKey 
--from [LookUp] l 
--inner join  LookUpType lt on l.LookUpTypeKey = lt.LookUpTypeKey
--where lt.Title like '%Bid Request Status%'

select * from (select 'Closed' as Title,CONCAT((select LookUpKey from [LookUp] where LookUpTypeKey in (Select LookUpTypeKey from LookUpType where title = 'Bid Request Status') and Title = 'Completed'), ', ', (select LookUpKey from [LookUp] where LookUpTypeKey in (Select LookUpTypeKey from LookUpType where title = 'Bid Request Status') and Title = 'Closed')) as  LookUpKey
from [LookUp] l 
inner join  LookUpType lt on l.LookUpTypeKey = lt.LookUpTypeKey
where lt.Title like '%Bid Request Status%'

union
 
select 'Open' as Title,CONCAT((select LookUpKey from [LookUp] where LookUpTypeKey in (Select LookUpTypeKey from LookUpType where title = 'Bid Request Status') and Title = 'In Progress'), ', ', (select LookUpKey from [LookUp] where LookUpTypeKey in (Select
 LookUpTypeKey from LookUpType where title = 'Bid Request Status') and Title = 'Submitted')) as  LookUpKey
from [LookUp] l 
inner join  LookUpType lt on l.LookUpTypeKey = lt.LookUpTypeKey
where lt.Title like '%Bid Request Status%' )i order by title desc

end
GO
/****** Object:  StoredProcedure [dbo].[site_lookup_NotificationSelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_lookup_NotificationSelectAll]
As
Begin

	select LookUpKey,LookUpTypeKey,SortOrder,Title,Value from LookUp 
	where LookUpTypeKey = (select LookUpTypeKey from LookUpType where Title = 'Notification Type')

End
GO
/****** Object:  StoredProcedure [dbo].[site_lookup_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_lookup_SelectAll]

AS
SET NOCOUNT ON

select LookUpKey  , lu.Title from LookUp as lu
inner join LookUpType as lkt on lkt.LookUpTypeKey = lu.LookUpTypeKey where lkt.Title ='EmailType'
GO
/****** Object:  StoredProcedure [dbo].[site_LookUp_SelectSomeByLookUpTypeTitle]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_LookUp_SelectSomeByLookUpTypeTitle]
	@lookUpTypeTitle nvarchar(500)
	
AS


SELECT
	 [LookUpKey],
	 [Title]
from [LookUp]
where [LookUp].[LookUpTypeKey] = (select [LookUpTypeKey] from [LookUpType] where [Title] = @lookUpTypeTitle)
GO
/****** Object:  StoredProcedure [dbo].[site_Manager_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[site_Manager_Delete]
	@propertyKey int,
	@ResourceKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON
  delete  from  PropertyResource   where  PropertyKey =  @propertyKey and  ResourceKey = @ResourceKey
  and 1 < (select count(pr.PropertyResourceKey) from PropertyResource pr where pr.PropertyKey = @PropertyKey)
select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Manager_GetPropertyManagerToAddProperty]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




-- site_Manager_GetPropertyManagerToAddProperty 1063,3216,0
CREATE PROCEDURE [dbo].[site_Manager_GetPropertyManagerToAddProperty]
@ResourceKey int,
@CompanyKey int
AS
SET NOCOUNT ON

BEGIN

declare @GroupKey int
select @GroupKey = count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1

select  0 as PropertyKey,u.ResourceKey,(isnull(FirstName,'') +' ' + ISNULL(Lastname,'')) as Name 
	from Resource as r inner join [User] as u on u.ResourceKey=r.ResourceKey 
	inner join  GroupMember as gm on  gm.ResourceKey = r.ResourceKey
		--where r.CompanyKey in (select ra.companykey from [resource] ra where ra.ResourceKey = @ResourceKey)
	where r.CompanyKey = @CompanyKey and gm.GroupKey = 3

END
GO
/****** Object:  StoredProcedure [dbo].[site_Manager_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- site_Manager_SelectAll 1063,3216,0
CREATE PROCEDURE [dbo].[site_Manager_SelectAll]
@ResourceKey int,
@CompanyKey int,
@PropertyKey int
AS
SET NOCOUNT ON
BEGIN
Declare @varGroupKey int

Select @varGroupKey=GroupKey From [Group] where Title='Property Manager'
declare @GroupKey int
select @GroupKey = count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1
if @PropertyKey = 0 
begin
if @GroupKey = 0
begin
	select  0 as PropertyKey,u.ResourceKey,(isnull(FirstName,'') +' ' + ISNULL(Lastname,'')) as Name 
	from Resource as r inner join [User] as u on u.ResourceKey=r.ResourceKey 
						inner join  GroupMember as gm on  gm.ResourceKey = r.ResourceKey
		--where r.CompanyKey in (select ra.companykey from [resource] ra where ra.ResourceKey = @ResourceKey)
	where r.CompanyKey = @CompanyKey and gm.GroupKey = @varGroupKey
end
	if @GroupKey != 0 
	begin
	select  0 as PropertyKey,u.ResourceKey,(isnull(FirstName,'') +' ' + ISNULL(Lastname,'')) as Name 
	from Resource as r 
	inner join [User] as u on u.ResourceKey=r.ResourceKey 
	inner join  GroupMember as gm on  gm.ResourceKey = r.ResourceKey
		--where r.CompanyKey in (select ra.companykey from [resource] ra where ra.ResourceKey = @ResourceKey)
	where r.CompanyKey = @CompanyKey and gm.GroupKey = @varGroupKey
	end
end
else
begin
	if @GroupKey = 0
	begin
		select r.ResourceKey ,Pr.PropertyKey,(isnull(r.FirstName,'') +' ' +isnull(r.Lastname,'')) as Name 
	from Resource as r inner join PropertyResource as pr on pr.ResourceKey=r.ResourceKey inner join Property as pro on pro.PropertyKey=pr.PropertyKey  inner join  GroupMember as gm on  gm.ResourceKey = r.ResourceKey
	where pro.PropertyKey=@PropertyKey and  gm.GroupKey = @varGroupKey  --and pro.CompanyKey = @CompanyKey
	end
	if @GroupKey != 0 
	begin
     select r.ResourceKey ,Pr.PropertyKey,(isnull(r.FirstName,'') +' ' +isnull(r.Lastname,'')) as Name 
	from Resource as r inner join PropertyResource as pr on pr.ResourceKey=r.ResourceKey inner join Property as pro on pro.PropertyKey=pr.PropertyKey  inner join  GroupMember as gm on  gm.ResourceKey = r.ResourceKey
	where pro.PropertyKey=@PropertyKey  and gm.GroupKey = @varGroupKey
	end
end
END
GO
/****** Object:  StoredProcedure [dbo].[site_Manager_SelectAllForCompanyManagementProperty]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_Manager_SelectAllForCompanyManagementProperty]

@ResourceKey int,
@PropertyKey int
AS
SET NOCOUNT ON


BEGIN

begin
	
 	select u.ResourceKey,(FirstName +' ' + Lastname) as Name from Resource as r 
	inner join [User] as u on u.ResourceKey = r.ResourceKey 
	inner join Company as c on c.CompanyKey = r.CompanyKey
	where r.ResourceKey = case When @ResourceKey = 0 then r.ResourceKey else @ResourceKey end 
end


END
GO
/****** Object:  StoredProcedure [dbo].[site_Manager_SelectKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[site_Manager_SelectKey]

@ResourceKey int,
@PropertyKey int
AS
SET NOCOUNT ON


BEGIN

begin
	
	select Pr.PropertyKey,(r.FirstName +' ' +r.Lastname) as Name from Resource as r inner join PropertyResource as pr on pr.ResourceKey=r.ResourceKey inner join Property as pro on pro.PropertyKey=pr.PropertyKey  where pro.PropertyKey=@PropertyKey
end



END
GO
/****** Object:  StoredProcedure [dbo].[site_Manger_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[site_Manger_Update]
	@propertyKey int,
	@ResourceKey nvarchar(max),
	@errorCode int output
	

AS
SET NOCOUNT ON

delete from PropertyResource where propertykey=@propertyKey
and resourcekey not in (select Item from dbo.SplitString(@ResourceKey,',')  )

Declare @qry nvarchar(max)
   declare managercur cursor for 
           select Item from dbo.SplitString(@ResourceKey,',')     

             open managercur
           declare @resourcevalue int

  fetch next from managercur into @resourcevalue
  while @@FETCH_STATUS = 0
  begin  
  
  if((select count(1) from PropertyResource where propertykey=@propertyKey and resourcekey = @resourcevalue ) = 0 )
  begin
	  Insert Into PropertyResource(PropertyKey, ResourceKey, DateAdded, Status)  
	  values(convert(varchar, @propertyKey),convert(varchar, @resourcevalue) , GETDATE(), 1)
  end


fetch next from managercur into @resourcevalue

end
close managercur
deallocate managercur


select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Membership_FeePayment]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Membership_FeePayment]      
 @CompanyKey INT,      
 @errorCode INT OUTPUT      
AS      
SET NOCOUNT ON      
      
--select Gp.GroupKey, *       
      
--From Property as ps       
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey       
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey      
--where ps.PropertyKey = @PropertyKey      
      
select pm.CardHolderFirstName+pm.CardHolderLastName As CardHoldername, Pm.CvvNumber as Cvvnumber, c.companyKey as vkey,   (Select LookUpkey from  LookUp where title = 'Membership Fee') as PayMentType,pm.MaskedCCNumber as ccNumber, (select convert(varchar,
c.CompanyKey)) as Rnumber ,(select top 1  CONVERT(int,Fee) from  Pricing where  PricingTypeKey = 1200 ) as Amt, R.Email,R.Zip as PostalCode, R.Address as Line1, r.Address2 as add2, pm.StripeTokenID as stripeToken,pm.PaymentMethodID,pm.CardExpiryMonth,r.city, pm.CardExpiryYear,R.State As State  ,R.Description as Description from  Resource r        
inner  join PaymentMethod Pm on  Pm.companyKey = r.CompanyKey         
inner  join   Company  c on   c.CompanyKey =  r.CompanyKey           
where  r.CompanyKey = @CompanyKey          
SELECT @errorCode = @@ERROR      
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_MemberShip_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  -- [site_MemberShip_SelectAll] 3217,0
CREATE PROCEDURE [dbo].[site_MemberShip_SelectAll]  
--@errorCode INT OUTPUT  
 @vendorKey INT,  
 @errorCode INT OUTPUT  
AS  
SET NOCOUNT ON  
BEGIN  
SELECT  
  m.MembershipKey,  
 m.VendorKey,   
 --'XXXX XXXX XXXX ' + RIGHt(pm.MaskedCCNumber,4) as MaskedCCNumber,
 'XXXX XXXX XXXX ' + SubString(pm.MaskedCCNumber,13,LEN(pm.MaskedCCNumber)-1) as MaskedCCNumber,
 m.StartDate ,  
 m.EndDate,   
 m.RenewalDate,   
 m.AutomaticRenewal,   
 m.LastModificationTime,  
 Getdate() as CurrentDate  
FROM  
 Membership  m
 join PaymentMethod pm on pm.CompanyKey = @vendorKey
WHERE StartDate= (SELECT MAX(StartDate) FROM Membership where vendorkey = @vendorKey and pm.PrimaryMethod = 1)
  
SELECT @errorCode = @@ERROR     
END
GO
/****** Object:  StoredProcedure [dbo].[site_MemberShip_SelectAll_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
    
  -- [site_MemberShip_SelectAll_Copy] 3217,0    
CREATE PROCEDURE [dbo].[site_MemberShip_SelectAll_Copy]      
--@errorCode INT OUTPUT      
 @vendorKey INT,      
 @errorCode INT OUTPUT      
AS      
SET NOCOUNT ON      
BEGIN      
declare @ResourceKey int    
select @ResourceKey = ResourceKey from Resource where CompanyKey = @vendorKey    
SELECT      
  m.MembershipKey,      
 m.VendorKey,       
 --'XXXX XXXX XXXX ' + RIGHt(pm.MaskedCCNumber,4) as MaskedCCNumber,    
 'XXXX XXXX XXXX ' + SubString(pm.MaskedCCNumber,13,LEN(pm.MaskedCCNumber)-1) as MaskedCCNumber,    
 m.StartDate ,      
 m.EndDate,       
 m.RenewalDate,       
 m.AutomaticRenewal,       
 m.LastModificationTime,      
 Getdate() as CurrentDate,   
 (select top 1(select (CASE WHEN (ab.ModuleKey = 300 and ab.ForResource = @ResourceKey and ab.Status = 900)     
   THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = m.MembershipKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS priority,    
   (select top 1 Id from (select top 1* from ABNotification ab where ObjectKey = m.MembershipKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS NotificationId)AS NotificationId,    
    
 (select top 1 NotificationType from (select top 1* from ABNotification ab where ObjectKey = m.MembershipKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS NotificationType)AS NotificationType    
    
FROM      
 Membership  m    
 left join PaymentMethod pm on pm.CompanyKey = @vendorKey    
WHERE m.StartDate= (SELECT MAX(StartDate) FROM Membership where vendorkey = @vendorKey or pm.PrimaryMethod = 1)    
      
SELECT @errorCode = @@ERROR         
END
GO
/****** Object:  StoredProcedure [dbo].[site_MembershipPayment_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[site_MembershipPayment_Insert]    
@VendorKey int,    
@errorCode int Output     
as     
begin    
    
declare @enddateyear   datetime     
select  @enddateyear = (SELECT DATEADD(year, 1, GETDATE()) AS DateAdd)      
declare @Enddate datetime        
select @Enddate = dateadd(d, datediff(d, 0, @enddateyear), 0)  
declare @invoice int  = (select max(Invoicekey) from  Invoice)
insert  into  Membership (VendorKey,StartDate,EndDate,RenewalDate,AutomaticRenewal,LastModificationTime,RenewalStatus,CancelMembership,invoicekey)    
values(@VendorKey, GETDATE(), @Enddate,@Enddate,1, GETDATE(),0,0,@invoice)     
select @errorCode =@@ERROR    
end
GO
/****** Object:  StoredProcedure [dbo].[site_MembershipPayment_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE  [dbo].[site_MembershipPayment_Update]    
@VendorKey int,      
@errorCode int Output       
as       
begin      
      
declare @enddateyear   datetime       
select  @enddateyear = (SELECT DATEADD(year, 1, GETDATE()) AS DateAdd)        
declare @Enddate datetime          
select @Enddate = dateadd(d, datediff(d, 0, @enddateyear), 0)  
declare @invoice int  = (select max(Invoicekey) from  Invoice)
update  Membership    
set  StartDate = GETDATE() , EndDate = @Enddate, RenewalDate = @Enddate,AutomaticRenewal = 1,LastModificationTime = GETDATE() ,RenewalStatus = 1,CancelMembership = 0 ,invoiceKey = @invoice 
where  VendorKey = @VendorKey    
select @errorCode =@@ERROR      
end
GO
/****** Object:  StoredProcedure [dbo].[site_Message_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[site_Message_Insert]
@ModuleKeyName nvarchar(100),
@ResourceKey int,
@ObjectKey int,
@Body nvarchar(max),
@Status nvarchar(100)
AS
BEGIN
declare @MessageStatus nvarchar(100)
declare @ModuleKey nvarchar(100)
(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title=@Status)
Select @ModuleKey=ModuleKey From Module where Controller=@ModuleKeyName

  insert into Message (ModuleKey,ResourceKey,ObjectKey,Body,LastModificationTime,MessageStatus) 
  values(@ModuleKey,@ResourceKey,@ObjectKey,@Body,getdate(),@MessageStatus)

END
GO
/****** Object:  StoredProcedure [dbo].[site_Message_ListSelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
CREATE PROCEDURE [dbo].[site_Message_ListSelectIndexPaging]  
--site_Message_ListSelectIndexPaging 100,1,'','order by br.Title desc',13,4254,'PMBidRequests'  
--site_Message_ListSelectIndexPaging 100,1,'','order by br.Title desc',2217,4254,'WorkOrder'  
@PageSize int,                             
@PageIndex int,                             
@Search nvarchar(max),                                
@Sort nvarchar(max),  
@ObjectKey int,  
@ResourceKey int,  
@ModuleKeyName nvarchar(100),  
@UpdatemsgStatus nvarchar(100)  
AS  
BEGIN  
declare @MessageStatusNew nvarchar(100)  
declare @ModuleKey nvarchar(100)  
declare @MsgModuleKey nvarchar(100)  
(select top(1) @MessageStatusNew=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')  
--Select @ModuleKey=ModuleKey From Module where Controller=@ModuleKeyName  
  
if(@ModuleKeyName='BidRequest')  
begin  
Select @ModuleKeyName=ModuleKey From Module where Controller='BidRequest'  
end  
else if(@ModuleKeyName = 'WorkOrder')  
begin  
Select @ModuleKeyName=ModuleKey From Module where Controller='WorkOrder'    
end  
  else
  begin
  Select @ModuleKeyName=ModuleKey From Module where Controller='invoice'   
  end
Select @MessageStatusNew=Count(*) From Message msg1  
inner join Resource rec on rec.ResourceKey=msg1.ResourceKey  
Where msg1.ResourceKey !=@ResourceKey   
and msg1.ModuleKey=@ModuleKey  
--and msg1.ObjectKey=@ObjectKey  
and msg1.MessageStatus=@MessageStatusNew   
  
 declare @MessageStatus nvarchar(100)='Read'  
 if(@UpdatemsgStatus='1')  
 begin  
(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title=@MessageStatus)  
update Message set MessageStatus=@MessageStatus where  ModuleKey =@ModuleKeyName  
and ObjectKey=@ObjectKey and ResourceKey not in (Select CompanyKey From Resource Where Resource.ResourceKey =@ResourceKey)  
end  
  
  
  
  
 Select   
  (case when msg.ResourceKey=@ResourceKey then 'Right' else 'Left' end) as RightLeft,  
isnull(Convert(nvarchar(1), rec.FirstName),'A') as FirstName,  
 msg.Body as Body,  
  
 --(case when CONVERT(nvarchar(50), msg.LastModificationTime, 103)=CONVERT(nvarchar(50), GETDATE(), 103) then '' else CONVERT(nvarchar(50), msg.LastModificationTime, 103) end) as SendDate,  
 '' as SendDate,  
 CONVERT(nvarchar(50), msg.LastModificationTime, 100) as SendTime  
 ,@MessageStatusNew as 'NewMessagecnt'  
  From Message msg  
inner join Resource rec on rec.ResourceKey=msg.ResourceKey  
--inner join BidVendor bv on bv.BidVendorKey=msg.ObjectKey  
where msg.ModuleKey =@ModuleKeyName  
and msg.ObjectKey=@ObjectKey  
order by msg.LastModificationTime desc  
END
GO
/****** Object:  StoredProcedure [dbo].[site_Message_NewListCount]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
CREATE PROCEDURE [dbo].[site_Message_NewListCount]  
--site_Message_NewListCount 2098,0,0,'BidRequest'  
--site_Message_NewListCount 2,0,0,'BidRequest'  
@UserId int,  
@ObjectKey int,  
@ResourceKey int,  
@ModuleKeyName nvarchar(100)  
AS  
BEGIN  
declare @MessageStatus nvarchar(100)  
declare @MessageStatusNew nvarchar(100)  
declare @MessageStatusNewWO nvarchar(100)  
(select top(1) @MessageStatus=lookup.LookUpKey from lookup where LookUpTypeKey in (Select lt.LookUpTypeKey From lookuptype lt where lt.Title='Message Status') and Title='New')  
--Select @ModuleKey=ModuleKey From Module where Controller=@ModuleKeyName  
  
Declare @BidRequesModuleKey nvarchar(100)  
  
declare @ModuleKey1 nvarchar(100)  
Select top(1)@ModuleKey1=ModuleKey  From Module Where Controller='BidRequest'  
declare @ModuleKeywo nvarchar(100)  
Select top(1)@ModuleKeywo=ModuleKey  From Module Where Controller='WorkOrder'  
Declare @TotalBidRequest int  
Declare @TotalWorkOrder int  
  
Declare @TotalManagerBidRequest int  
Declare @TotalManagerWorkOrder int  
  
  
--PortalManager BR  
select @TotalManagerBidRequest=  
 Count(br.BidRequestKey)  
  from [BidRequest] as br          
 --inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey          
 --inner join company as cp on cp.CompanyKey = bv.vendorKey          
 inner join Property as prp on prp.PropertyKey = br.PropertyKey          
 --inner join Service as ser on ser.ServiceKey = br.ServiceKey          
-- left join bid on bid.bidvendorkey = bv.bidvendorkey    
 where    
 br.BidRequestStatus in  (select top(10) LookUpKey from lookup where Title in ('In Progress'  ,'Submitted') and LookUpTypeKey=6)     
 --and br.ResourceKey= ((Select us.ResourceKey From [User] us where us.UserKey=@UserId))   
 and ((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey   
= (select Companykey from [Resource] xr where xr.ResourceKey =  (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId) )    
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId)) or     
 (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId) in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = 'Administrator')))))    
 or (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId) = 0)  
  
 --and (br.BidRequestStatus='601' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=603)   
 --and (br.BidRequestStatus <> 600)  
 --and (bv.RespondByDate >= getdate())    
 and (br.ModuleKey=@ModuleKey1)        
  
 --portal Manager WO  
 select @TotalManagerWorkOrder=  
 Count(br.BidRequestKey)  
 from [BidRequest] as br          
 --inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey          
 --inner join company as cp on cp.CompanyKey = bv.vendorKey          
 inner join Property as prp on prp.PropertyKey = br.PropertyKey          
 --inner join Service as ser on ser.ServiceKey = br.ServiceKey          
-- left join bid on bid.bidvendorkey = bv.bidvendorkey        
 where    
br.BidRequestStatus in  (select top(10) LookUpKey from lookup where Title in ('In Progress' ,'Submitted','') and LookUpTypeKey=6)     
 --and br.ResourceKey= ((Select us.ResourceKey From [User] us where us.UserKey=@UserId))   
and   
((br.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey   
= (select Companykey from [Resource] xr where xr.ResourceKey =  (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId) )    
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId)) or     
 (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId) in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = 'Administrator')))))    
 or (Select top(1) us.ResourceKey From [User] us where us.UserKey=@UserId) = 0)  
--and (br.BidRequestStatus='601' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=603)   
--and (br.BidRequestStatus <> 600)  
  --and (bv.RespondByDate >= getdate())    
and (br.ModuleKey=@ModuleKeywo)            
   
   
   
  
  
--Vendor-Respond To Bid Request Open/Submitted/Inprocess  
select @TotalBidRequest=  
 Count(br.BidRequestKey)  
 from [BidRequest] as br          
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey          
 inner join company as cp on cp.CompanyKey = bv.vendorKey          
 inner join Property as prp on prp.PropertyKey = br.PropertyKey          
 inner join Service as ser on ser.ServiceKey = br.ServiceKey          
 left join bid on bid.bidvendorkey = bv.bidvendorkey       
 where    
 bv.BidVendorStatus in  (select top(10) LookUpKey from lookup where Title in ('In Progress' ,'Interested' ,'Submitted') and LookUpTypeKey=7)     
 and   bv.VendorKey = (Select top(1) CompanyKey From Resource where ResourceKey in (Select us.ResourceKey From [User] us where us.UserKey=@UserId))   
 and (br.BidRequestStatus='601' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=603)   
 and (br.BidRequestStatus <> 600)  
 --and (bv.RespondByDate >= getdate())    
 and (br.ModuleKey=@ModuleKey1)        
   
  
 --Vendor WorkOrder  
 select @TotalWorkOrder=  
 Count(br.BidRequestKey)  
 from [BidRequest] as br          
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey          
 inner join company as cp on cp.CompanyKey = bv.vendorKey          
 inner join Property as prp on prp.PropertyKey = br.PropertyKey          
 inner join Service as ser on ser.ServiceKey = br.ServiceKey          
 left join bid on bid.bidvendorkey = bv.bidvendorkey       
   
 where    
bv.BidVendorStatus in (701,700,702,802)            
 and   bv.VendorKey = (Select top(1) CompanyKey From Resource where ResourceKey in (Select us.ResourceKey From [User] us where us.UserKey=@UserId))   
and (br.BidRequestStatus=601)   
 and (br.BidRequestStatus <> 600)  
  --and (bv.RespondByDate >= getdate())    
 and (br.ModuleKey=@ModuleKeywo)            
   
  
  
  
Select @MessageStatusNew=Count(1) From Message msg1  
inner join Resource rec on rec.ResourceKey=msg1.ResourceKey  
Where  
msg1.ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  bv.BidRequestKey in (Select br.BidRequestKey From BidRequest br where ModuleKey=@ModuleKey1)   
and bv.VendorKey in (Select CompanyKey From Resource where ResourceKey in (Select us.ResourceKey From [User] us where us.UserKey=@UserId)))  
and msg1.ResourceKey not in (Select ResourceKey From Resource Where Resource.ResourceKey in (Select ResourceKey From [User] us where us.UserKey=@UserId))  
and msg1.ModuleKey=@ModuleKey1 and msg1.MessageStatus=@MessageStatus   
  
  
declare @ModuleKey2 nvarchar(100)  
Select top(1)@ModuleKey2=ModuleKey  From Module Where Controller='BidRequests'  
declare @MessageStatusNewPM nvarchar(100)  
Select @MessageStatusNewPM=Count(1) From Message msg1  
--inner join Resource rec on rec.ResourceKey=msg1.ResourceKey  
Where   
msg1.ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  
  bv.BidRequestKey   
  in (Select br.BidRequestKey From BidRequest br where   
  --ModuleKey=@ModuleKey2 and   
  br.ResourceKey in (Select us.ResourceKey From [User] us where us.UserKey=@UserId)))   
and   
msg1.ResourceKey not in (Select Resource.ResourceKey From Resource Where Resource.ResourceKey in (Select ResourceKey From [User] us where us.UserKey=@UserId))  
and msg1.ModuleKey=@ModuleKey1   
and msg1.MessageStatus=@MessageStatus  
  
  
  
  
declare @MessageStatusNewPMWO nvarchar(100)  
Select @MessageStatusNewPMWO=Count(1) From Message msg1  
--inner join Resource rec on rec.ResourceKey=msg1.ResourceKey  
Where   
msg1.ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  
  bv.BidRequestKey   
  in (Select br.BidRequestKey From BidRequest br where   
  --ModuleKey=@ModuleKey2 and   
  br.ResourceKey in (Select us.ResourceKey From [User] us where us.UserKey=@UserId)))   
and   
msg1.ResourceKey not in (Select Resource.ResourceKey From Resource Where Resource.ResourceKey in (Select ResourceKey From [User] us where us.UserKey=@UserId))  
and msg1.ModuleKey=@ModuleKeywo   
and msg1.MessageStatus=@MessageStatus  
  
  
  
  
print(@MessageStatus)  
declare @ModuleKey nvarchar(100)  
Select top(1)@ModuleKey=ModuleKey  From Module Where Controller='WorkOrder'  
  
Select @MessageStatusNewWO=Count(1) From Message msg1  
inner join Resource rec on rec.ResourceKey=msg1.ResourceKey  
Where   
msg1.ObjectKey in (Select bv.BidVendorKey From BidVendor bv where  bv.BidRequestKey in (Select br.BidRequestKey From BidRequest br where ModuleKey=@ModuleKey) and bv.VendorKey  in (Select CompanyKey From Resource where ResourceKey   
in (Select ResourceKey From [User] us where us.UserKey=@UserId)))  
and msg1.ResourceKey not in (Select ResourceKey From Resource Where Resource.ResourceKey in (Select ResourceKey From [User] us where us.UserKey=@UserId))  
and msg1.ModuleKey=@ModuleKey and msg1.MessageStatus=@MessageStatus   
  
-- Select @MessageStatusNew as NewMessagecnt,@MessageStatusNewWO as NewMessagecntWO,@MessageStatusNewPM as MessageStatusNewPM,@MessageStatusNewPMWO as MessageStatusNewPMWO  
  
Select @TotalManagerBidRequest as TotalManagerBidRequest,@TotalManagerWorkOrder  as TotalManagerWorkOrder,   
@TotalBidRequest as TotalOpenBidRequest,@TotalWorkOrder as TotalWorkOrder,  
@MessageStatusNew as NewMessagecnt,@MessageStatusNewWO as NewMessagecntWO,@MessageStatusNewPM as MessageStatusNewPM,@MessageStatusNewPMWO as MessageStatusNewPMWO  
END
GO
/****** Object:  StoredProcedure [dbo].[site_Notes_BidRequestDelete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




create PROCEDURE [dbo].[site_Notes_BidRequestDelete]

@Noteid int

AS
SET NOCOUNT ON
begin
delete from Note where NoteKey = @Noteid
end
GO
/****** Object:  StoredProcedure [dbo].[site_Notes_BidRequestInsert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
Create PROCEDURE [dbo].[site_Notes_BidRequestInsert]
	
	@BidRequestKey INT,	
	@Resourcekey INT,	
	@Description VARCHAR(150),		
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

   declare @modulekey int

   select @modulekey =  ModuleKey from Module  where Controller = 'BidRequest'


   insert into Note (ModuleKey,ResourceKey,ObjectKey,Description,LastModificationTime,Status)  values(@modulekey,@Resourcekey,@BidRequestKey,@Description,GETDATE(),101)


   

SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Notes_BidRequestSelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




CREATE PROCEDURE [dbo].[site_Notes_BidRequestSelectAll]

@BidRequestKey int

AS
SET NOCOUNT ON
begin
select  NoteKey,Description,convert(varchar, LastModificationTime, 101) as LastModificationTime from Note where ObjectKey = @BidRequestKey
end



select * from BidRequest
select * from BidVendor
GO
/****** Object:  StoredProcedure [dbo].[site_Notification_GetAllApi]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Notification_GetAllApi]
--@errorCode INT OUTPUT
AS
begin
SET NOCOUNT ON
  select  m.MessageKey as NotificationID,lu.Title as NotificationType,module.Title as ItemType,module.ModuleKey as ItemId,u.UserKey as UserKey,m.Body  as Message,m.LastModificationTime  as ReceivedOn   from Message as m 
	   inner join Module as module on module.ModuleKey = m.ModuleKey
       inner join Resource as r on r.ResourceKey = m.ResourceKey
       inner join [User] as u on u.ResourceKey = r.ResourceKey
       inner join LookUp as lu on lu.LookUpKey = r.ResourceTypeKey
       inner join LookUpType as lut on lut.LookUpTypeKey = lu.LookUpTypeKey
end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Notification_GetAllApi_]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[site_Notification_GetAllApi_]
--@errorCode INT OUTPUT
AS
begin
SET NOCOUNT ON
SELECT NT.PushNotificaionTemplateKey,NT.PushNotificationTitle,NT.Body,Nt.NTSubject,Lk.Title 
FROM PushNotificationTemplate as NT inner join LookUp as Lk on NT.PushNotificationType=Lk.LookUpKey
end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Notification_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Notification_SelectAll]
--@errorCode INT OUTPUT
AS
begin
SET NOCOUNT ON
SELECT NT.PushNotificaionTemplateKey,NT.PushNotificationTitle,NT.Body,Nt.NTSubject,Lk.Title 
FROM PushNotificationTemplate as NT inner join LookUp as Lk on NT.PushNotificationType=Lk.LookUpKey
end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Notification_SelectOneByNotificationKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Notification_SelectOneByNotificationKey]
	@PushNotificaionTemplateKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT NT.PushNotificaionTemplateKey,NT.PushNotificationTitle,NT.Body,Nt.NTSubject,Lk.Title,NT.PushNotificationType 
FROM PushNotificationTemplate as NT inner join LookUp as Lk on NT.PushNotificationType=Lk.LookUpKey  where  PushNotificaionTemplateKey = @PushNotificaionTemplateKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Notification_SelectTopFiveNew]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_Notification_SelectTopFiveNew]
--[site_Notification_SelectTopFiveNew] 13892
@ResourceKey int
As
Begin
Select top(1) 'Credit Card about to expire' as ActionItem, 
 CONVERT(nvarchar(20),convert(date,'01/'+ CardExpiryMonth+'/'+CardExpiryYear) ,101)  as Notification
,(case when convert(date,'01/'+ CardExpiryMonth+'/'+CardExpiryYear) > DATEADD(month,1,convert(date,getdate(), 3)) then 0 else 1 end) as Show
,'/vBilling/vBillingList' as RedirectTo, 'Credit card (' + MaskedCCNumber +') expiring soon' as DisplMessage, 0 as KeyId, 0 as ModuleKey
 From PaymentMethod where CompanyKey = (Select top(1) CompanyKey From Resource where ResourceKey=@ResourceKey) and PrimaryMethod=1 
 and isnull(CardExpiryMonth,'') !=''
 and isnull(CardExpiryYear,'') !=''
 union
 --Insurance 
 Select * From(
 Select top(1) 'Insurance about to expire' as ActionItem, CONVERT(nvarchar(20),EndDate,101) as Notification
,(case when convert(date,EndDate) > DATEADD(month,1,convert(date,getdate(), 3)) then 0 else 1 end) as Show
,'/VendorPolicy/PolicyList' as RedirectTo, 'Insurance expiring soon' as DisplMessage,
 0 as KeyId, 0 as ModuleKey
 From Insurance where VendorKey= (Select top(1) CompanyKey From Resource where ResourceKey=@ResourceKey) and Status=1

 union
 --Respond to bid request
 select top(1) 'Respond to bid request' as ActionItem, CONVERT(nvarchar(20),RespondByDate,101) as Notification, 
 '1' as Show, '/VenderBidrequest/ViewBidrequest?BidVendorKey='+CONVERT(nvarchar(20),bv.BidVendorKey)+'&ResourceKey='+CONVERT(nvarchar(20),br.ResourceKey)+'&BidStartDate=01/01/1900' as RedirectTo,
 br.Title+' - Respond by' as DisplMessage, br.BidRequestKey as KeyId, br.ModuleKey
 from [BidRequest] as br        
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey        
 inner join company as cp on cp.CompanyKey = bv.vendorKey        
 inner join Property as prp on prp.PropertyKey = br.PropertyKey        
 inner join Service as ser on ser.ServiceKey = br.ServiceKey        
 left join bid on bid.bidvendorkey = bv.bidvendorkey     
 where  
 bv.BidVendorStatus in  (select top(10) LookUpKey from lookup where Title='In Progress' and LookUpTypeKey=7)   
 and   bv.VendorKey = (Select top(1) CompanyKey From Resource where ResourceKey=@ResourceKey) 
 and (br.BidRequestStatus='601' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=603) 
 and (br.BidRequestStatus <> 600)
 and (bv.RespondByDate >= getdate())  
 and (br.ModuleKey='100')          
 Order by br.BidRequestKey desc
 )i
 union
 --Respond to bid request
 Select * From (
 select top(1)
'Respond to bid request' as ActionItem, CONVERT(nvarchar(20),RespondByDate,101) as Notification,
 --br.BidRequestKey,    
 --br.ResourceKey,   
 '1' as Show,
 '/VenderBidrequest/ViewBidrequest?BidVendorKey='+CONVERT(nvarchar(20),bv.BidVendorKey)+'&ResourceKey='+CONVERT(nvarchar(20),br.ResourceKey)+'&BidStartDate=01/01/1900' as RedirectTo,
 br.Title+' - Submit by' as DisplMessage,   
 br.BidRequestKey as KeyId,
 br.ModuleKey
 from [BidRequest] as br        
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey        
 inner join company as cp on cp.CompanyKey = bv.vendorKey        
 inner join Property as prp on prp.PropertyKey = br.PropertyKey        
 inner join Service as ser on ser.ServiceKey = br.ServiceKey        
 left join bid on bid.bidvendorkey = bv.bidvendorkey     
 where  
 bv.BidVendorStatus in  (select top(10) LookUpKey from lookup where Title='Interested' and LookUpTypeKey=7)   
 and   bv.VendorKey = (Select top(1) CompanyKey From Resource where ResourceKey=@ResourceKey) 
 and (br.BidRequestStatus='601' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=603) and (br.BidRequestStatus <> 600)
 and (bv.RespondByDate >= getdate())  
 and (br.ModuleKey='100')          
 Order by br.BidRequestKey desc)i
 
 union
 Select * From (
 select top(1)
'Respond to work order' as ActionItem, CONVERT(nvarchar(20),RespondByDate,101) as Notification,  
 '1' as Show,
 '/VenderBidrequest/ViewBidrequest?BidVendorKey='+CONVERT(nvarchar(20),bv.BidVendorKey)+'&ResourceKey='+CONVERT(nvarchar(20),br.ResourceKey)+'&BidStartDate=01/01/1900' as RedirectTo,
 br.Title+' - Respond by' as DisplMessage,   
 br.BidRequestKey as KeyId,
 br.ModuleKey
 from [BidRequest] as br        
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey        
 inner join company as cp on cp.CompanyKey = bv.vendorKey        
 inner join Property as prp on prp.PropertyKey = br.PropertyKey        
 inner join Service as ser on ser.ServiceKey = br.ServiceKey        
 left join bid on bid.bidvendorkey = bv.bidvendorkey     
 where  
 bv.BidVendorStatus in  (select top(10) LookUpKey from lookup where Title='In Progress' and LookUpTypeKey=7)   
 and   bv.VendorKey = (Select top(1) CompanyKey From Resource where ResourceKey=@ResourceKey) 
 and (br.BidRequestStatus='601' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=603) 
 and (br.BidRequestStatus <> 600)
 and (bv.RespondByDate >= getdate())  
 and (br.ModuleKey='106')          
 Order by br.BidRequestKey desc
 )
 i

 union
 Select * From (
 select top(1)
'Submit bid' as ActionItem, CONVERT(nvarchar(20),RespondByDate,101) as Notification,
 --br.BidRequestKey,    
 --br.ResourceKey,   
 '1' as Show,
 '/VenderBidrequest/ViewBidrequest?BidVendorKey='+CONVERT(nvarchar(20),bv.BidVendorKey)+'&ResourceKey='+CONVERT(nvarchar(20),br.ResourceKey)+'&BidStartDate=01/01/1900' as RedirectTo,
 br.Title+' - Submit by' as DisplMessage,   
 br.BidRequestKey as KeyId,
 br.ModuleKey
 from [BidRequest] as br        
 inner join BidVendor as bv on bv.BidRequestKey = br.BidRequestKey        
 inner join company as cp on cp.CompanyKey = bv.vendorKey        
 inner join Property as prp on prp.PropertyKey = br.PropertyKey        
 inner join Service as ser on ser.ServiceKey = br.ServiceKey        
 left join bid on bid.bidvendorkey = bv.bidvendorkey     
 where  
 bv.BidVendorStatus in  (select top(10) LookUpKey from lookup where Title='Interested' and LookUpTypeKey=7)   
 and   bv.VendorKey = (Select top(1) CompanyKey From Resource where ResourceKey=@ResourceKey) 
 and (br.BidRequestStatus='601' or br.BidRequestStatus=602 or br.BidRequestStatus=603 or br.BidRequestStatus=603) and (br.BidRequestStatus <> 600)
 and (bv.RespondByDate >= getdate())  
 and (br.ModuleKey='106')          
 Order by br.BidRequestKey desc)i


 end
GO
/****** Object:  StoredProcedure [dbo].[site_NotificationTemplate_ByType]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[site_NotificationTemplate_ByType]
@NotificationType varchar(50)
As
Begin
	select PushNotificaionTemplateKey,
	PushNotificationTitle,
	Body,
	DateAdded,
	NTSubject as Subject,
	PushNotificationType
	from PushNotificationTemplate
	where PushNotificationType = (Select LookUpKey from Lookup where Title = @NotificationType 
	and LookUpTypeKey = (select LookUpTypeKey from LookUpType where Title = 'Notification Type'))
End
GO
/****** Object:  StoredProcedure [dbo].[site_notificationTemplate_Edit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_notificationTemplate_Edit]
	@PushNotificaionTemplateKey int,
	@PushNotificationTitle varchar(200), 
	@PushNotificationType int, 
	@Body varchar(max),
	@NTSubject varchar(max),
	@DateAdded datetime
AS
SET NOCOUNT ON
begin
Update PushNotificationTemplate set PushNotificationTitle = @PushNotificationTitle,NTSubject=@NTSubject,PushNotificationType=@PushNotificationType,  Body = @Body, DateAdded = GETDATE ()
	where PushNotificaionTemplateKey = @PushNotificaionTemplateKey

	end
GO
/****** Object:  StoredProcedure [dbo].[site_Payment_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[site_Payment_Insert]      
      
      
@CardNumber varchar(max),      
@StripeTokenID varchar(max),      
@errorcode  int output      
      
      
as       
begin      
INSERT INTO PaymentModel      
                  (CardNumber, StripeTokenID, AddedOn,LastModificationTime)      
VALUES     (@CardNumber,@StripeTokenID,GETDATE(),GetDate())      
    select  @errorcode  = @@Error 
  end
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentFail_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE procedure [dbo].[site_PaymentFail_Insert]         
        
@RefrenceNumber nvarchar(max),        
@Amount nvarchar(max),        
@Balance nvarchar(max),      
@stripeToken nvarchar(max),    
@VendorKey int,        
@PricingTypeKey int,        
@errorcode  int output                    
as        
begin        
declare  @desc nvarchar(max)        
declare  @InvoiceValue int         
select @desc = (select  title   from  LookUp  where Lookupkey = @PricingTypeKey)        
  
--  
Select top(1) @Amount=Total from Bid where BidVendorKey =@RefrenceNumber  
  
insert into  Payment         
(VendorKey,PaymentTypeKey,ReferenceNumber,TransactionDate,Amount,Balance,Description,LastModificationTime)        
values (@VendorKey,@PricingTypeKey,@RefrenceNumber,getdate(),0,@Balance,@desc,GETDATE())        
      
insert into  Invoice         
(VendorKey,ReferenceNumber,TransactionDate, DueDate,Amount,Balance,LastModificationTime,status,Strip_TokenID)        
values (@VendorKey,@RefrenceNumber,getdate(),getdate(),0,@Balance,GETDATE(),101,@stripeToken)        
select  @InvoiceValue = @@IDENTITY          
      
insert into InvoiceLine       
(InvoiceKey,Quantity,Rate,Amount,Description,SortOrder)      
values(@InvoiceValue,1,null,@Balance,@desc,null)      
      
 select  @errorcode  = @@Error         
end  
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentMethod_ByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[site_PaymentMethod_ByCompanyKey]
@CompanyKey int ,
@AddedByResourceKey int

AS
begin
SET NOCOUNT ON

select [PaymentMethod].[PaymentMethodKey] ,
		 --'XXXX XXXX XXXX ' + RIGHT([PaymentMethod].[MaskedCCNumber], 5) as  MaskedCCNumber,
		 'XXXX XXXX XXXX ' + SubString([PaymentMethod].[MaskedCCNumber],13,LEN([PaymentMethod].[MaskedCCNumber])-1) as MaskedCCNumber,
		[PaymentMethod].[PrimaryMethod],
		[PaymentMethod].[CardHolderFirstName] ,
		[PaymentMethod].[CardHolderLastName],
		[PaymentMethod].[StripeTokenId],
		[PaymentMethod].[PaymentMethodId]
from [PaymentMethod]
where CompanyKey= @CompanyKey and AddedByResourceKey=@AddedByResourceKey and (Status = 1 or Status = 101)


end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentMethod_ByCompanyKey_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- site_PaymentMethod_ByCompanyKey_Copy 3217,4254
CREATE PROCEDURE [dbo].[site_PaymentMethod_ByCompanyKey_Copy]
@CompanyKey int ,
@AddedByResourceKey int

AS
begin
declare @ResourceKey int
select @ResourceKey = ResourceKey from Resource where CompanyKey = @CompanyKey
SET NOCOUNT ON

select [PaymentMethod].[PaymentMethodKey] ,
		 --'XXXX XXXX XXXX ' + RIGHT([PaymentMethod].[MaskedCCNumber], 5) as  MaskedCCNumber,
		 'XXXX XXXX XXXX ' + SubString([PaymentMethod].[MaskedCCNumber],13,LEN([PaymentMethod].[MaskedCCNumber])-1) as MaskedCCNumber,
		[PaymentMethod].[PrimaryMethod],
		[PaymentMethod].[CardHolderFirstName] ,
		[PaymentMethod].[CardHolderLastName],
		[PaymentMethod].[StripeTokenId],
		[PaymentMethod].[PaymentMethodId],
		[PaymentMethod].[CardExpiryMonth],
		[PaymentMethod].[CardExpiryYear],
		(select top 1(select (CASE WHEN (ab.ModuleKey = 301 and ab.ForResource = @ResourceKey and ab.Status = 900) 
	  THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = [PaymentMethod].PaymentMethodKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS priority,
	  (select top 1 Id from (select top 1* from ABNotification ab where ab.ModuleKey = 301 and ObjectKey = [PaymentMethod].PaymentMethodKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS NotificationId)AS NotificationId,

	(select top 1 NotificationType from (select top 1* from ABNotification ab where ab.ModuleKey = 301 and ObjectKey = [PaymentMethod].PaymentMethodKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS NotificationType)AS NotificationType

from [PaymentMethod]
where CompanyKey= @CompanyKey and AddedByResourceKey=@AddedByResourceKey and (Status = 1 or Status = 101)


end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentMethod_ByResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_PaymentMethod_ByResourceKey]

@ResourceKey int

AS
begin

SET NOCOUNT ON

select [PaymentMethod].[PaymentMethodKey] ,
		 --'XXXX XXXX XXXX ' + RIGHT([PaymentMethod].[MaskedCCNumber], 5) as  MaskedCCNumber,
		 'XXXX XXXX XXXX ' + SubString([PaymentMethod].[MaskedCCNumber],13,LEN([PaymentMethod].[MaskedCCNumber])-1) as MaskedCCNumber,
		[PaymentMethod].[PrimaryMethod],
		[PaymentMethod].[CardHolderFirstName] ,
		[PaymentMethod].[CardHolderLastName],
		[PaymentMethod].[StripeTokenId],
		[PaymentMethod].[PaymentMethodId],
		[PaymentMethod].[CardExpiryMonth],
		[PaymentMethod].[CardExpiryYear],
		(select top 1(select (CASE WHEN (ab.ModuleKey = 301 and ab.ForResource = @ResourceKey and ab.Status = 900) 
	  THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = [PaymentMethod].PaymentMethodKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS priority,
	  (select top 1 Id from (select top 1* from ABNotification ab where ab.ModuleKey = 301 and ObjectKey = [PaymentMethod].PaymentMethodKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS NotificationId)AS NotificationId,

	(select top 1 NotificationType from (select top 1* from ABNotification ab where ab.ModuleKey = 301 and ObjectKey = [PaymentMethod].PaymentMethodKey and ab.ForResource =@ResourceKey and ab.status = 900 order by Id desc)AS NotificationType)AS NotificationType

from [PaymentMethod]
where AddedByResourceKey = @ResourceKey and (Status = 1 or Status = 101)


end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentMethod_ChangePrimaryMethod]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[site_PaymentMethod_ChangePrimaryMethod]
@PaymentMethodKey int,
@CompanyKey int,
@AddedByResourceKey int,
@errorCode int OUTPUT
AS
BEGIN
	Update PaymentMethod Set PrimaryMethod = 0 where CompanyKey = @CompanyKey and AddedByResourceKey = @AddedByResourceKey

	update PaymentMethod set PrimaryMethod = 1 where PaymentMethodKey = @PaymentMethodKey

	select @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentMethod_DeleteOneByagreementKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
Create PROCEDURE [dbo].[site_PaymentMethod_DeleteOneByagreementKey]
	@PaymentMethodKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [PaymentMethod]
WHERE [PaymentMethod].[PaymentMethodKey] = @PaymentMethodKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentMethod_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[site_PaymentMethod_Insert]

@CompanyKey int,
@CardHolderFirstName varchar(150),
@CardHolderLastName varchar(150),
@MaskedCCNumber nvarchar(16),
@StripeTokenID nvarchar(500),
@AddedByResourceKey int,
@Status int,
@PrimaryMethod Bit ,

@errorcode  int output


as 
begin
declare @PMKey int

INSERT INTO PaymentMethod
          ([CompanyKey],
			[CardHolderFirstName],
			[CardHolderLastName],
			[MaskedCCNumber],
			[StripeTokenID],
			[AddedOn],
			[AddedByResourceKey],
			[LastModificationTime],
			[Status],
			[PrimaryMethod])

VALUES     (@CompanyKey,@CardHolderFirstName,@CardHolderLastName,@MaskedCCNumber,@StripeTokenID,GETDATE(),@AddedByResourceKey,GETDATE(),@Status,@PrimaryMethod)

select @PMKey = @@Identity
select @errorcode = @@ERROR
	------
	if(@PMKey != 0 and @PrimaryMethod = 1)
	begin
		update PaymentMethod set PrimaryMethod = 0 where PaymentMethodKey != @PMKey
	end

end
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentMethod_Insert_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[site_PaymentMethod_Insert_New]

@CompanyKey int,
@CardHolderFirstName varchar(150),
@CardHolderLastName varchar(150),
@MaskedCCNumber nvarchar(16),
@StripeTokenID nvarchar(500),
@PaymentMethodId nvarchar(200),
@AddedByResourceKey int,
@Status int,
@PrimaryMethod Bit ,
@CardExpiryMonth nvarchar(50),
@CardExpiryYear nvarchar(50),
@CvvNumber nvarchar(50),
@errorcode  int output


as 
begin
declare @PMKey int

INSERT INTO PaymentMethod
          ([CompanyKey],
			[CardHolderFirstName],
			[CardHolderLastName],
			[MaskedCCNumber],
			[StripeTokenID],
			[PaymentMethodID],
			[AddedOn],
			[AddedByResourceKey],
			[LastModificationTime],
			[Status],
			[PrimaryMethod],
			CardExpiryMonth,
			CardExpiryYear,
			CvvNumber
			)
VALUES     (@CompanyKey,@CardHolderFirstName,@CardHolderLastName,@MaskedCCNumber,@StripeTokenID,@PaymentMethodId,GETDATE(),
@AddedByResourceKey,GETDATE(),@Status,@PrimaryMethod,@CardExpiryMonth,@CardExpiryYear,@CvvNumber)

select @PMKey = @@Identity
select @errorcode = @@ERROR
	------
	if(@PMKey != 0 and @PrimaryMethod = 1)
	begin
		update PaymentMethod set PrimaryMethod = 0 where PaymentMethodKey != @PMKey
	end

end
GO
/****** Object:  StoredProcedure [dbo].[site_PaymentSP_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  Procedure   [dbo].[site_PaymentSP_Insert]     
    
@RefrenceNumber nvarchar(max),    
@Amount nvarchar(max),    
@Balance nvarchar(max),
@stripeToken nvarchar(max),
@VendorKey int,    
@PricingTypeKey int,    
@errorcode  int output                
as    
begin    
declare  @desc nvarchar(max)    
declare  @InvoiceValue int     
select @desc = (select  title   from  LookUp  where Lookupkey = @PricingTypeKey)    
    
insert into  Payment     
(VendorKey,PaymentTypeKey,ReferenceNumber,TransactionDate,Amount,Balance,Description,LastModificationTime)    
values (@VendorKey,@PricingTypeKey,@RefrenceNumber,getdate(),@Amount,null,@desc,GETDATE())    
  
insert into  Invoice     
(VendorKey,ReferenceNumber,TransactionDate, DueDate,Amount,Balance,LastModificationTime,status,Strip_TokenID)    
values (@VendorKey,@RefrenceNumber,getdate(),getdate(),@Amount,null,GETDATE(),101,@stripeToken)    
select  @InvoiceValue = @@IDENTITY      
  
insert into InvoiceLine   
(InvoiceKey,Quantity,Rate,Amount,Description,SortOrder)  
values(@InvoiceValue,1,null,@Amount,@desc,null)  
  
 select  @errorcode  = @@Error     
end
GO
/****** Object:  StoredProcedure [dbo].[site_PMBidRequest_UpdateResponseDueDate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_PMBidRequest_UpdateResponseDueDate]
@BidVendorKey int,
@BidRequestKey int,
@RespondDueDate datetime,
@errorCode int Output
AS
BEGIN
	update BidVendor set RespondByDate = @RespondDueDate 
	where BidVendorKey = @BidVendorKey and BidRequestKey = @BidRequestKey

	set @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[site_Portal_SelectByResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[site_Portal_SelectByResourceKey]
@ResourceKey int
As
Begin
	select p.PortalKey,p.PortalId,p.Title from Portal p 
	join Company c on c.PortalKey = p.PortalKey
	join Resource r on r.CompanyKey = c.CompanyKey
	where r.ResourceKey = @ResourceKey
End
GO
/****** Object:  StoredProcedure [dbo].[site_Price_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [site_Price_SelectIndexPaging] 10,1,'','order by Pr.StartAmount desc'
CREATE PROCEDURE [dbo].[site_Price_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    

	set @qrywhere = 'where ((lk.title =  '''+ @Search +''') or ( '''+@Search+''' = '''' )) and lk.LookUpTypeKey=12' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Pricing] as Pr
  inner join [LookUp] as LK on LK.LookUpKey =Pr.PricingTypeKey 
  inner join [Company] as Cm on Cm.CompanyKey = Pr.CompanyKey '+@qrywhere + '' 

  set @qry = '   select * from (  select Pr.PricingKey,Pr.CompanyKey,Pr.PricingTypeKey,Pr.StartAmount,Pr.EndAmount,Pr.Fee,Pr.FeeType,Pr.SortOrder,LK.title,Cm.Name,
   row_number() over('+@Sort+') as  rownum, @total  as TotalRecord 
   from [Pricing] as Pr
   inner join [LookUp] as LK on LK.LookUpKey =Pr.PricingTypeKey 
   inner join [Company] as Cm on Cm.CompanyKey = Pr.CompanyKey '+@qrywhere  + '
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Pricing_DeleteOneByPricingKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Pricing_DeleteOneByPricingKey]
	@pricingKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

DELETE FROM [Pricing]
WHERE [Pricing].[PricingKey] = @pricingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Pricing_InsertOne]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Pricing_InsertOne]
	
	@CompanyKey Int,
	@PricingTypeKey Int,
	@StartAmount Money,
	@EndAmount Money,
	@feetype varchar(10),
	@Fee Money,
	@LastModificationTime datetime,
	@SortOrder float,	

	@Notificationvalue INT OUTPUT
	--@errorCode INT OUTPUT
AS
SET NOCOUNT ON


INSERT INTO [Pricing]
(	
	[CompanyKey],
	[PricingTypeKey],
	[StartAmount],
	[EndAmount],
	[FeeType],
	[Fee],
	[LastModificationTime],
	[SortOrder]
)
VALUES
(
	@CompanyKey ,
	@PricingTypeKey ,
	@StartAmount ,
	@EndAmount ,
	@feetype,
	@Fee ,
	CONVERT(VARCHAR(8),GETDATE(),108) ,
	@SortOrder 	
)
select @Notificationvalue = @@IDENTITY
-- Get the Error Code for the statement just executed.
--SELECT @errorCode = @@ERROR
-- Get the IDENTITY value for the row just inserted.
--SELECT @pricingKey = SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure [dbo].[site_Pricing_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- [site_Pricing_SelectIndexPaging] 10,1,'','order by title desc'
CREATE PROCEDURE [dbo].[site_Pricing_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)  
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (Pr.StartAmount like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Pricing] as Pr 
   inner join [LookUp] as LK on LK.LookUpKey =Pr.PricingTypeKey  '+@qrywhere + ''

  set @qry = 'select * from (SELECT Pr.PricingKey,Pr.CompanyKey,Pr.PricingTypeKey,Pr.StartAmount,Pr.EndAmount,Pr.Fee,Pr.SortOrder,LK.title,Cm.Name, 
   row_number() over('+@Sort+') as  rownum,@total  as TotalRecord  FROM Pricing as Pr 
   inner join [LookUp] as LK on LK.LookUpKey =Pr.PricingTypeKey 
   inner join [Company] as Cm on Cm.CompanyKey = Pr.CompanyKey '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)   
END
GO
/****** Object:  StoredProcedure [dbo].[site_Pricing_SelectOneByPricingKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Pricing_SelectOneByPricingKey]
	@pricingKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	Pr.PricingKey, 
	--Pr.CompanyKey, 
	Pr.PricingTypeKey, 
	Pr.StartAmount, 
	Pr.EndAmount, 
	Pr.Fee, 
	Pr.LastModificationTime, 
	Pr.SortOrder ,
	Lk.Title PricingType ,
	pr.FeeType
	--Cm.Name  Company
FROM
	Pricing Pr
	inner join [LookUp] as LK on LK.LookUpKey =Pr.PricingTypeKey 
    --inner join [Company] as Cm on Cm.CompanyKey = Pr.CompanyKey 
	and Pr.PricingKey = @pricingKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Pricing_SelectSomeByCompanyKeyAndPricingTypeKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Pricing_SelectSomeByCompanyKeyAndPricingTypeKey]
	@companyKey INT = 0,
	@pricingTypeKey INT = 0,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

SELECT
	[Pricing].[PricingKey], 
	[Pricing].[CompanyKey], 
	[Pricing].[PricingTypeKey], 
	[Pricing].[StartAmount], 
	[Pricing].[EndAmount], 
	[Pricing].[Fee], 
	[Pricing].[LastModificationTime], 
	[Pricing].[SortOrder] 
FROM
	[Pricing] 
WHERE ([Pricing].[CompanyKey] = @companyKey OR @companyKey IS NULL OR @companyKey = 0)
AND ([Pricing].[PricingTypeKey] = @pricingTypeKey OR @pricingTypeKey IS NULL OR @pricingTypeKey = 0)

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Pricing_UpdateOneByPricingKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Pricing_UpdateOneByPricingKey]
	@pricingKey INT,
	--@companyKey INT,
	@pricingTypeKey INT,
	@startAmount MONEY,
	@endAmount MONEY,
	@feetype varchar(10),
	@fee MONEY,
	@sortOrder FLOAT(53),
	@PricingTmpvalue INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Pricing]
SET
	--[CompanyKey] = @companyKey,
	[PricingTypeKey] = @pricingTypeKey,
	[StartAmount] = @startAmount,
	[EndAmount] = @endAmount,
	[FeeType] = @feetype,
	[Fee] = @fee,	
	[SortOrder] = @sortOrder
WHERE [Pricing].[PricingKey] = @pricingKey

select @PricingTmpvalue = @@IDENTITY
GO
/****** Object:  StoredProcedure [dbo].[site_Property_AddManger]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure  [dbo].[site_Property_AddManger]
--[site_Property_AddManger] 1063
@ResourceKey int
as
begin
Declare @varGroupKey int

Select @varGroupKey=GroupKey From [Group] where Title='Property Manager'
select  0 as PropertyKey,u.ResourceKey,(isnull(FirstName,'') +' ' + ISNULL(Lastname,'')) as Name 
	from Resource as r 
	inner join [User] as u on u.ResourceKey=r.ResourceKey 
	right join  GroupMember as gm on  gm.ResourceKey = r.ResourceKey
	where r.ResourceKey =@ResourceKey  and gm.GroupKey = @varGroupKey
end
GO
/****** Object:  StoredProcedure [dbo].[site_Property_checkManager]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE  PROCEDURE [dbo].[site_Property_checkManager]

	@PropertyKey int,
	@resourcekey int output 
As
begin
 
 delete from PropertyResource  Where  PropertyKey =@PropertyKey and ResourceKey = @ResourceKey
 and 1 < (select count(pr.PropertyResourceKey) from PropertyResource pr where pr.PropertyKey = @PropertyKey)
-- Get the Error Code for the statement just executed.
select @resourcekey = @@ERROR
end
GO
/****** Object:  StoredProcedure [dbo].[site_Property_CompanyViewPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_Property_CompanyViewPaging 50,1,'','order by u.Title desc',4238
CREATE PROCEDURE [dbo].[site_Property_CompanyViewPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),
@Sort nvarchar(max),
@CompanyKey int 
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where ( (u.Title like  ''%'+ @Search +'%'') or (u.Address like ''%'+ @Search +'%'') 
  or (u.NumberOfUnits like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' ) ) and u.CompanyKey = '+ CONVERT(nvarchar,@CompanyKey) + '' 
  
  set @qrytotal =   'declare @total int  
  select  @total  = count(*) 
  from [Property] as u
   '+@qrywhere + ''

  set @qry = 'select * from (  
  select  u.PropertyKey as PropertyKey, u.Title as Title
  , (select (case when u.Address is null then '''' else u.Address + '','' + '' '' end) + (case when u.Address2 is null then '''' else u.Address2 + '','' + '' '' end) 
  + (case when u.City is null then '''' else u.City + '','' + '' ''end) + (case when u.State is null then '''' else u.State + '','' + '' '' end) 
  + (case when u.Zip is null then '''' else u.Zip  end)) as Address
,NumberOfUnits as NumberOfUnits, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum  
   from [Property] as u 
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Property_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[site_Property_Delete]
	@propertyKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON
delete from [PropertyResource] where PropertyKey = @propertyKey
DELETE FROM Property WHERE PropertyKey = @propertyKey



select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Property_GetAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--site_Property_GetAll 1063
CREATE PROCEDURE [dbo].[site_Property_GetAll]
@ResourceKey int
AS
begin

declare @GroupKey int
select  @GroupKey =    count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1
declare @GroupKeyp int
select  @GroupKeyp =   count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 3



if @GroupKey  > 0
begin
select distinct PropertyKey, TRIM(Title) as Title 
from [Property] order by Title asc
end
if @GroupKeyp > 0
begin

select distinct TRIM(p.Title) as Title,p.PropertyKey from Property as p
left join PropertyResource as pr on pr.PropertyKey = p.PropertyKey
where pr.ResourceKey = @ResourceKey
order by Title asc
end







end
GO
/****** Object:  StoredProcedure [dbo].[site_Property_GetAllforbid]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
--site_Property_GetAll 1063  
CREATE PROCEDURE [dbo].[site_Property_GetAllforbid]  
@ResourceKey int,  
@CompanyKey int


AS  
begin 

declare @GroupKey int  
select  @GroupKey =    count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1  


if @GroupKey  > 0  
begin  
select distinct p.PropertyKey, TRIM(p.Title) as Title   
from [Property]  p 

left  join  PropertyResource pr on  p.PropertyKey = p.PropertyKey
where  companykey = @CompanyKey   order by Title asc  
end  

else
begin
select  p.PropertyKey, TRIM(p.Title) as Title  from  PropertyResource pr 
inner  join  property p on  p.PropertyKey = pr.PropertyKey
where  Pr.ResourceKey = @ResourceKey
end  
end
GO
/****** Object:  StoredProcedure [dbo].[site_Property_getBidrequestDetails]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Property_getBidrequestDetails]
	@BidRequestKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

--select Gp.GroupKey, * 

--From Property as ps 
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey 
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey
--where ps.PropertyKey = @PropertyKey
select  br.BidRequestKey,br.Title,(SELECT CONVERT(varchar, br.BidDueDate, 1)) As BidDueDate,p.PropertyKey ,p.title as Propertyname, s.Title as  ServiceTitle,   br.Description, (select count(1) from BidVendor where BidVendor.BidRequestKey = 1012) as NoofBid,
 (SELECT CONVERT(varchar, br.StartDate, 1)) As sstartddate,  lp.title as BidRequestStatus from  BidRequest  br
inner  join  Property p  on  p.PropertyKey  =  br.PropertyKey
left  join  LookUp lp on  lp.LookUpKey = br.BidRequestStatus
left join  Service s on  s.ServiceKey =  br.ServiceKey
where  br.BidRequestKey = @BidRequestKey



			
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
print(@errorCode)

--[site_Property_SelectOneByPropertyKey] 1023, null
GO
/****** Object:  StoredProcedure [dbo].[site_Property_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_Property_Insert] 15,'shyam',25,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'desc',1,' Tasksheet  23-04-2020.docx,Tasksheet  24-04-2020.docx,Tasksheet  30-04-2020.docx','21811,21821,22471',1,20,12
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_Property_Insert]
	 
	@CompanyKey int, 
	@Title varchar(150), 
	@NumberOfUnits int, 
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(2),
	@Zip varchar(11),
	@BidRequestAmount money,
	@MinimumInsuranceAmount money,
	@Description varchar(max),
	@Status int,
	@FileName varchar(max), 
	@FileSize varchar(max), 
	@ResourceKey nvarchar(max),
	@Latitude varchar(max),
	@Longitude varchar(max),
	@Propertyvalue INT OUTPUT

AS
SET NOCOUNT ON

 Declare @qry nvarchar(max)   
    Insert into Property(CompanyKey,Title, NumberOfUnits, [Address], [Address2], City, [State], Zip,
	BidRequestAmount, MinimumInsuranceAmount, [Description], [Status],Latitude,Longitude) 
	values 
	(@CompanyKey,@Title, @NumberOfUnits, @Address, @Address2, @City, @State, @Zip, 
	@BidRequestAmount, @MinimumInsuranceAmount, @Description, 1,@Latitude,@Longitude)
	   declare @PropertyKey int = @@identity 
	   select @Propertyvalue = @@IDENTITY 
       declare @modulekey int
	   select @modulekey = count(ModuleKey) from Module Where Controller = 'PMProperties' and Action = 'PMPropertyAdd'
	   if(@modulekey = 0)
	   begin
	        insert into Module (ModuleKey,Controller,[Action],Title)values((select max(ModuleKey) + 1  from Module),'PMProperties','PMPropertyAdd','Properties')
		  
            end 
	        select @modulekey = ModuleKey from Module Where Controller = 'PMProperties' and Action = 'PMPropertyAdd'
			declare FileNamecur cursor for  
  
               select j.Item as FileName,k.Item as FileSize from 
               (select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileName,',') as a ) j
               inner join ( select a.Item, ROW_NUMBER() over(order by (SELECT 1000)) rownum from dbo.SplitString(@FileSize,',') as a)k
                on j.rownum = k.rownum

                 open FileNamecur     
                 declare @File as nvarchar(max), @Size as nvarchar(max)

           fetch next from FileNamecur into @File,@Size
                   while @@FETCH_STATUS = 0  
               begin 

               Insert Into Document(ModuleKey, ObjectKey, [FileName], FileSize,LastModificationTime)
               values(@modulekey, @PropertyKey ,@File ,@Size, GETDATE())

            fetch next from FileNamecur into @File,@Size  
                       end        
            close FileNamecur      
              deallocate FileNamecur
		  	       
      declare managercur cursor for 
           select Item from dbo.SplitString(@ResourceKey,',')     

             open managercur
           declare @resourcevalue int

fetch next from managercur into @resourcevalue
while @@FETCH_STATUS = 0
begin  
Set @qry = 'Insert Into PropertyResource(PropertyKey, ResourceKey, DateAdded, Status)values('''+convert(varchar, @PropertyKey)+''','''+ convert(varchar, @resourcevalue) +''', GETDATE(), 1)'                                         

exec(@qry)
print(@qry)
 	
fetch next from managercur into @resourcevalue

end
close managercur
deallocate managercur
GO
/****** Object:  StoredProcedure [dbo].[site_Property_propertyupdate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[site_Property_propertyupdate]
	
	@title VARCHAR(150),
	@numberOfUnits VARCHAR(150),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@bidRequestAmount money,
	@minimumInsuranceAmount money,
	@description VARCHAR(MAX),
	@status int,
	@PropertyKey INT

AS
SET NOCOUNT ON

Update [Property] set  Title = @title, NumberOfUnits = @numberOfUnits, Address = @address, Address2 = @address2, City = @city, State = @state, Zip = @zip, BidRequestAmount = @bidRequestAmount,
	MinimumInsuranceAmount = @minimumInsuranceAmount, Description = @description, Status = @status
	where PropertyKey = @PropertyKey
GO
/****** Object:  StoredProcedure [dbo].[site_Property_SelectBidRequestFormanager]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_Property_SelectBidRequestFormanager] 50,1,'order by rs.Title desc',1009
CREATE PROCEDURE [dbo].[site_Property_SelectBidRequestFormanager]
@PageSize int,                           
@PageIndex int,                                                       
@Sort nvarchar(max),
@PropertyKey  nvarchar(max) 
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
  set @qrywhere = '
	inner  join  Property p  on  p.PropertyKey = rs.PropertyKey
	inner join  LookUp lp on lp.LookUpKey = rs.BidRequestStatus
  
  where (rs.PropertyKey= '+@PropertyKey+') and ModuleKey in (select M.Modulekey from Module M where M.Title = ''Bid Requests'') and (rs.BidRequestStatus != 600) '
  
  set @qrytotal =   'declare @total int  select  @total  = count(1) from [BidRequest] rs '+@qrywhere + '' 

  set @qry = '   select * from (  select rs.BidRequestKey,rs.Title,(SELECT CONVERT(varchar, rs.BidDueDate, 1)) As BidDueDate,
  (select count(1) from BidVendor where BidVendor.BidRequestKey = rs.BidRequestKey) as NoofBid,
 (SELECT CONVERT(varchar, rs.StartDate, 1)) As sstartddate,  lp.title as BidRequestStatus, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [BidRequest] as rs
   
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Property_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_Property_SelectIndexPaging 50,1,'','order by u.Title desc',0
CREATE PROCEDURE [dbo].[site_Property_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),
@Sort nvarchar(max),
@resourcekey int
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where ( (u.Title like  ''%'+ @Search +'%'') or (u.Address like ''%'+ @Search +'%'') 
  or (u.NumberOfUnits like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' ) ) and 
  ((u.propertykey in (select xp.propertykey from Property xp where xp.CompanyKey = (select Companykey from [Resource] xr where xr.ResourceKey = ' + Convert(varchar,@resourcekey) + ')
and (xp.PropertyKey in (select xpr.propertykey from PropertyResource xpr where xpr.ResourceKey = ' + Convert(varchar,@resourcekey) + ') or 
	' + Convert(varchar,@resourcekey) + ' in (select xgp.ResourceKey from GroupMember xgp where xgp.GroupKey in (select xg.groupkey from [Group] xg where xg.title = ''Administrator'')))))
	or (' + Convert(varchar,@resourcekey) + ' = 0))' 
  
  set @qrytotal =   'declare @total int  
  select  @total  = count(*) 
  from [Property] as u
   '+@qrywhere + ''

  set @qry = 'select * from (  
  select  u.PropertyKey as PropertyKey, u.Title as Title
  , (select (case when u.Address is null then '''' else u.Address + '','' + '' '' end) + (case when u.Address2 is null then '''' else u.Address2 + '','' + '' '' end) 
  + (case when u.City is null then '''' else u.City + '','' + '' ''end) + (case when u.State is null then '''' else u.State + '','' + '' '' end) 
  + (case when u.Zip is null then '''' else u.Zip  end)) as Address
,NumberOfUnits as NumberOfUnits, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum  
   from [Property] as u '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Property_SelectOneByPropertyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Property_SelectOneByPropertyKey]
	@PropertyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

--select Gp.GroupKey, * 

--From Property as ps 
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey 
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey
--where ps.PropertyKey = @PropertyKey

SELECT * FROM Property as pr  WHERE PropertyKey=@PropertyKey



			
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
print(@errorCode)

--[site_Property_SelectOneByPropertyKey] 1023, null
GO
/****** Object:  StoredProcedure [dbo].[site_Property_SelectworkorderFormanager]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [site_Property_SelectworkorderFormanager] 50,1,'order by rs.Title asc',2055
CREATE PROCEDURE [dbo].[site_Property_SelectworkorderFormanager]
@PageSize int,                           
@PageIndex int,                                                       
@Sort nvarchar(max),
@PropertyKey  nvarchar(max)	
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
  set @qrywhere = '
	inner  join  Property p  on  p.PropertyKey = rs.PropertyKey
	inner join  LookUp lp on lp.LookUpKey = rs.BidRequestStatus
  
  where (rs.PropertyKey= '+@PropertyKey+') and ModuleKey in (select M.Modulekey from Module M where M.Title = ''Work Orders'') and (rs.BidRequestStatus != 600)'
  
  set @qrytotal =   'declare @total int  select  @total  = count(1) from [BidRequest] rs '+@qrywhere + '' 

  set @qry = '   select * from (  select rs.BidRequestKey, p.title as Propertyname ,rs.Title,(SELECT CONVERT(varchar, rs.BidDueDate, 1)) As BidDueDate,
  (select count(1) from BidVendor where BidVendor.BidRequestKey = rs.BidRequestKey) as NoofBid,
 (SELECT CONVERT(varchar, rs.StartDate, 1)) As sstartddate,  lp.title as BidRequestStatus, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [BidRequest] as rs
   
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Property_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Property_Update]
	@PropertyKey INT,
	@companyKey INT,
	@title VARCHAR(150),
	@numberOfUnits int,
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@bidRequestAmount money,
	@minimumInsuranceAmount money,
	@description VARCHAR(MAX),
	@Latitude varchar(max),
	@Longitude varchar(max),
	@status INT,
	@errorCode  INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Property]
SET
	[CompanyKey] = @companyKey,
	[Title] = @title,
	[NumberOfUnits] = @numberOfUnits,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[BidRequestAmount] = @bidRequestAmount,
	[MinimumInsuranceAmount] = @minimumInsuranceAmount,
	[Description] = @description,
	Latitude=@Latitude,
	Longitude=@Longitude,

	[Status] = @status
WHERE [Property].[PropertyKey] = @PropertyKey

-- Get the Error Code for the statement just executed.

SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_PushNotification_Insert]
@ResourceKey int,
@RegistrationToken varchar(max),
@NotificationType varchar(50),
@NotificationBody nvarchar(max),
@ModuleKey int,
@ObjectKey int,
@ForResource int,
@NotificationKey int = 0,
@PushNotificationId int Output
AS
BEGIN
	declare @status int
	select @status = LookupKey from Lookup where Title = 'new' and LookUpTypeKey = (select LookUpTypeKey from LookUpType where Title = 'Email Status')
	Insert into PushNotification (PushNotificationResourceKey,RegistrationToken,Body,PushNotificationType,DateAdded,PushNotificationStatus,ModuleKey,ObjectKey,ForResource,AbNotificationKey)
	values(@ResourceKey,@RegistrationToken,@NotificationBody,@NotificationType,GETDATE(),@status,@ModuleKey,@ObjectKey,@ForResource,@NotificationKey)

	select @PushNotificationId = @@Identity
END
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_PushNotification_SelectAll]
AS 
BEGIN
	select 
	p.PushNotificationKey, p.PushNotificationResourceKey as ResourceKey, p.RegistrationToken, p.PushNotificationType, p.Body,
	p.DateAdded,p.DateSent,p.PushnotificationStatus,p.ErrorMessage,l.Title,p.ModuleKey,p.ObjectKey as Status
	from PushNotification p
	join LookUp l on l.LookUpKey = p.PushNotificationStatus
END
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_SelectById]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[site_PushNotification_SelectById]
@PushNotificationKey int
AS 
BEGIN
	select 
	p.PushNotificationKey, p.PushNotificationResourceKey as ResourceKey, p.RegistrationToken, p.PushNotificationType, p.Body,
	p.DateAdded,p.DateSent,p.PushnotificationStatus,p.ErrorMessage,p.ModuleKey,l.Title as Status,p.ForResource,p.ModuleKey,p.ObjectKey,
	(case when (p.ModuleKey = 100 or p.ModuleKey = 106) then (select top 1 Title from BidRequest where BidRequestKey = p.ObjectKey)
	when (p.ModuleKey = 300) then 'Membership' when (p.ModuleKey = 301) then 'Credit Card' when(p.ModuleKey = 302) then 'Insurance'
	when (p.ModuleKey = 705) then 'Registration' else '' end) as ObjectTitle,r.FirstName +' '+r.LastName as ByVendorName,
	(case when p.ModuleKey in(100,106) then 
	isnull((select top 1 BidVendorKey from BidVendor where VendorKey = (select top 1 CompanyKey from Resource where ResourceKey = p.PushNotificationResourceKey)),0) 
	else 0 end) as BidVendorKey,
	ISNULL(p.AbNotificationKey,0) as NotificationKey,
	(case when (ISNULL(p.AbNotificationKey,0) = 0 and p.PushNotificationType = 'BidReqStatus') then
	(select top 1 a.Id from ABNotification a where a.NotificationType = 'BidReqStatus' and a.ModuleKey = p.ModuleKey 
	and a.ObjectKey = p.ObjectKey and a.ByResource = p.PushNotificationResourceKey and a.ForResource = p.ForResource) else ISNULL(p.AbNotificationKey,0) end)
	as AbNotificationId,
	c.Name as ByCompanyName,m.Controller,
	(select top 1 UserKey from [User] where p.ForResource = ResourceKey) as ForUser,
	(case when(p.ModuleKey = 100 or p.ModuleKey = 106) then (select BidDueDate from BidRequest where p.ObjectKey = BidRequestKey)
	else '' end) as BidDueDate,
	(case when(p.ModuleKey = 100 or p.ModuleKey = 106) then (select RespondByDate from BidVendor where p.ObjectKey = BidRequestKey
	and VendorKey = (select CompanyKey from Resource where ResourceKey = p.ForResource))
	else '' end) as ResponseDueDate,
	(case when(p.ModuleKey = 300) 
		then (select top 1 EndDate from Membership where p.ObjectKey = MembershipKey and RenewalStatus != 0)
		when(p.ModuleKey = 301)
		then(select  CardExpiryMonth+'/'+CardExpiryYear from PaymentMethod where PaymentMethodKey = p.ObjectKey)
		when(p.ModuleKey = 302)
		then(select EndDate from Insurance where InsuranceKey = p.ObjectKey)
	else '' end) as ExpiryDate,
	(case when((p.ModuleKey = 100 or p.ModuleKey = 106) and p.PushNotificationType = 'BidVendorStatus')
	then (select BidVendorStatus from BidVendor where p.ObjectKey = BidRequestKey 
	and VendorKey = (select CompanyKey from Resource where ResourceKey = p.ForResource))
	else '0' end) as BidVendorStatusKey,
	(case when((p.ModuleKey = 100 or p.ModuleKey = 106) and p.PushNotificationType = 'BidVendorStatus')
	then (select Title from LookUp where
	LookupKey = (select BidVendorStatus from BidVendor where p.ObjectKey = BidRequestKey 
	and VendorKey = (select CompanyKey from Resource where ResourceKey = p.ForResource)))
	else '' end) as BidVendorStatus
	from PushNotification p
	join Resource r on r.ResourceKey = p.PushNotificationResourceKey
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = p.ModuleKey
	join LookUp l on l.LookUpKey = p.PushNotificationStatus
	where PushNotificationKey = @PushNotificationKey
END
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_SelectByResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[site_PushNotification_SelectByResourceKey]
@ResourceKey int
AS 
BEGIN
	select 
	p.PushNotificationKey, p.PushNotificationResourceKey as ResourceKey, p.RegistrationToken, p.PushNotificationType, p.Body,
	p.DateAdded,p.DateSent,p.PushnotificationStatus,p.ErrorMessage,l.Title as Status,p.ModuleKey,p.ObjectKey
	from PushNotification p
	join LookUp l on l.LookUpKey = p.PushNotificationStatus
	where PushNotificationResourceKey = @ResourceKey
END
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_SelectByType]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[site_PushNotification_SelectByType]
@ResourceKey int,
@NotificationType varchar(50)
AS 
BEGIN
	select 
	p.PushNotificationKey, p.PushNotificationResourceKey as ResourceKey, p.RegistrationToken, p.PushNotificationType, p.Body,
	p.DateAdded,p.DateSent,p.PushnotificationStatus,p.ErrorMessage,l.Title as Status,p.ModuleKey,p.ObjectKey
	from PushNotification p
	join LookUp l on l.LookUpKey = p.PushNotificationStatus
	where PushNotificationResourceKey = @ResourceKey and PushNotificationType = @NotificationType
END
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_SelectDevices]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[site_PushNotification_SelectDevices]
@ResourceKey int
As
Begin

	Select * from PushNotification p
	join UserRegistrationToken ur on ur.RegistrationToken = p.RegistrationToken 
	join tblUserSession us on us.PKID = ur.PKID
	where PushNotificationResourceKey = @ResourceKey and us.Active = 1 and us.ClientBrowser = 'Mobile App'
End
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_SelectOnlyNew]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[site_PushNotification_SelectOnlyNew]
@UserKey int = 0
AS 
BEGIN
declare @ResourceKey int
select @ResourceKey = ResourceKey from [User] where UserKey = @UserKey
	select 
	p.PushNotificationKey, p.PushNotificationResourceKey as ResourceKey, p.RegistrationToken, p.PushNotificationType, p.Body,
	p.DateAdded,p.DateSent,p.PushnotificationStatus,p.ErrorMessage,l.Title as Status,p.ForResource,p.ModuleKey,p.ObjectKey,
	(case when (p.ModuleKey = 100 or p.ModuleKey = 106) then (select top 1 Title from BidRequest where BidRequestKey = p.ObjectKey)
	when (p.ModuleKey = 300) then 'Membership' when (p.ModuleKey = 301) then 'Credit Card' when(p.ModuleKey = 302) then 'Insurance'
	when (p.ModuleKey = 705) then 'Registration' else '' end) as ObjectTitle,r.FirstName +' '+r.LastName as ByVendorName,
	(case when p.ModuleKey in(100,106) then 
	isnull((select top 1 BidVendorKey from BidVendor where VendorKey = (select top 1 CompanyKey from Resource where ResourceKey = p.PushNotificationResourceKey)),0) 
	else 0 end) as BidVendorKey,
	ISNULL(p.AbNotificationKey,0) as NotificationKey,
	(case when (ISNULL(p.AbNotificationKey,0) = 0 and p.PushNotificationType = 'BidReqStatus') then
	(select top 1 a.Id from ABNotification a where a.NotificationType = 'BidReqStatus' and a.ModuleKey = p.ModuleKey 
	and a.ObjectKey = p.ObjectKey and a.ByResource = p.PushNotificationResourceKey and a.ForResource = p.ForResource) else ISNULL(p.AbNotificationKey,0) end)
	as AbNotificationId,
	(case when(p.ModuleKey = 100 or p.ModuleKey = 106) then (select BidDueDate from BidRequest where p.ObjectKey = BidRequestKey)
	else '' end) as BidDueDate,
	(case when(p.ModuleKey = 100 or p.ModuleKey = 106) then (select RespondByDate from BidVendor where p.ObjectKey = BidRequestKey
	and VendorKey = (select CompanyKey from Resource where ResourceKey = p.ForResource))
	else '' end) as ResponseDueDate,
	(case when(p.ModuleKey = 300) 
		then (select top 1 EndDate from Membership where p.ObjectKey = MembershipKey and RenewalStatus != 0)
		when(p.ModuleKey = 301)
		then(select  CardExpiryMonth+'/'+CardExpiryYear from PaymentMethod where PaymentMethodKey = p.ObjectKey)
		when(p.ModuleKey = 302)
		then(select EndDate from Insurance where InsuranceKey = p.ObjectKey)
	else '' end) as ExpiryDate,
	(case when((p.ModuleKey = 100 or p.ModuleKey = 106) and p.PushNotificationType = 'BidVendorStatus')
	then (select BidVendorStatus from BidVendor where p.ObjectKey = BidRequestKey 
	and VendorKey = (select CompanyKey from Resource where ResourceKey = p.ForResource))
	else '0' end) as BidVendorStatusKey,
	(case when((p.ModuleKey = 100 or p.ModuleKey = 106) and p.PushNotificationType = 'BidVendorStatus')
	then (select Title from LookUp where
	LookupKey = (select BidVendorStatus from BidVendor where p.ObjectKey = BidRequestKey 
	and VendorKey = (select CompanyKey from Resource where ResourceKey = p.ForResource)))
	else '' end) as BidVendorStatus,
	c.Name as ByCompanyName,m.Controller,
	(select top 1 UserKey from [User] where p.ForResource = ResourceKey) as ForUser
	from PushNotification p
	join Resource r on r.ResourceKey = p.PushNotificationResourceKey
		join Company c on c.CompanyKey = r.CompanyKey
		join Module m on m.ModuleKey = p.ModuleKey
	join LookUp l on l.LookUpKey = p.PushNotificationStatus
	where p.PushNotificationStatus = 500 and (p.ForResource = @ResourceKey or @UserKey = 0)
END
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_StatusUpdate]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[site_PushNotification_StatusUpdate]
@PushNotificationKey int,
@Status varchar(50),
@errorCode int
As
Begin
	declare @st int
	select @st = LookUpKey from LookUp where Title = @Status and LookUpTypeKey = (select top 1 LookUpTypeKey from LookUpType where Title = 'Email Status')

	if(@st > 0)
	begin
		update PushNotification set PushNotificationStatus = @st where PushNotificationKey = @PushNotificationKey
		select @errorCode = @@ERROR
	end
	else
	begin
		set @errorCode = 1
	end
End
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotification_UpdateStatus]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[site_PushNotification_UpdateStatus]
@PushNotificationKey int,
@MulticastId nvarchar(200),
@MessageId nvarchar(200),
@errorText nvarchar(500),
@errorCode int OUTPUT
As
Begin
	if(@errorText = '' and @MessageId != '0')
	begin
		update PushNotification set DateSent = GETDATE(),PushNotificationStatus = 502,MulticastId = @MulticastId,MessageId = @MessageId
		where PushNotificationKey = @PushNotificationKey
		select @errorCode = @@ERROR
	end
	else
	begin
		update PushNotification set DateSent = GETDATE(),PushNotificationStatus = 501,MulticastId = 0,MessageId = 0,ErrorMessage = @errorText
		where PushNotificationKey = @PushNotificationKey
		select @errorCode = @@ERROR
	end
	
End
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotificationTemplate_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create PROCEDURE [dbo].[site_PushNotificationTemplate_Delete]
	 
	@PushNotificaionTemplateKey int,
	@errorCode int output
AS
SET NOCOUNT ON
begin
	delete PushNotificationTemplate  where PushNotificaionTemplateKey  = @PushNotificaionTemplateKey
	
	
	--delete GroupMember where ResourceKey = @ResourceKey

	select @errorCode  = @@ERROR

	End
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotificationTemplate_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_Property_Insert 15,'shyam',25,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'desc',1,' Tasksheet  23-04-2020.docx,Tasksheet  24-04-2020.docx,Tasksheet  30-04-2020.docx','21811,21821,22471',1,20
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_PushNotificationTemplate_Insert]
	 
	
	
	@PushNotificationTitle varchar(200), 
	@PushNotificationType varchar(max),
	@NTSubject varchar(max), 
	@Body varchar(max),
	@Notificationvalue int output
	
AS
begin  
    Insert into PushNotificationTemplate(PushNotificationTitle,PushNotificationType,NTSubject,Body,DateAdded)values(@PushNotificationTitle,@PushNotificationType,@NTSubject,@Body,GETDATE ())
	 
	select @Notificationvalue = @@IDENTITY
end


--[USP_EmailTemplet_Insert] 'test','test1','test2'
GO
/****** Object:  StoredProcedure [dbo].[site_PushNotificationTemplate_update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_PushNotificationTemplate_update]
	
    @PushNotificaionTemplateKey int,
	@PushNotificationTitle varchar(200), 
	@PushNotificationType varchar(max), 
	@NTSubject varchar(max),
	@Body varchar(max)
AS
SET NOCOUNT ON
begin
Update PushNotificationTemplate set  PushNotificationTitle =@PushNotificationTitle,NTSubject=@NTSubject, PushNotificationType=@PushNotificationType, Body = @Body, DateAdded = GETDATE ()
	where PushNotificaionTemplateKey =@PushNotificaionTemplateKey

	End
GO
/****** Object:  StoredProcedure [dbo].[site_RefundList_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




-- [site_RefundList_SelectIndexPaging] 50,1,'','order by Em.InvoiceKey desc'
CREATE PROCEDURE [dbo].[site_RefundList_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),            
@Sort nvarchar(max)
--@EmailTite nvarchar(max)
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    

  begin
	set @qrywhere = 'where ((Em.InvoiceKey like  ''%'+ @Search +'%'') or (Em.ReferenceNumber like ''%'+ @Search +'%'')'
	end
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [RefundRequest] as Em 
   '+@qrywhere + ''

  set @qry = 'select * from (SELECT Em.RefundRequestKey ,Em.InvoiceKey,Em.VendorKey,Em.ReferenceNumber,Em.TransactionDate,Em.RefundAmount,Em.LastModificationTime,Em.Reason,Em.Stripe_TokenID,Em.MarkAsRefund
   row_number() over('+@Sort+') as  rownum,@total  as TotalRecord  FROM RefundRequest as Em 
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)   
END
GO
/****** Object:  StoredProcedure [dbo].[Site_RefundRequest_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure  [dbo].[Site_RefundRequest_Insert]  
@Vendorkey int,  
@InvoiceKey int,  
@ResourceKey int,
@date datetime,  
@Amount Nvarchar(max),  
@Reason nvarchar(max),
@RefrenceNumber nvarchar(max),
@StripeTokenID nvarchar(max),  
@errorCode int Output  
as  
begin  
insert  into  RefundRequest(InvoiceKey, VendorKey, AddedByResourceKey,TransactionDate,RefundAmount,LastModificationTime,Reason,Stripe_TokenID,MarkAsRefund,ReferenceNumber)  
values(@InvoiceKey,@Vendorkey,@ResourceKey,@date,@Amount,Getdate(),@Reason,@StripeTokenID,0,@RefrenceNumber)  
end   
select @errorCode =@@Error
GO
/****** Object:  StoredProcedure [dbo].[Site_RefundRequest_RefundPayment]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  Procedure  [dbo].[Site_RefundRequest_RefundPayment]  
@Reason nvarchar(max),    
@StripeTokenID nvarchar(max),    
@InvoiceKey int,            
@errorcode  int output                    
as        
begin  
update  RefundRequest   
set  MarkAsRefund = 1 , Stripe_TokenID = @StripeTokenID  
where  Invoicekey = @Invoicekey   
  
select @errorcode =@@ERROR  
end
GO
/****** Object:  StoredProcedure [dbo].[site_RefundREquest_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_RefundREquest_SelectIndexPaging 50,1,'','order by n.InvoiceKey asc'         
CREATE PROCEDURE [dbo].[site_RefundREquest_SelectIndexPaging]            
@PageSize int,                                       
@PageIndex int,                                       
@Search nvarchar(max),            
@Sort nvarchar(max)        
AS            
BEGIN            
  declare @qrywhere varchar(max)                                
  declare @qrytotal varchar(max)                                 
  declare @qry varchar(max)                
                
  set @qrywhere =    
  'where ( (n.ReferenceNumber like  ''%'+ @Search +'%'') or (n.InvoiceKey like ''%'+ @Search +'%'')or (ln.Description like ''%'+ @Search +'%'') or(r.FirstName like  ''%'+ @Search +'%'') or (r.LastName like ''%'+ @Search +'%'') or (r.FirstName + '' '' + r.
LastName like ''%'+@Search+'%'' or r.LastName + '' '' + r.FirstName like ''%'+@Search+'%'')     
  or (n.vendorkey like ''%'+ @Search +'%'')         
  or ( '''+@Search+''' = '''' ))'         
              
  set @qrytotal =   'declare @total int              
  select  @total  = count(*)             
  from [RefundRequest] as n          
  inner join Resource r on  r.ResourceKey = n.AddedByResourceKey     
  left join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey     
   '+@qrywhere + ''            
            
  set @qry = 'select * from (              
  select n.vendorkey,(select convert(varchar, n.LastModificationTime, 101))  as Date,n.InvoiceKey,(select(r.firstname+'' ''+r.lastname)) as vendorname, n.MarkAsRefund,ln.Description,n.Stripe_TokenID,n.Reason,n.ReferenceNumber,n.RefundAmount As amount, @total  as TotalRecords,        
      
   row_number() over('+@Sort+') as  rownum               
   from [RefundRequest] as n         
   inner join Resource r on  r.ResourceKey = n.AddedByResourceKey  
    left join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey      
   '+@qrywhere+'            
              
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)             
      print(@qrytotal + @qry)                         
      exec( @qrytotal + @qry)                      
END
GO
/****** Object:  StoredProcedure [dbo].[site_RefundREquest_SelectIndexPaging_Copy]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- site_RefundREquest_SelectIndexPaging_Copy 50,1,'','order by n.lastmodificationtime asc',1062      
CREATE PROCEDURE [dbo].[site_RefundREquest_SelectIndexPaging_Copy]            
@PageSize int,                                       
@PageIndex int,                                       
@Search nvarchar(max),            
@Sort nvarchar(max),
@ResourceKey int = 0
AS            
BEGIN            
  declare @qrywhere varchar(max)                                
  declare @qrytotal varchar(max)                                 
  declare @qry varchar(max)                
                
  set @qrywhere =    
  'where ( (n.ReferenceNumber like  ''%'+ @Search +'%'') or (n.InvoiceKey like ''%'+ @Search +'%'')or (ln.Description like ''%'+ @Search +'%'') or(r.FirstName like  ''%'+ @Search +'%'') or (r.LastName like ''%'+ @Search +'%'') or (r.FirstName + '' '' + r.
LastName like ''%'+@Search+'%'' or r.LastName + '' '' + r.FirstName like ''%'+@Search+'%'')     
  or (n.vendorkey like ''%'+ @Search +'%'')         
  or ( '''+@Search+''' = '''' ))'         
              
  set @qrytotal =   'declare @total int              
  select  @total  = count(*)             
  from [RefundRequest] as n          
  inner join Resource r on  r.ResourceKey = n.AddedByResourceKey     
  left join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey     
   '+@qrywhere + ''            
            
  set @qry = 'select * from (              
  select n.vendorkey,(select convert(varchar, n.TransactionDate, 101))  as Date,n.InvoiceKey,(select(r.firstname+'' ''+r.lastname)) as vendorname, n.MarkAsRefund,ln.Description,n.Stripe_TokenID,n.Reason,n.ReferenceNumber,n.RefundAmount As amount, @total  as TotalRecords,        
      (select top 1(select (CASE WHEN (ab.ModuleKey = 200 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) 
	  THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = n.InvoiceKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS priority,
	  (select top 1 (CASE WHEN (ab.ModuleKey = 200 and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.Id) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = n.InvoiceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = n.InvoiceKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationId,

(select top 1 (CASE WHEN (ab.ModuleKey = 200 and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.NotificationType) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = n.InvoiceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = n.InvoiceKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationType,

   row_number() over('+@Sort+') as  rownum               
   from [RefundRequest] as n         
   inner join Resource r on  r.ResourceKey = n.AddedByResourceKey  
    left join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey      
   '+@qrywhere+'            
              
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)             
      print(@qrytotal + @qry)                         
      exec( @qrytotal + @qry)                      
END
GO
/****** Object:  StoredProcedure [dbo].[site_RefundREquest_SelectIndexPagingPriority]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- site_RefundREquest_SelectIndexPagingPriority 50,1,'','order by amount asc',1062       
CREATE PROCEDURE [dbo].[site_RefundREquest_SelectIndexPagingPriority]            
@PageSize int,                                       
@PageIndex int,                                       
@Search nvarchar(max),            
@Sort nvarchar(max),
@ResourceKey int
AS            
BEGIN            
  declare @qrywhere varchar(max)                                
  declare @qrytotal varchar(max)                                 
  declare @qry varchar(max)                
                
  set @qrywhere =    
  'where ( (n.ReferenceNumber like  ''%'+ @Search +'%'') or (n.InvoiceKey like ''%'+ @Search +'%'')or (ln.Description like ''%'+ @Search +'%'') or(r.FirstName like  ''%'+ @Search +'%'') or (r.LastName like ''%'+ @Search +'%'') or (r.FirstName + '' '' + r.
LastName like ''%'+@Search+'%'' or r.LastName + '' '' + r.FirstName like ''%'+@Search+'%'')     
  or (n.vendorkey like ''%'+ @Search +'%'')         
  or ( '''+@Search+''' = '''' ))'         
              
  set @qrytotal =   'declare @total int              
  select  @total  = count(*)             
  from [RefundRequest] as n          
  inner join Resource r on  r.ResourceKey = n.AddedByResourceKey     
  left join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey     
  
   '+@qrywhere + ''            
            
  set @qry = ';with cusTable as(              
  select Distinct(n.InvoiceKey),n.vendorkey,(select convert(varchar, n.LastModificationTime, 101))  as Date,(select(r.firstname+'' ''+r.lastname)) as vendorname, 
  n.MarkAsRefund,ln.Description,n.Stripe_TokenID,n.Reason,n.ReferenceNumber,n.RefundAmount As amount, @total  as TotalRecords,        
      (select (CASE WHEN (ab.ModuleKey = 200 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 1 ELSE 0 END)) AS priority,
		(CASE WHEN (ab.ModuleKey = 200 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 
		(select STUFF((select '','' + Convert(nvarchar(max), ab1.Id) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and vs.ObjectKey = n.InvoiceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END)as NotificationId,
		(CASE WHEN (ab.ModuleKey = 200 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 
         (select STUFF((select '','' + Convert(nvarchar(max), ab1.NotificationType) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and vs.ObjectKey = n.InvoiceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE null END) as NotificationType      
   from [RefundRequest] as n         
   inner join Resource r on  r.ResourceKey = n.AddedByResourceKey  
    left join  Invoiceline ln on ln.InvoiceKey = n.InvoiceKey      
	LEFT Outer Join ABNotification ab on ab.ObjectKey = n.InvoiceKey and ab.status = 900 and ab.ForResource = '+Convert(varchar,@ResourceKey)+'
   '+@qrywhere+'            
              
  ) , q2 as( select * from(select *,ROW_NUMBER() over (partition by priority '+@Sort+') as rownum1 from cusTable)i)
  select * from (select *,ROW_NUMBER() over (order by priority desc) as rownum from q2)k where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)             
      print(@qrytotal + @qry)                         
      exec( @qrytotal + @qry)                      
END
GO
/****** Object:  StoredProcedure [dbo].[site_Registration_SelectOneByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Registration_SelectOneByCompanyKey]  
 @CompanyKey INT,  
 @errorCode INT OUTPUT  
AS  
SET NOCOUNT ON  
  
select c.*,s.Title,r.Email,r.FirstName,r.LastName,r.ResourceKey from Company as c    
left join Resource as r on r.CompanyKey = c.CompanyKey  
left join State as s on s.StateKey = c.State  
where c.CompanyKey = @CompanyKey  
  
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Report_CompanyGet]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[site_Report_CompanyGet]
as 
begin
select distinct CompanyKey,(select Name from company  as c where  c.CompanyKey = p.CompanyKey   and CompanyTypeKey = 1001) as CompanyName from property  as  p 
end
GO
/****** Object:  StoredProcedure [dbo].[site_Report_ManagerWiseData_GetAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[site_Report_ManagerWiseData_GetAll]
@companykey int
as 
begin

select distinct (r.FirstName + r.LastName) as Manager,resourcekey as ManagerKey   from resource as r where CompanyKey in  (select CompanyKey from Company where CompanyKey = @companykey) 

end
GO
/****** Object:  StoredProcedure [dbo].[site_Report_PropertyWiseData_GetAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[site_Report_PropertyWiseData_GetAll]
@companykey int
as 
begin
select title,PropertyKey from property where CompanyKey in (select CompanyKey from Company where CompanyKey = @companykey)
end
GO
/****** Object:  StoredProcedure [dbo].[site_Report_VendorCompany_GetAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- site_Report_VendorCompany_GetAll 0
CREATE procedure [dbo].[site_Report_VendorCompany_GetAll]
@companykey int
as 
begin
select distinct vendorkey,(select Name from company  as c where  c.CompanyKey = cv.vendorkey   and CompanyTypeKey in (1002, 1003)) as VendorName from companyvendor as cv where CompanyKey = case when @CompanyKey = 0 then CompanyKey else @companykey end order by VendorName  asc
end
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_AStaffDirectoryInsert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[site_Resource_AStaffDirectoryInsert]
	 
	@CompanyKey int, 
	@FirstName varchar(50), 
	@LastName varchar(50), 
	@Email varchar(150), 
	@Email2 varchar(150),
	@CellPhone varchar(50),
	@Work varchar(50),
	@Work2 varchar(50),
	@Fax varchar(50),
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(50),
	@Status int,
	@Zip varchar(11),
	@PrimaryContact bit,
	@Description varchar(50),
	@Username varchar(150),
	@Password varchar(150),
	
	@FileName varchar(150),
	@lst varchar(150),
	@FileSize int,
	@ResourceValue INT OUTPUT,
	@UserKey INT OUTPUT

AS
SET NOCOUNT ON

declare @ResourceTypeKeyvalue int 
select @ResourceTypeKeyvalue =  CompanyTypeKey from company where CompanyKey = @CompanyKey


Insert into Resource (CompanyKey, ResourceTypeKey, FirstName, LastName, Email, Email2, CellPhone,
	Work, Work2, Fax, Address, Address2, City, State, Zip, PrimaryContact, Description, DateAdded, 
	LastModificationTime, Status) 
	values 
	(@CompanyKey, @lst, @FirstName, @LastName, @Email, @Email2, @CellPhone, 
	@Work, @Work2, @Fax, @Address, @Address2, @City, @State, @Zip, @PrimaryContact, @Description, getdate(), 
	CONVERT(VARCHAR(8),GETDATE(),108), @Status)
	
	   declare @ResourceKey int = @@identity 	
       Insert into [user] (ResourceKey, Username, Password, 
	   DateAdded, LastModificationTime,FirstTimeAccess, Status) values (@ResourceKey, @Username, @Password, GetDate(),GETDATE(),1, (case when @Status = 2 then 101 else @Status end))
	   declare @UserValue int = @@identity



	if(@FileName != '')
	begin
	   declare @modulekey int

	   select @modulekey  = count(ModuleKey) from Module Where Controller = 'StaffDirectory' and Action = 'StaffDirectoryAdd'

	   if(@modulekey > 0)
	   begin 
			select @modulekey  = ModuleKey from Module Where Controller = 'StaffDirectory' and Action = 'StaffDirectoryAdd'
			insert into document (ModuleKey, ObjectKey, FileName, FileSize, LastModificationTime) values (@modulekey, @ResourceKey, @FileName, @FileSize, getdate())
	   end
	   else 
	   begin	   
	        select @modulekey  = max(ModuleKey) from Module
	        insert into Module (ModuleKey,title,Controller,[Action])
            values (@modulekey + 1,'StaffDirectoryAdd','StaffDirectory','StaffDirectoryAdd')

			insert into document (ModuleKey, ObjectKey, FileName, FileSize, LastModificationTime) values (@modulekey, @ResourceKey, @FileName, @FileSize, getdate())
	      
	   end
	end
        

select @ResourceValue = @@IDENTITY
select @UserKey = @UserValue
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_AStaffEdit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE procedure [dbo].[site_Resource_AStaffEdit]
	 
	@FirstName varchar(50), 
	@LastName varchar(50), 
	@Email varchar(150), 
	@Email2 varchar(150),
	@CellPhone varchar(50),
	@Work varchar(50),
	@Work2 varchar(50),
	@Fax varchar(50),
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(50),
	@Status int,
	@Zip varchar(11),
	@PrimaryContact bit,
	@Description varchar(50),
    @lst varchar(150),
	@ResourceKey INT

AS
SET NOCOUNT ON

Update [Resource] set ResourceTypeKey = @lst, FirstName = @FirstName, LastName = @LastName, Email = @Email, Email2 = @Email2, CellPhone = @CellPhone, Work = @Work, Work2 = @Work2, Fax = @Fax,
	Address = @Address, Address2 = @Address2, City = @City, State = @State, Status = (case when @Status = 2 then 101 else @Status end), Zip = @Zip, PrimaryContact = @PrimaryContact, Description = @Description 
	where ResourceKey = @ResourceKey

	update [User] set Username = @Email where ResourceKey = @ResourceKey
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_CheckDuplicatedEmail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




CREATE PROCEDURE [dbo].[site_Resource_CheckDuplicatedEmail]
	 
	@Email varchar(150),
	@Status int OUTPUT

AS
SET NOCOUNT ON

	if not exists (Select * from [Resource] where Email = @Email)
		begin
		SET @Status = 1
		end
	else
		begin
		SET @Status = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_CheckDuplicatedEmail_Registration]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
  
  
  
--site_Resource_CheckDuplicatedEmail_Registration 'suraj@avyakinfoways.com',5  
CREATE PROCEDURE [dbo].[site_Resource_CheckDuplicatedEmail_Registration]  
 @ResourceKey int = 0,  
 @Email varchar(150),  
 @Status int OUTPUT  
AS  
SET NOCOUNT ON  
  
if(@ResourceKey != 0)  
Begin  
 if not exists (Select * from Resource where Email = @Email except select * from Resource where ResourceKey = @ResourceKey)  
  begin  
  SET @Status = 1  
  end  
 else  
  begin  
  SET @Status = 0  
  end  
End  
Else   
Begin  
 If not exists (Select * from Resource  r 
 inner  join Company c on  c.CompanyKey = r.CompanyKey 
 where r.Email = @Email and c.Status != 104)  
 Begin  
  SET @Status = 1  
 end  
 else  
 begin  
  SET @Status = 0  
 end  
End  
----- Commented By Roshan  
 --if not exists (select * from Resource as r inner join LookUp as l on l.LookUpKey = r.ResourceTypeKey where r.Email = @Email and l.Title =  'Vendor')  
 -- begin  
 -- SET @Status = 1  
 -- end  
 --else  
 -- begin  
 -- SET @Status = 0  
 -- end  
---------   
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_CompanyManagementStaffInsert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_Resource_CompanyManagementStaffInsert]
	 
	@CompanyKey int, 
	@FirstName varchar(50), 
	@LastName varchar(50), 
	@Email varchar(150), 
	@Email2 varchar(150), 
	
	@CellPhone varchar(50),
	@Work varchar(50),
	@Work2 varchar(50),
	@Fax varchar(50),
	@Address varchar(100),
	@Address2 varchar(100),
	
	@City varchar(50), 
	@State varchar(50),
	@Status int,
	@Zip varchar(11),
	@PrimaryContact bit,
	@Description varchar(500),
	@Username varchar(50),
	@Password varchar(100),
	@Filename varchar(500),
	@Filesize varchar(50),
	@GroupId varchar(150), 
	@ResourceValue INT OUTPUT

AS
SET NOCOUNT ON

declare @ResourceTypeKeyvalue int 
select @ResourceTypeKeyvalue =  CompanyTypeKey from company where CompanyKey = @CompanyKey


Insert into Resource (CompanyKey, ResourceTypeKey, FirstName, LastName, Email,Email2, CellPhone,
	Work,Work2,  Fax, Address,Address2, City, State, Zip, PrimaryContact, Description, DateAdded, 
	LastModificationTime, Status) 
	values 
	(@CompanyKey, @ResourceTypeKeyvalue, @FirstName, @LastName, @Email, @Email2,  @CellPhone, 
	@Work,@Work2, @Fax, @Address, @Address2, @City, (case when @State = '0' then null else @State end), @Zip, @PrimaryContact, @Description, getdate(), 
	CONVERT(VARCHAR(8),GETDATE(),108), (case when @Status = 2 then 101 else @Status end))
	
	   declare @ResourceKey int = @@identity 	
	   if(@ResourceKey is null)
	   begin
		set @ResourceKey = SCOPE_IDENTITY()
	   end
	   if(@ResourceKey is null)
	   begin
			select top 1 @ResourceKey = r.ResourceKey 
			from Resource r 
			where r.CompanyKey = @CompanyKey and r.ResourceTypeKey = @ResourceTypeKeyvalue and r.Email = @Email and convert(date,r.DateAdded)= convert(date,GETDATE()) 
			order by r.ResourceKey desc
	   end

insert into [User] (ResourceKey,Username,Password,FirstTimeAccess,DateAdded,LastModificationTime,Status)
values(@ResourceKey,@Username,@Password,1,GETDATE(),GETDATE(),@Status)       


	if(isnull(@PrimaryContact,0)=1 )
	begin
		update Resource set PrimaryContact=0 where CompanyKey = @CompanyKey and ResourceKey <> @ResourceKey
	end


declare Managercur cursor for    
select Item from dbo.SplitString(@GroupId,',')     
open Managercur    
declare @groupidal as varchar(150) 

fetch next from Managercur into @groupidal    
while @@FETCH_STATUS = 0    
begin  
  
declare @PropertyTypeKeyvalue int 
select @PropertyTypeKeyvalue  =  CompanyTypeKey from company where CompanyKey = @CompanyKey


Insert into GroupMember(GroupKey,ResourceKey) 
	values  ((select top 1 g.GroupKey from [Group] g where g.Title = ltrim(rtrim(@groupidal))), @ResourceKey)
	
	 fetch next from Managercur into @groupidal    
end    
close Managercur    
deallocate Managercur   


select @ResourceValue = @ResourceKey
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--USP_Resource_Delete 1006,0
CREATE PROCEDURE [dbo].[site_Resource_Delete]
	@ResourceKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON
delete from [user] where ResourceKey = @ResourceKey
DELETE FROM Resource WHERE ResourceKey = @ResourceKey



select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_ForgotPasswordCheckEmail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- site_Resource_ForgotPasswordCheckEmail 'dodiyajay185@gmail.com' 0
CREATE PROCEDURE [dbo].[site_Resource_ForgotPasswordCheckEmail]
	 
	@Email varchar(150)
	--@Status int OUTPUT

AS
SET NOCOUNT ON

	
		Select Top 1 us.UserKey from [User] as us inner join resource as rs on us.ResourceKey = rs.ResourceKey Where rs.Email = @Email
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_GetDataviewGroupCheckbox]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






CREATE PROCEDURE [dbo].[site_Resource_GetDataviewGroupCheckbox]
	@resourceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

select Groupkey from  GroupMember  where  ResourceKey =  @resourceKey  
		
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_Resource_Insert]
	 
	@CompanyKey int, 

	@FirstName varchar(50), 
	@LastName varchar(50), 
	@Title varchar(150), 
	@Email varchar(150), 
	@Email2 varchar(150),
	@CellPhone varchar(50),
	@HomePhone varchar(50),
	@HomePhone2 varchar(50),
	@Work varchar(50),
	@Work2 varchar(50),
	@Fax varchar(50),
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(50),
	@Zip varchar(11),
	@PrimaryContact bit,
	@Description varchar(50),
	@Status int,
	@Username varchar(150),
	@Password varchar(150), 
    @AccountLocked bit, 
	@errorCode INT OUTPUT

AS
SET NOCOUNT ON

declare @ResourceTypeKeyvalue int 
select @ResourceTypeKeyvalue =  lookupKey from lookup where Title = 'Administration'

Insert into Resource (CompanyKey, ResourceTypeKey, FirstName, LastName, Title, Email, Email2, CellPhone, HomePhone,
	HomePhone2, Work, Work2, Fax, Address, Address2, City, State, Zip, PrimaryContact, Description, DateAdded, 
	LastModificationTime, Status) 
	values 
	(@CompanyKey, @ResourceTypeKeyvalue, @FirstName, @LastName, @Title, @Email, @Email2, @CellPhone, @HomePhone, 
	@HomePhone2, @Work, @Work2, @Fax, @Address, @Address2, @City, @State, @Zip, @PrimaryContact, @Description, getdate(), 
	CONVERT(VARCHAR(8),GETDATE(),108), @Status)
	
	declare @ResourceKey int = @@identity 

 Insert into [user] (ResourceKey, Username, Password, AccountLocked, 
	DateAdded, LastModificationTime, status,FirstTimeAccess) values (@ResourceKey, @Username, @Password, @AccountLocked, GetDate(),GETDATE(), @status,1)
-- Get the Error Code for the statement just executed.

select  @errorCode = @@Error
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_SaveProfilePassword]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
-- site_Resource_SaveProfilePassword 1093,'123456','123456',''
CREATE PROCEDURE [dbo].[site_Resource_SaveProfilePassword]
	@ResourceKey INT,
	@OldPassword VARCHAR(150),
	@NewPassword VARCHAR(150),
	@errorCode  nvarchar(max) OUTPUT
AS
SET NOCOUNT ON

SELECT @errorCode = ''

if((select count(r.ResourceKey) from Resource r inner join [User] u on r.ResourceKey = u.ResourceKey
where r.ResourceKey = @ResourceKey and u.Password = @OldPassword ) > 0 )
begin
	update [user] set Password = @NewPassword
	where ResourceKey = @ResourceKey

	select @errorCode = 'Success'
end
else
begin
	select @errorCode = 'Old password is incorrect.'
end

SELECT @errorCode = convert(nvarchar,@errorCode) --+ convert(nvarchar,@@ERROR)
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- [site_Resource_SelectIndexPaging] 50,1,'','order by FirstName desc','15'
CREATE PROCEDURE [dbo].[site_Resource_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@CompanyKey  nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
  set @qrywhere = 'where  (CompanyKey= '+@CompanyKey+') and ((FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (FirstName + '' '' + LastName like ''%'+@Search+'%'' or LastName + '' '' + FirstName like ''%'+@Search+'%'') or (CellPhone like ''%'+ @Search +'%'')  or (Email like ''%'+ @Search +'%'') 
or ( '''+@Search+''' = '''' )) and  (ResourceTypeKey = 1100)'
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Resource] '+@qrywhere + '' 

  set @qry = '   select * from (  select rs.FirstName as FirstName,rs.ResourceKey as ResourceKey,rs.LastName as LastName,rs.CellPhone as Phone,rs.Email as Email,
   rs.Status as Status, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [Resource] as rs
   
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_SelectIndexPaging_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- [site_Resource_SelectIndexPaging_New] 50,1,'','pending','order by FirstName desc','15'
CREATE PROCEDURE [dbo].[site_Resource_SelectIndexPaging_New]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),   
@Status nvarchar(20),
@Sort nvarchar(max),
@CompanyKey  nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
  declare @st varchar(10)
  declare @stVal varchar(10)

  if(@Status = '')
  Begin
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
  set @qrywhere = 'where  (CompanyKey= '+@CompanyKey+') and ((FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (FirstName + '' '' + LastName like ''%'+@Search+'%'' or LastName + '' '' + FirstName like ''%'+@Search+'%'') or (CellPhone like ''%'+ @Search +'%'')  or (Email like ''%'+ @Search +'%'') 
or ( '''+@Search+''' = '''' )) and  (ResourceTypeKey = 1100)'
  End
  Else
  Begin
	select @st = LookupKey from Lookup where Title = @Status and LookupTypeKey  = 1
	select @stVal = Value from Lookup where Title = @Status and LookupTypeKey  = 1
	set @qrywhere = 'where  (CompanyKey= '+@CompanyKey+') and ((FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (FirstName + '' '' + LastName like ''%'+@Search+'%'' or LastName + '' '' + FirstName like ''%'+@Search+'%'') or (CellPhone like ''%'+ @Search +'%'')  or (Email like ''%'+ @Search +'%'') 
	or ( '''+@Search+''' = '''' )) and  (ResourceTypeKey = 1100) and (rs.Status = '+@st+' or rs.Status = '+@stVal+')'
  End
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Resource] as rs '+@qrywhere + '' 

  set @qry = '   select * from (  select rs.FirstName as FirstName,rs.ResourceKey as ResourceKey,rs.LastName as LastName,rs.CellPhone as Phone,rs.Email as Email,
   rs.Status as Status, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [Resource] as rs
   
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_SelectIndexPagingFormanager]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_Resource_SelectIndexPagingFormanager] 50,1,'','order by FirstName desc',3216
CREATE PROCEDURE [dbo].[site_Resource_SelectIndexPagingFormanager]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@CompanyKey  nvarchar(max) 
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
  set @qrywhere = 'where (CompanyKey= '+@CompanyKey+')  and ((FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (FirstName + '' '' + LastName like ''%'+@Search+'%'' or LastName + '' '' + FirstName like ''%'+@Search+'%'') or (CellPhone like ''%'+ @Search +'%'')  or (Email like ''%'+ @Search +'%'') 
   or ( '''+@Search+''' = '''' ))'
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Resource] '+@qrywhere + '' 

  set @qry = '   select * from (  select rs.FirstName as FirstName,rs.ResourceKey as ResourceKey,rs.LastName as LastName,rs.CellPhone as Phone,rs.Email as Email,
   rs.Status as Status, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [Resource] as rs
   
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_SelectIndexPagingFormanager_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [site_Resource_SelectIndexPagingFormanager_New] 50,1,'','approved','order by FirstName desc',3216
CREATE PROCEDURE [dbo].[site_Resource_SelectIndexPagingFormanager_New]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),
@Status nvarchar(20),
@Sort nvarchar(max),
@CompanyKey  nvarchar(max) 
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
  declare @st varchar(10)
  declare @stVal varchar(10)
  if(@Status = '')
  Begin
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
  set @qrywhere = 'where (CompanyKey= '+@CompanyKey+')  and ((FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (FirstName + '' '' + LastName like ''%'+@Search+'%'' or LastName + '' '' + FirstName like ''%'+@Search+'%'') or (CellPhone like ''%'+ @Search +'%'')  or (Email like ''%'+ @Search +'%'') 
   or ( '''+@Search+''' = '''' ))'
  End
  Else
  Begin
	select @st = LookupKey from Lookup where Title = @Status and LookupTypeKey  = 1
	select @stVal = Value from Lookup where Title = @Status and LookupTypeKey  = 1
	set @qrywhere = 'where (CompanyKey= '+@CompanyKey+')  and ((FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (FirstName + '' '' + LastName like ''%'+@Search+'%'' or LastName + '' '' + FirstName like ''%'+@Search+'%'') or (CellPhone like ''%'+ @Search +'%'')  or (Email like ''%'+ @Search +'%'') 
   or ( '''+@Search+''' = '''' )) and (rs.Status = '+@st+' or rs.Status = '+@stVal+')'
  End
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Resource] rs
  left join Lookup l on l.LookupKey = rs.Status '+@qrywhere + '' 

  set @qry = '   select * from (  select rs.FirstName as FirstName,rs.ResourceKey as ResourceKey,rs.LastName as LastName,rs.CellPhone as Phone,rs.Email as Email,
   rs.Status as Status, @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [Resource] as rs
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_SelectOneByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Resource_SelectOneByCompanyKey]
	@CompanyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Resource].[ResourceKey], 
	[Resource].[CompanyKey], 
	[Resource].[ResourceTypeKey], 
	[Resource].[FirstName], 
	[Resource].[LastName], 
	[Resource].[Title], 
	[Resource].[Email], 
	[Resource].[Email2], 
	[Resource].[CellPhone], 
	[Resource].[HomePhone], 
	[Resource].[HomePhone2], 
	[Resource].[Work], 
	[Resource].[Work2], 
	[Resource].[Fax], 
	[Resource].[Address], 
	[Resource].[Address2], 
	[Resource].[City], 
	[Resource].[State], 
	[Resource].[Zip], 
	[Resource].[PrimaryContact], 
	[Resource].[Description], 
	[Resource].[DateAdded], 
	[Resource].[LastModificationTime], 
	[Resource].[Status] ,
	us.Username,
	us.AccountLocked,
	c.Name as CompanyName,
	s.Title as StateName
	
FROM
	[Resource] 
	left join [User] as us on us.ResourceKey = Resource.ResourceKey
	left join Company as c on c.CompanyKey = Resource.CompanyKey
	left join State as s on s.StateKey = Resource.State
WHERE [Resource].[CompanyKey] = @CompanyKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_SelectOneByResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Resource_SelectOneByResourceKey]
	@resourceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
sev.Radius,
	[Resource].[ResourceKey], 
	[Resource].[CompanyKey], 
	[Resource].[ResourceTypeKey], 
	[Resource].[FirstName], 
	[Resource].[LastName], 
	[Resource].[Title], 
	[Resource].[Email], 
	[Resource].[Email2], 
	[Resource].[CellPhone], 
	[Resource].[HomePhone], 
	[Resource].[HomePhone2], 
	[Resource].[Work], 
	[Resource].[Work2], 
	[Resource].[Fax], 
	[Resource].[Address], 
	[Resource].[Address2], 
	ISNULL([Resource].[Address],'') + ' ' + ISNULL([Resource].[Address2],'') + ' ' + ISNULL([Resource].[City],'') + ' ' + ISNULL([Resource].[State],'') + ' ' + ISNULL([Resource].[Zip],'') as ServiceAddress,
	[Resource].[City], 
	[Resource].[State], 
	[Resource].[Zip], 
	[Resource].[PrimaryContact], 
	[Resource].[Description], 
	[Resource].[DateAdded], 
	[Resource].[LastModificationTime], 
	[Resource].[Status] ,
	us.Username,
	us.AccountLocked,
	c.Name as CompanyName,
	s.Title as StateName,
	D.FileName 
	
	
FROM
	[Resource] 
	left join [User] as us on us.ResourceKey = Resource.ResourceKey
	left join Company as c on c.CompanyKey = Resource.CompanyKey
	left join State as s on s.StateKey = Resource.State
	left Join Document as D on [Resource].ResourceKey=D.ObjectKey
	left join ServiceArea As Sev on c.CompanyKey=Sev.VendorKey
WHERE [Resource].[ResourceKey] = @resourceKey

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_StaffDelete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_Resource_StaffDelete]
	 
	@ResourceKey int,
	@errorCode int output
AS
SET NOCOUNT ON
	delete [User] where ResourceKey = @ResourceKey
	delete [Resource] where ResourceKey = @ResourceKey
	
	--delete GroupMember where ResourceKey = @ResourceKey

	select @errorCode  = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_StaffDirectionInsert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




CREATE PROCEDURE [dbo].[site_Resource_StaffDirectionInsert]
	 
	@CompanyKey int, 
	@FirstName varchar(50), 
	@LastName varchar(50), 
	@Email varchar(150), 
	@Email2 varchar(150), 
	
	@CellPhone varchar(50),
	@Work varchar(50),
	@Work2 varchar(50),
	@Fax varchar(50),
	@Address varchar(100),
	@Address2 varchar(100),
	
	@City varchar(50), 
	@State varchar(50),
	@Status int,
	@Zip varchar(11),
	
	@PrimaryContact bit,
	@Description varchar(500),
	@Username varchar(50),
	@Password varchar(100),
	
	@Filename varchar(500),
	@Filesize varchar(50),
	@lst varchar(150),
	@GroupId varchar(150), 
	@ResourceValue INT OUTPUT,
	@UserKey INT OUTPUT

AS
SET NOCOUNT ON

declare @ResourceTypeKeyvalue int 
select @ResourceTypeKeyvalue =  CompanyTypeKey from company where CompanyKey = @CompanyKey


Insert into Resource (CompanyKey, ResourceTypeKey, FirstName, LastName, Email,Email2, CellPhone,
	Work,Work2,  Fax, Address,Address2, City, State, Zip, PrimaryContact, Description, DateAdded, 
	LastModificationTime, Status) 
	values 
	(@CompanyKey, @lst , @FirstName, @LastName, @Email, @Email2,  @CellPhone, 
	@Work,@Work2, @Fax, @Address, @Address2, @City, (case when @State = '0' then null else @State end), @Zip, @PrimaryContact, @Description, getdate(), 
	CONVERT(VARCHAR(8),GETDATE(),108), (case when @Status = 2 then 101 else @Status end))
	
	   declare @ResourceKey int = @@identity 	

	   Insert into [user] (ResourceKey, Username, Password, 
	   DateAdded, LastModificationTime,FirstTimeAccess, Status) values (@ResourceKey, @Username, @Password, GetDate(),GETDATE(),1, 101)
	   declare @UserValue int = @@identity 	
	   if(@ResourceKey is null)
	   begin
		set @ResourceKey = SCOPE_IDENTITY()
	   end
	   if(@ResourceKey is null)
	   begin
			select top 1 @ResourceKey = r.ResourceKey 
			from Resource r 
			where r.CompanyKey = @CompanyKey and r.ResourceTypeKey = @ResourceTypeKeyvalue and r.Email = @Email and convert(date,r.DateAdded)= convert(date,GETDATE()) 
			order by r.ResourceKey desc
	   end

	if(isnull(@PrimaryContact,0)=1 )
	begin
		update Resource set PrimaryContact=0 where CompanyKey = @CompanyKey and ResourceKey <> @ResourceKey
	end


declare Managercur cursor for    
select Item from dbo.SplitString(@GroupId,',')     
open Managercur    
declare @groupidal as varchar(150) 

fetch next from Managercur into @groupidal    
while @@FETCH_STATUS = 0    
begin  
  
declare @PropertyTypeKeyvalue int 
select @PropertyTypeKeyvalue  =  CompanyTypeKey from company where CompanyKey = @CompanyKey


Insert into GroupMember(GroupKey,ResourceKey) 
values  ((select top 1 g.GroupKey from [Group] g where g.Title = ltrim(rtrim(@groupidal))), @ResourceKey)

	 fetch next from Managercur into @groupidal    
end    
close Managercur    
deallocate Managercur   


select @ResourceValue = @ResourceKey
select @UserKey = @UserValue
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_StaffDirectoryGroupEdit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_Resource_StaffDirectoryGroupEdit]
	 
	@GroupId varchar(150), 
	@ResourceKey INT 
AS
SET NOCOUNT ON

DELETE FROM GroupMember WHERE ResourceKey = @ResourceKey

declare Managercur cursor for    
 select Item from dbo.SplitString(@GroupId,',')     
open Managercur    
declare @groupidal as varchar(150)

fetch next from Managercur into @groupidal    
while @@FETCH_STATUS = 0    
begin  

Insert into GroupMember(GroupKey,ResourceKey) values (@groupidal, @ResourceKey)
--select g.GroupKey,@ResourceKey from dbo.[Group] g where g.Title = @groupidal
--and 0 = (select count(gm.GroupMemberKey) from GroupMember gm where gm.GroupKey = g.GroupKey and gm.ResourceKey = @ResourceKey)

	
	 fetch next from Managercur into @groupidal    
end    
close Managercur    
deallocate Managercur
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_StaffEdit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Resource_StaffEdit]
	 
		@FirstName varchar(50), 
	@LastName varchar(50), 
	@Email varchar(150), 
	@Email2 varchar(150),
	@CellPhone varchar(50),
	@Work varchar(50),
	@Work2 varchar(50),
	@Fax varchar(50),
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(50),
	@Status int,
	@Zip varchar(11),
	@PrimaryContact bit,
	@Description varchar(50),
   -- @lst varchar(150),
	@ResourceKey INT

AS
SET NOCOUNT ON

Update [Resource] 
set ResourceTypeKey = (select top 1 c.CompanyTypeKey from Company c inner join Resource r on c.CompanyKey =r.CompanyKey where r.ResourceKey = @ResourceKey)
, FirstName = @FirstName, LastName = @LastName, Email = @Email, Email2 = @Email2, CellPhone = @CellPhone, Work = @Work, Work2 = @Work2, Fax = @Fax,
	Address = @Address, Address2 = @Address2, City = @City, State = (case when @State = '0' then null else @State end), Status = (case when @Status = 2 then 101 else @Status end), Zip = @Zip
	, PrimaryContact = @PrimaryContact, Description = @Description 
	where ResourceKey = @ResourceKey

update [User] set Username = @Email where ResourceKey = @ResourceKey

if(ISNULL(@PrimaryContact,0)=1)
begin
	update Resource set PrimaryContact = 0
	where CompanyKey = (select top 1 r1.CompanyKey from Resource r1 where r1.ResourceKey = @ResourceKey) 
	and ResourceKey <> @ResourceKey
end
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_StaffGroupEdit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Resource_StaffGroupEdit]
	 
	@GroupId varchar(150), 
	@ResourceKey INT 
AS
SET NOCOUNT ON

DELETE FROM GroupMember WHERE ResourceKey = @ResourceKey

declare Managercur cursor for    
 select Item from dbo.SplitString(@GroupId,',')     
open Managercur    
declare @groupidal as varchar(150)

fetch next from Managercur into @groupidal    
while @@FETCH_STATUS = 0    
begin  

Insert into GroupMember(GroupKey,ResourceKey) 
select g.GroupKey,@ResourceKey from dbo.[Group] g where g.Title = @groupidal
and 0 = (select count(gm.GroupMemberKey) from GroupMember gm where gm.GroupKey = g.GroupKey and gm.ResourceKey = @ResourceKey)

	
	 fetch next from Managercur into @groupidal    
end    
close Managercur    
deallocate Managercur
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_StaffGroupUser]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_Resource_StaffGroupUser]
	 
	@FileName varchar(150),
	@FileSize int,
	@UserName varchar(150), 
	@ResourceKey INT 
AS
SET NOCOUNT ON


update [user] set UserName = @UserName where ResourceKey = @ResourceKey 
if(@FileName != '')
	begin
	   declare @modulekey int

	   select @modulekey  = count(ModuleKey) from Module Where Controller = 'StaffDirectory' and Action = 'StaffDirectoryAdd'

	   if(@modulekey > 0)
	   begin 
			select @modulekey  = ModuleKey from Module Where Controller = 'StaffDirectory' and Action = 'StaffDirectoryAdd'
			
			if exists (Select * from Document where ObjectKey = @ResourceKey)
			begin
				update Document set FileName = @FileName, FileSize = @FileSize where ObjectKey = @ResourceKey
			end
			else
			begin
				insert into document (ModuleKey,ObjectKey,FileName, FileSize, LastModificationTime)  values (@modulekey,@ResourceKey, @FileName, @FileSize, getdate())
			end
	   end
	   else 
	   begin	   
	        select @modulekey  = max(ModuleKey) from Module
	        insert into Module (ModuleKey,title,Controller,[Action])
            values (@modulekey + 1,'StaffDirectoryAdd','StaffDirectory','StaffDirectoryAdd')

			insert into document (ModuleKey, ObjectKey, FileName, FileSize, LastModificationTime) values (@modulekey, @ResourceKey, @FileName, @FileSize, getdate())
	      
	   end
	end
--if exists (Select * from Document where ObjectKey = @ResourceKey)
--begin
--update Document set FileName = @FileName, FileSize = @FileSize where ObjectKey = @ResourceKey
--end
--else
--begin
--insert into document (ModuleKey,ObjectKey,FileName, FileSize, LastModificationTime)  values (,@ResourceKey, @FileName, @FileSize, getdate())
--end


--select * from document
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_StaffSelectOneByResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
-- site_Resource_StaffSelectOneByResourceKey 8637,0  
CREATE PROCEDURE [dbo].[site_Resource_StaffSelectOneByResourceKey]  
 @resourceKey INT,  
 @errorCode INT OUTPUT  
AS  
SET NOCOUNT ON  
  
if not exists(Select * from GroupMember where ResourceKey = @resourceKey)  
Begin  
 select rs.resourcekey, rs.ResourceTypeKey, ur.UserKey, FirstName, LastName, Email, Email2, CellPhone, Work, Work2, Fax, Address, Address2, City, State,Zip, PrimaryContact, Description, ur.UserName,  
 ur.Password, 0 as GroupKey, isnull(DM.FileName, '') as FileName, rs.Status,null as GroupTitle  
 From [Resource] as rs   
 left join [user] as ur on rs.ResourceKey = ur.ResourceKey   
 left join [Document] as DM on DM.ObjectKey = rs.ResourceKey where rs.ResourceKey = @resourceKey  
End  
else  
Begin  
 select rs.resourcekey,rs.ResourceTypeKey, ur.UserKey, FirstName, LastName, Email, Email2, CellPhone, Work, Work2, Fax, Address, Address2, City, State,Zip, PrimaryContact, Description, ur.UserName,  
 ur.Password, Gp.GroupKey, isnull(DM.FileName, '') as FileName, rs.Status,(select top 1 g.Title from [Group] g where g.GroupKey = gp.GroupKey) as GroupTitle  
  From [Resource] as rs   
 left join [user] as ur on rs.ResourceKey = ur.ResourceKey  
 left join [GroupMember] as Gp on Gp.ResourceKey = rs.ResourceKey  
 left join [Document] as DM on DM.ObjectKey = rs.ResourceKey where rs.ResourceKey = @resourceKey   
    
End  
-- Get the Error Code for the statement just executed.  
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Resource_Update]
	@resourceKey INT,
	@companyKey INT,
	@resourceTypeKey INT,
	@firstName VARCHAR(50),
    @username VARCHAR(50),
	@lastName VARCHAR(50),
	@title VARCHAR(150),
	@email VARCHAR(150),
	@email2 VARCHAR(150),
	@cellPhone VARCHAR(50),
	@homePhone VARCHAR(50),
	@homePhone2 VARCHAR(50),
	@work VARCHAR(50),
	@work2 VARCHAR(50),
	@fax VARCHAR(50),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@primaryContact BIT,
	@AccountLocked BIT,
	@description VARCHAR(MAX),


	@status INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Resource]
SET
	[CompanyKey] = @companyKey,
	[ResourceTypeKey] = @resourceTypeKey,
	[FirstName] = @firstName,
	[LastName] = @lastName,
	[Title] = @title,
	[Email] = @email,
	[Email2] = @email2,
	[CellPhone] = @cellPhone,
	[HomePhone] = @homePhone,
	[HomePhone2] = @homePhone2,
	[Work] = @work,
	[Work2] = @work2,
	[Fax] = @fax,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[PrimaryContact] = @primaryContact,
	[Description] = @description,

	[LastModificationTime] = getdate(),
	[Status] = @status
WHERE [Resource].[ResourceKey] = @resourceKey

update [user] set username =  @username,AccountLocked = @AccountLocked where ResourceKey = @resourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_UpdateProfile]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Resource_UpdateProfile]
	@resourceKey INT,
	@title VARCHAR(150),
	@firstName VARCHAR(50),
	@lastName VARCHAR(50),
	@email VARCHAR(150),
	@cellPhone VARCHAR(50),
	@work VARCHAR(50),
	@work2 VARCHAR(50),
	@address VARCHAR(100),
	@address2 VARCHAR(100),
	@city VARCHAR(50),
	@state VARCHAR(2),
	@zip VARCHAR(11),
	@RadiusKey  varchar(500), 
	@latitude decimal(8,6),
	@longitude decimal(8,6),
	@VendorKey int,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

UPDATE [Resource]
SET
	[Title] = @title,
	[FirstName] = @firstName,
	[LastName] = @lastName,
	[Email] = @email,
	[CellPhone] = @cellPhone,
	[Work] = @work,
	[Work2] = @work2,
	[Address] = @address,
	[Address2] = @address2,
	[City] = @city,
	[State] = @state,
	[Zip] = @zip,
	[LastModificationTime] = getdate()
WHERE [Resource].[ResourceKey] = @resourceKey
update  ServiceArea set Radius=@RadiusKey, Latitude = @latitude,Longitude = @longitude where VendorKey =@VendorKey 
--update [user] set username =  @username,AccountLocked = @AccountLocked where ResourceKey = @resourceKey
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Resource_UpdateProfileImage]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Resource_UpdateProfileImage]
	@ResourceKey INT,
	@Title VARCHAR(200),
	@Controller VARCHAR(50),
	@Action VARCHAR(50),
	@ImageName VARCHAR(200),
	@ImageLength int,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

declare @ModuleKey int = 0
select top 1 @ModuleKey = m.modulekey from Module m inner join Document d on m.ModuleKey = d.ModuleKey
where m.Title = @Title and m.Controller = @Controller and m.Action = @Action and d.ObjectKey = @ResourceKey

if( isnull(@ModuleKey,0) > 0)
begin
	if((select count(d.DocumentKey) from Document d where d.ObjectKey = @ResourceKey  and d.ModuleKey = @ModuleKey) > 0)
	begin
		update Document 
		set FileName = @ImageName, FileSize = @ImageLength, LastModificationTime = getdate()
		where ObjectKey = @ResourceKey  and ModuleKey = @ModuleKey
	end
	else
	begin
		insert into Document (ModuleKey,ObjectKey,FileName,FileSize,LastModificationTime)
		values(@ModuleKey,@ResourceKey,@ImageName,@ImageLength,getdate())
	end
end
else
begin
	insert into Module(ModuleKey,Title,Controller,Action,Image)
	values((select (max(m.ModuleKey)+1) from Module m), @Title,@Controller,@Action,@ImageName)

	select @ModuleKey = SCOPE_IDENTITY() 

	select @ModuleKey = (case when @ModuleKey is null then 
	(select top 1 m.ModuleKey from Module m where m.Title = @Title and m.Controller = @Controller and m.Action = @Action and m.Image = @ImageName order by m.ModuleKey desc)
	 else @ModuleKey end) 

	insert into Document (ModuleKey,ObjectKey,FileName,FileSize,LastModificationTime)
	values(@ModuleKey,@ResourceKey,@ImageName,@ImageLength,getdate())

end

SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Service_GetAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Service_GetAll]

AS
SET NOCOUNT ON


select ServiceKey, Title from [Service] order by Title asc
GO
/****** Object:  StoredProcedure [dbo].[site_Service_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_Property_Insert 15,'shyam',25,'ahmedabad','ahmedabad','ahmedabad','HI','0512151',5,5,'desc',1,' Tasksheet  23-04-2020.docx,Tasksheet  24-04-2020.docx,Tasksheet  30-04-2020.docx','21811,21821,22471',1,20
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_Service_Insert]
	 
	
	@Title varchar(200),
	@Srvicevalue int output
AS
begin

IF EXISTS (SELECT 1 FROM Service WHERE Title  = @Title )  
	BEGIN	
		
		RETURN
	END
	ELSE 
begin  
    Insert into Service(Title)values(@Title)
	declare @ServiceKey int = @@identity  
	select @Srvicevalue = @@IDENTITY
end

end
--[site_Service_Insert] 'vinod'
GO
/****** Object:  StoredProcedure [dbo].[site_Service_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Service_SelectAll]
--@errorCode INT OUTPUT
AS
begin
SET NOCOUNT ON
select ServiceKey,Title from Service
end


-- Get the Error Code for the statement just executed.
	--SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_Service_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- [site_Service_SelectIndexPaging] 50,1,'','order by Title desc'
CREATE PROCEDURE [dbo].[site_Service_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (Sr.Title like  ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Service] as Sr
   '+@qrywhere + ''

  set @qry = 'select * from (select Sr.ServiceKey,Sr.Title  , @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum  from Service as Sr  '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)   
END
GO
/****** Object:  StoredProcedure [dbo].[site_Service_SelectOneByServiceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Service_SelectOneByServiceKey]
	@ServiceKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
select ServiceKey,Title from Service where ServiceKey=@ServiceKey


			
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_Servicevendor_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Servicevendor_Delete]
	@companyKey int,
	@servicename varchar(max),
	@errorCode int output
	

AS
SET NOCOUNT ON

declare @vendorkey int

select @vendorkey = ServiceKey  from Service where Title = @servicename

delete from VendorService where VendorKey = @companyKey and ServiceKey = @vendorkey



select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Session_SelectOneBySessionID]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO



-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Session_SelectOneBySessionID]
	@sessionID UNIQUEIDENTIFIER,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON
SELECT
	[Session].SessionKey,
	[Session].SessionID,
	[Session].Salt,
	[Session].Data,
	[Session].LastModificationTime
FROM
	[Session] 
WHERE SessionID = @sessionID

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR



GO
/****** Object:  StoredProcedure [dbo].[site_Sevice_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

create PROCEDURE [dbo].[site_Sevice_Delete]
	 
	@ServiceKey int,
	@errorCode int output
AS
SET NOCOUNT ON
begin
	delete Service  where ServiceKey  = @ServiceKey
	
	
	--delete GroupMember where ResourceKey = @ResourceKey

	select @errorCode  = @@ERROR

	End
GO
/****** Object:  StoredProcedure [dbo].[site_Sevice_Edit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Sevice_Edit]
	@ServiceKey int,
	@Title varchar(200),
	@Srvicevalue int output

AS

SET NOCOUNT ON
begin

IF EXISTS (SELECT 1 FROM Service WHERE Title  = @Title )  
	BEGIN	
		
		RETURN
	END
	ELSE 
begin  
    Update Service set Title=@Title
	where ServiceKey=@ServiceKey
	  
	select @Srvicevalue = @@IDENTITY
end

end
--BEGIN
--begin
--Update Service set Title=@Title
--	WHERE exists(
--        select row 
--        from (
--            SELECT 
--                Title , 
--                Row_Number() over(Partition by Title order by Title) as row 
--            FROM Service
--        ) as subquery 
--        where subquery.row = 2 or ServiceKey=@ServiceKey

--		)
--		end
    




-- end
GO
/****** Object:  StoredProcedure [dbo].[site_StaffDirectory_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--site_StaffDirectory_Delete 6412,0  
CREATE PROCEDURE [dbo].[site_StaffDirectory_Delete]  
@ResourceKey int,  
@errorCode int output  
   
  
AS  
SET NOCOUNT ON  

delete from  BidRequest where  ResourceKey = @ResourceKey
delete from    BidVendor where  ResourceKey =  @ResourceKey
delete from [User] where ResourceKey = @ResourceKey  
delete from [GroupMember] where ResourceKey = @ResourceKey  
delete from [Resource] where ResourceKey = @ResourceKey  

select @errorCode  = @@ERROR  
-- Get the Error Code for the statement just executed.  
GO
/****** Object:  StoredProcedure [dbo].[site_State_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_State_SelectAll]

AS
SET NOCOUNT ON

select StateKey, Title from [State]
GO
/****** Object:  StoredProcedure [dbo].[site_Title_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[site_Title_SelectAll]

AS
BEGIN
SET NOCOUNT ON
select EmailTemplateKey  , EmailTitle from EmailTemplate 
END
GO
/****** Object:  StoredProcedure [dbo].[site_User_ChangePassword]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_User_ChangePassword]
	--@email varchar(200),
	@UserId int,
	@NewPassword varchar(max),
	@Oldpassword varchar(max),
	@errorCode INT OUTPUT,
	@Status Int OutPut
	
AS
Begin
-- Added UserKey in If Condition --- Roshan
If EXISTS(Select * from [User] Where   [Password] COLLATE Latin1_general_CS_AS=@Oldpassword and UserKey = @UserId)
Begin
update [user] set Password = @NewPassword, FirstTimeAccess = 0  where UserKey = @UserId 

SELECT @errorCode = @@ERROR
SET @Status=1
End
Else 
Begin
Set @Status=0
End
-- Get the Error Code for the statement just executed.

End
Return @Status
GO
/****** Object:  StoredProcedure [dbo].[site_User_CheckToken]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_User_CheckToken]
	 
	@ResourceKey varchar(150)

AS
SET NOCOUNT ON

Select TokenReset, ResetExpirationDate from [User] where ResourceKey = @ResourceKey

--select  @errorCode = @@Error
GO
/****** Object:  StoredProcedure [dbo].[site_user_checkUsermanagerorAdmin]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_user_checkUsermanagerorAdmin]
    
	 @ResourceKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON

declare @GroupKey int
select @GroupKey = count(GroupKey) from GroupMember Where ResourceKey= @ResourceKey and  GroupKey = 1

     if(@GroupKey = 0)
	 begin

	 select @errorCode  = 0

	 end
else 
begin
 select @errorCode  = 1
end

-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_User_GetForAdmin]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- [site_BidRequest_GetVendorsForBidRequestByAlgorithm] 3123,106  
CREATE procedure [dbo].[site_User_GetForAdmin]  
@errorCode int  output
As  
begin  
 Select rs.ResourceKey,rs.Email, rs.FirstName+ ' '+rs.LastName as FirstName from [user] as us  
 inner join Resource as rs on rs.ResourceKey = us.ResourceKey
 inner join company as cp on cp.CompanyKey = rs.CompanyKey where cp.PortalKey = 1

 select * from company
end
GO
/****** Object:  StoredProcedure [dbo].[site_User_GetForAdminMail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- [site_BidRequest_GetVendorsForBidRequestByAlgorithm] 3123,106
CREATE procedure [dbo].[site_User_GetForAdminMail]
@BidVendorKey int,
@Status nvarchar(100)
As
begin
if(@Status = 'PropertyManager')
	begin
		Select rs.Email, rs.FirstName,cp.Name as CompanyName,br.Title as BidName from BidVendor as bv
		inner join BidRequest as br on br.BidRequestKey = bv.BidRequestKey
		inner join Resource as rs on rs.ResourceKey = br.ResourceKey 
		inner join Company as cp on cp.CompanyKey = rs.CompanyKey Where bv.BidVendorKey = @BidVendorKey
	end
	else if(@Status = 'Vendor')
	begin
		select rs.email, rs.FirstName,cp.Name as CompanyName,br.Title as BidName from bidvendor as bv
		inner join BidRequest as br on br.BidRequestKey = bv.BidRequestKey
		inner join resource as rs on vendorkey = rs.CompanyKey
		inner join Company as cp on cp.CompanyKey = rs.CompanyKey Where bv.BidVendorKey = @BidVendorKey
	end
	
end
GO
/****** Object:  StoredProcedure [dbo].[site_User_Login]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
CREATE PROCEDURE [dbo].[site_User_Login]  
 @email varchar(200),  
 @password varchar(max),  
 @errorCode INT OUTPUT  
  
AS  
SET NOCOUNT ON  
  
select us.UserKey,p.PortalKey,  
isnull((select top 1 groupkey from groupmember where groupmember.ResourceKey = rs.ResourceKey order by GroupKey),0) As GroupKey, cp.Name as companyname,us.ResourceKey, us.Username, us.Password, null as FirstTimeAccess, cp.CompanyTypeKey, rs.CompanyKey, p.Title  
,(select top 1 d.FileName from Document d inner join Module m on d.ModuleKey = m.ModuleKey   
 where d.ObjectKey = rs.ResourceKey and m.Title = 'Profile Image'  
 and ((LU.Title = 'Administration' and m.Controller = 'PMDashboard')   
 or (LU.Title = 'Management Company' and m.Controller = 'PMProperties')   
 or (LU.Title = 'Vendor' and m.Controller = 'vProfile') ) order by m.ModuleKey desc  
 ) as ImageName  
from [User] as us  
inner join [Resource] as rs on rs.ResourceKey = us.ResourceKey  
inner join [Company] as Cp on Cp.CompanyKey = rs.CompanyKey --Added By Jay Dodiya on 28-4-2020  
inner join [LookUp] as LU on LU.LookUpKey = cp.CompanyTypeKey  
inner join Portal as p  on p.PortalKey = cp.PortalKey  
--inner join [Group] as Gs on gs.groupkey = gm.groupkey  
where us.Password = @password and rs.Email = @email  
and cp.status = 101 and rs.Status = 101 and us.Status = 101  
-- Get the Error Code for the statement just executed.  
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_User_Login_Test]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[site_User_Login_Test]
	@email varchar(200),
	@password varchar(max),
	@errorCode INT OUTPUT

AS
SET NOCOUNT ON

select us.UserKey,p.PortalKey,
isnull((select top 1 groupkey from groupmember where groupmember.ResourceKey = rs.ResourceKey order by GroupKey),0) As GroupKey, us.ResourceKey, us.Username, us.Password, us.FirstTimeAccess, cp.CompanyTypeKey, rs.CompanyKey, p.Title
,(select top 1 d.FileName from Document d inner join Module m on d.ModuleKey = m.ModuleKey 
	where d.ObjectKey = rs.ResourceKey and m.Title = 'Profile Image'
	and ((LU.Title = 'Administration' and m.Controller = 'PMDashboard') 
	or (LU.Title = 'Management Company' and m.Controller = 'PMProperties') 
	or (LU.Title = 'Vendor' and m.Controller = 'vProfile') ) order by m.ModuleKey desc
	) as ImageName
from [User] as us
inner join [Resource] as rs on rs.ResourceKey = us.ResourceKey
inner join [Company] as Cp on Cp.CompanyKey = rs.CompanyKey --Added By Jay Dodiya on 28-4-2020
inner join [LookUp] as LU on LU.LookUpKey = cp.CompanyTypeKey
inner join Portal as p  on p.PortalKey = cp.PortalKey
--inner join [Group] as Gs on gs.groupkey = gm.groupkey
where us.Password = @password and rs.Email = @email
and cp.status = 101 and rs.Status = 101 and us.Status = 101
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_User_Logintest]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_User_Logintest]
	@email varchar(200),
	@password varchar(max),
	@errorCode INT OUTPUT

AS
SET NOCOUNT ON
select us.UserKey, us.ResourceKey, us.Username, us.Password, us.FirstTimeAccess, cp.CompanyTypeKey, rs.CompanyKey, p.Title
,(select top 1 d.FileName from Document d inner join Module m on d.ModuleKey = m.ModuleKey 
	where d.ObjectKey = rs.ResourceKey and m.Title = 'Profile Image'
	and ((LU.Title = 'Administration' and m.Controller = 'PMDashboard') 
	or (LU.Title = 'Management Company' and m.Controller = 'PMProperties') 
	or (LU.Title = 'Vendor' and m.Controller = 'vProfile') ) order by m.ModuleKey desc
	) as ImageName
from [User] as us
inner join [Resource] as rs on rs.ResourceKey = us.ResourceKey
inner join [Company] as Cp on Cp.CompanyKey = rs.CompanyKey --Added By Jay Dodiya on 28-4-2020
inner join [LookUp] as LU on LU.LookUpKey = rs.ResourceTypeKey
inner join  Portal as p on  p.PortalKey = cp.PortalKey
--inner join [Group] as Gs on gs.groupkey = gm.groupkey
where us.Password = @password and rs.Email = @email

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_User_Logintest1]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_User_Logintest1]
	@email varchar(200),
	@password varchar(max),
	@errorCode INT OUTPUT

AS
SET NOCOUNT ON
select us.UserKey, gp.GroupKey, us.ResourceKey, us.Username, us.Password, us.FirstTimeAccess, cp.CompanyTypeKey, rs.CompanyKey, p.Title
,(select top 1 d.FileName from Document d inner join Module m on d.ModuleKey = m.ModuleKey 
	where d.ObjectKey = rs.ResourceKey and m.Title = 'Profile Image'
	and ((LU.Title = 'Administration' and m.Controller = 'PMDashboard') 
	or (LU.Title = 'Management Company' and m.Controller = 'PMProperties') 
	or (LU.Title = 'Vendor' and m.Controller = 'vProfile') ) order by m.ModuleKey desc
	) as ImageName
from [User] as us
inner join [Resource] as rs on rs.ResourceKey = us.ResourceKey
inner join [Company] as Cp on Cp.CompanyKey = rs.CompanyKey --Added By Jay Dodiya on 28-4-2020
inner join [LookUp] as LU on LU.LookUpKey = cp.CompanyTypeKey
inner join Portal as p  on p.PortalKey = cp.PortalKey
inner  join  GroupMember  as gp on  gp.ResourceKey = rs.ResourceKey
--inner join [Group] as Gs on gs.groupkey = gm.groupkey
where us.Password = @password and rs.Email = @email

-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_User_ResetPassword]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- site_User_ResetPassword 6356,'Oe58gljdfcwjVTIy6GQJcxam6KrPqGcZqiJtT2Odplc=',0,0

CREATE PROCEDURE [dbo].[site_User_ResetPassword]
	--@email varchar(200),
	@UserId int,
	@NewPassword varchar(max),
	@errorCode INT OUTPUT,
	@Status Int OutPut
	
AS
Begin
If EXISTS(Select * from [User] Where UserKey = @UserId)
Begin
update [user] set Password = @NewPassword, FirstTimeAccess = 0  where UserKey = @UserId 

SELECT @errorCode = @@ERROR
SET @Status=1
End
Else 
Begin
Set @Status=0
End
-- Get the Error Code for the statement just executed.

End
Return @Status

print(@Status)
GO
/****** Object:  StoredProcedure [dbo].[site_User_ResetPassword_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- site_User_ResetPassword 6356,'Oe58gljdfcwjVTIy6GQJcxam6KrPqGcZqiJtT2Odplc=',0,0

CREATE PROCEDURE [dbo].[site_User_ResetPassword_New]
	--@email varchar(200),
	@ResourceKey int,
	@NewPassword varchar(max),
	@errorCode INT OUTPUT,
	@Status Int OutPut
	
AS
Begin
If EXISTS(Select * from [User] Where ResourceKey = @ResourceKey)
Begin
update [user] set Password = @NewPassword, FirstTimeAccess = 0  where ResourceKey = @ResourceKey 

SELECT @errorCode = @@ERROR
SET @Status=1
End
Else 
Begin
Set @Status=0
End
-- Get the Error Code for the statement just executed.

End
print(@Status)
Return @Status
GO
/****** Object:  StoredProcedure [dbo].[site_User_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_User_SelectIndexPaging 50,1,'','order by rc.FirstName desc'
CREATE PROCEDURE [dbo].[site_User_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (rc.FirstName like  ''%'+ @Search +'%'') or (rc.LastName like ''%'+ @Search +'%'') or (rc.Email like ''%'+ @Search +'%'') 
  or (rc.cIty like ''%'+ @Search +'%'') 
  or (s.Title like ''%'+ @Search +'%'') or (c.Name like ''%'+ @Search +'%'') or ( '''+@Search+''' = '''' )' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [User] as u
  inner join [Resource] as rc on rc.ResourceKey  = u.ResourceKey
  inner join [Company] as c on c.CompanyKey  = rc.CompanyKey 
  left join State as s on s.StateKey = rc.State '+@qrywhere + '' 

  set @qry = '   select * from (  select rc.FirstName as FirstName,rc.ResourceKey as ResourceKey,rc.LastName as LastName,rc.Email as Email,rc.cIty As City, s.Title as State, c.Name as Company,
   row_number() over('+@Sort+') as  rownum, @total  as TotalRecord from [User] as u
   inner join [Resource] as rc on rc.ResourceKey  = u.ResourceKey
   inner join [Company] as c on c.CompanyKey  = rc.CompanyKey 
   left join State as s on s.StateKey = rc.State '+@qrywhere+'
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_User_StaffResetPassword]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



CREATE PROCEDURE [dbo].[site_User_StaffResetPassword]
	@UserKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

update [User] set TokenReset = NEWID(), ResetExpirationDate = getdate() where UserKey = @UserKey

select us.Username, rs.Email, us.ResetExpirationDate,cp.Name from [resource] as rs 
inner join [user] as us on rs.ResourceKey = us.ResourceKey 
inner join [Company] as cp on rs.CompanyKey = cp.CompanyKey 
where us.UserKey = @UserKey


-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_UserToken_GetRegistrationTokenByUserKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- site_UserToken_GetRegistrationTokenByUserKey 10452
CREATE Procedure [dbo].[site_UserToken_GetRegistrationTokenByUserKey]
@UserKey int
AS
Begin
	select UserKey,(select ResourceKey from [User] where UserKey = urt.UserKey) as ResourceKey,urt.PKID,RegistrationToken,AddedDateTime
	,(select ClientHost from tblUserSession where PKID = urt.PKID) as ClientHost
	,(select ClientBrowser from tblUserSession where PKID = urt.PKID) as ClientBrowser
	,(select ClientIPAddress from tblUserSession where PKID = urt.PKID) as ClientIPAddress
	,(select ClientUserName from tblUserSession where PKID = urt.PKID) as ClientUserName
	 from UserRegistrationToken urt
where urt.UserKey = @UserKey

End
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_CheckDuplicatedEmail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
  
CREATE PROCEDURE [dbo].[site_Vendor_CheckDuplicatedEmail]  
    
 @Email varchar(150),   
 @Status int OUTPUT  
  
AS  
SET NOCOUNT ON  
  
 if not exists (Select * from Resource  r   
 inner  join Company c on  c.CompanyKey = r.CompanyKey   
 where r.Email = @Email and c.Status != 104)   
  begin  
  SET @Status = 1  
  end  
 else  
  begin  
  SET @Status = 0  
  end
GO
/****** Object:  StoredProcedure [dbo].[site_vendor_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_vendor_Delete 2226,5
CREATE PROCEDURE [dbo].[site_vendor_Delete]
	@companyKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON




delete from VendorService where VendorKey = @companyKey
delete from Insurance where VendorKey = @companyKey

delete from [user] where ResourceKey in (select CompanyKey from Resource where CompanyKey =  @companyKey)

delete from Resource where CompanyKey = @companyKey
delete from [Company] where CompanyKey = @companyKey
select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_getBidrequestDetails]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Vendor_getBidrequestDetails]  
 @BidRequestKey INT,  
 @CompanyKey int,  
 @errorCode INT OUTPUT  
AS  
SET NOCOUNT ON  
  
--select Gp.GroupKey, *   
  
--From Property as ps   
--inner  join  PropertyResource pR on pr.PropertyKey = ps.PropertyKey   
--inner  Join  [Group] Gp on Gp.GroupKey = pr.ResourceKey  
--where ps.PropertyKey = @PropertyKey  
select br.BidRequestKey,br.Title,(SELECT CONVERT(varchar, br.BidDueDate, 1)) As BidDueDate,pr.PropertyKey, (select count(1) from BidVendor where BidVendor.BidRequestKey = 1012) as NoofBid, br.ServiceKey,c.CompanyKey,  
   (SELECT CONVERT(varchar, br.DefaultRespondByDate, 1)) As sstartddate,  
   br.Description,br.DateAdded,    
  br.LastModificationTime, bv.RespondByDate, s.Title as ServiceTitle, pr.Title as PropertyName,pr.NumberOfUnits,  
  pr.Address,pr.Address2,pr.City,pr.State,pr.Zip,  
  c.Name as CompanyName,r.FirstName+' '+r.LastName as VendorName,r.Email,r.CellPhone, lp.title as BidRequestStatus from [BidRequest] br   
  inner join BidVendor bv on bv.BidRequestKey = br.BidRequestKey  
  inner join Service s on s.ServiceKey = br.ServiceKey  
  inner join Property pr on pr.PropertyKey = br.PropertyKey  
  inner join Company c on c.CompanyKey = bv.VendorKey  
  inner  join  LookUp lp on  lp.LookUpKey = br.BidRequestStatus  
  inner join Resource r on r.ResourceKey = br.ResourceKey  
   where (bv.VendorKey = @CompanyKey and br.BidRequestKey = @BidRequestKey)  
  
  
    
     
-- Get the Error Code for the statement just executed.  
SELECT @errorCode = @@ERROR  
print(@errorCode)  
  
--[site_Property_SelectOneByPropertyKey] 1023, null  
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[site_Vendor_Insert]

	@CompanyName    varchar(500),
	@Address		varchar(500),
	@Address2		varchar(500),
	@City			varchar(500),
	@StateKey		varchar(2),
	@zip			varchar(150),
	@Work			varchar(150),
	@Work2			varchar(150),
	@Email          varchar(500),
	@Description    varchar(500),
	@Fax			varchar(500),
	@Website		varchar(500),	
	@Title      	varchar(500),
	@Resourcekey   	int,
	@companyvalue INT OUTPUT

AS
SET NOCOUNT ON

declare @vendorkey int
declare @companytype int
declare @status int
declare @insurancekey int

declare @Resourcevalue int
select @companytype = LookUpKey from LookUp where Title = 'Company Vendor' 
select @status = LookUpKey from LookUp where Title = 'Pending'

  insert into Company(Name,[State],[Address],Address2,City,Zip,Fax,Website,[Status],[Description],CompanyTypeKey,CompanyID,PortalKey)
		                      values(@CompanyName,@StateKey,@Address,@Address2,@City,@zip,@Fax,@Website,100,@Description,@companytype,NEWID(),3)

           set @vendorkey = @@identity
		   select  @companyvalue = @@IDENTITY
		   declare @ResourceTypeKey int
		   select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'
		   
		  Insert into Resource (CompanyKey,FirstName, ResourceTypeKey,CellPhone, Email,Fax, Address, Address2, City, State, Zip,DateAdded,LastModificationTime, Status) 
	      values 
	      (@vendorkey,@Work,@ResourceTypeKey, @Work2, @Email, @Fax, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),101)


		  insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values((select r.companykey from Resource r where r.ResourceKey = @Resourcekey),@vendorkey,getdate(),101)


		  insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,1)
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_Insert_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Vendor_Insert_New]    
    
 @CompanyName    varchar(500),    
 @Address  varchar(500),    
 @Address2  varchar(500),    
 @City   varchar(500),    
 @StateKey  varchar(2),    
 @zip   varchar(150),    
 @FirstName   varchar(150),    
 @LastName   varchar(150),  
  @Work   nvarchar(max),  
 @Work2   varchar(150),    
 @Email          varchar(500),    
 @Description    varchar(500),    
 @Fax   varchar(500),    
 @Website  varchar(500),     
 @Title       varchar(500),    
 @Resourcekey    int,    
 @companyvalue INT OUTPUT,
 @ResValue INT OUTPUT
    
AS    
SET NOCOUNT ON    
    
 if(@StateKey='0')    
  begin    
  set @StateKey=null    
  end    
declare @vendorkey int    
declare @companytype int    
declare @status int    
declare @insurancekey int    
    
declare @Resourcevalue int    
select @companytype = LookUpKey from LookUp where Title = 'Company Vendor'     
select @status = LookUpKey from LookUp where Title = 'Pending'    
    
  insert into Company(Name,[State],[Address],Address2,City,Zip,Fax,Website,[Status],[Description],CompanyTypeKey,CompanyID,PortalKey)    
                        values(@CompanyName,@StateKey,@Address,@Address2,@City,@zip,@Fax,@Website,100,@Description,@companytype,NEWID(),3)    
    
           set @vendorkey = @@identity    
     select  @companyvalue = @@IDENTITY    
     declare @ResourceTypeKey int    
     select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'    
         
    Insert into Resource (CompanyKey,FirstName, LastName,ResourceTypeKey,CellPhone,HomePhone2, Email,Fax, Address, Address2, City, State, Zip,DateAdded,LastModificationTime, PrimaryContact,Status)     
       values     
       (@vendorkey,@FirstName,@LastName,@ResourceTypeKey, @Work2,@Work, @Email, @Fax, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),1,101)    
    select @ResValue  = @@IDENTITY
    
    insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values((select r.companykey from Resource r where r.ResourceKey = @Resourcekey),@vendorkey,getdate(),101)    
    
    
    insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,1)  
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_Insurance]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_Vendor_Insurance 50,1,'','order by u.PolicyNumber desc'
CREATE PROCEDURE [dbo].[site_Vendor_Insurance]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (u.PolicyNumber like  ''%'+ @Search +'%'') or (u.InsuranceAmount like ''%'+ @Search +'%'') 
  or (u.StartDate like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' )' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Insurance] as u
   '+@qrywhere + ''

  set @qry = 'select * from (  select  u. as InsuranceKey, u.PolicyNumber,u.InsuranceAmount,StartDate @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum  from [Insurance] as u '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_InsuranceByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- site_Vendor_InsuranceByCompanyKey 10,1,'','order by u.PolicyNumber desc',3217
CREATE PROCEDURE [dbo].[site_Vendor_InsuranceByCompanyKey]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@CompanyKey int
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    declare @ResourceKey int
   select @ResourceKey = ResourceKey from Resource where CompanyKey = @CompanyKey
  set @qrywhere = 'where ((u.PolicyNumber like  ''%'+ @Search +'%'') or (u.InsuranceAmount like ''%'+ @Search +'%'') 
  or (u.StartDate like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' )) and u.VendorKey='+CONVERT(nvarchar,@CompanyKey)+' ' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Insurance] as u
   '+@qrywhere + ''

  set @qry = 'select * from (  select  u.InsuranceKey as InsuranceKey, u.VendorKey,u.PolicyNumber,u.InsuranceAmount,StartDate, EndDate,@total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum ,
   (select top 1(select (CASE WHEN (ab.ModuleKey = 302 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) 
	  THEN 1 ELSE 0 END)) AS priority from ABNotification ab where ObjectKey = u.InsuranceKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS priority,
	  (select top 1 (CASE WHEN (ab.ModuleKey = 302 and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.Id) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = u.InsuranceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = u.InsuranceKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationId,

(select top 1 (CASE WHEN (ab.ModuleKey = 302 and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900)
	  THEN (select STUFF((select '','' + Convert(
	  nvarchar(max), ab1.NotificationType) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 
		 and vs.ForResource  = '+CONVERT(varchar,@ResourceKey)+' and vs.ObjectKey = u.InsuranceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END) from ABNotification ab where ObjectKey = u.InsuranceKey and ab.ForResource ='+CONVERT(varchar,@ResourceKey)+' and ab.status = 900)AS NotificationType

   from [Insurance] as u '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_InsuranceByCompanyKeyPriority]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- site_Vendor_InsuranceByCompanyKeyPriority 10,1,'','order by u.PolicyNumber desc',3217
CREATE PROCEDURE [dbo].[site_Vendor_InsuranceByCompanyKeyPriority]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@CompanyKey int
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
   declare @ResourceKey int
   select @ResourceKey = ResourceKey from Resource where CompanyKey = @CompanyKey
  set @qrywhere = 'where ((u.PolicyNumber like  ''%'+ @Search +'%'') or (u.InsuranceAmount like ''%'+ @Search +'%'') 
  or (u.StartDate like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' )) and u.VendorKey='+CONVERT(nvarchar,@CompanyKey)+' ' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Insurance] as u
   '+@qrywhere + ''

  set @qry = ';with cusTable as( select * from (  select  distinct(u.InsuranceKey) as InsuranceKey, u.VendorKey,u.PolicyNumber,u.InsuranceAmount,StartDate, EndDate,@total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum2, 
   (select (CASE WHEN (ab.ModuleKey = 302 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 1 ELSE 0 END)) AS priority,
		(CASE WHEN (ab.ModuleKey = 302 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 
		(select STUFF((select '','' + Convert(nvarchar(max), ab1.Id) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and vs.ObjectKey = u.InsuranceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE ''0'' END)as NotificationId,
		(CASE WHEN (ab.ModuleKey = 302 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 
         (select STUFF((select '','' + Convert(nvarchar(max), ab1.NotificationType) from ABNotification ab1
		 inner join [ABNotification] as vs on vs.Id = ab1.Id where ab1.status = 900 and vs.ForResource  = '+Convert(varchar,@ResourceKey)+' and vs.ObjectKey = u.InsuranceKey
    FOR XML PATH('''')
),1,1,'''')) ELSE null END) as NotificationType    
   from [Insurance] as u 
   LEFT Outer Join ABNotification ab on ab.ObjectKey = u.InsuranceKey and ab.status = 900 and ab.ForResource = '+Convert(varchar,@ResourceKey)+''
   +@qrywhere+'
   
  ) i ), q2 as( select * from(select *,ROW_NUMBER() over (partition by priority '+@Sort+') as rownum1 from cusTable)i)
  select * from (select *,ROW_NUMBER() over (order by priority desc) as rownum from q2)k where rownum between   '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_MarkAsStar]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_Vendor_MarkAsStar]
	@CompanyKey int,	
	@ResourceKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON

declare @StarVendorKey int
   select @StarVendorKey = count(StarVendorKey) from StarVendor Where VendorKey= @CompanyKey

     if(@StarVendorKey = 0)
	 begin

	 insert into  StarVendor (VendorKey ,ResourceKey,AddedOn) values (@CompanyKey,@ResourceKey,getdate())
	 end
else 
begin
delete  from  StarVendor where  VendorKey = @CompanyKey
end
select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.


select  *  from  StarVendor
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_SelectBidRequestFormanager]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_Vendor_SelectBidRequestFormanager] 50,1,'order by rs.Title desc',8399  
CREATE PROCEDURE [dbo].[site_Vendor_SelectBidRequestFormanager]  
@PageSize int,                             
@PageIndex int,                                                         
@Sort nvarchar(max),  
@CompanyKey  nvarchar(max)   
AS  
BEGIN  
  declare @qrywhere varchar(max)                      
  declare @qrytotal varchar(max)                       
  declare @qry varchar(max)      
      
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'')   
  set @qrywhere = '  
  inner join BidRequest rs on rs.BidRequestKey = bv.BidRequestKey  
 inner join  Company cp on cp.CompanyKey =  bv.VendorKey  
 inner join  LookUp lp on lp.LookUpKey = rs.BidRequestStatus  
    
  where (bv.VendorKey= '+@CompanyKey+') and ModuleKey in (select M.Modulekey from Module M where M.Title = ''Bid Requests'') and (rs.BidRequestStatus != 600) '  
    
  set @qrytotal =   'declare @total int  select  @total  = count(1) from [BidVendor] bv '+@qrywhere + ''   
  
  set @qry = '   select * from (  select rs.BidRequestKey,rs.Title,(SELECT CONVERT(varchar, rs.BidDueDate, 1)) As BidDueDate,  
  (select count(1) from BidVendor where BidVendor.BidRequestKey = rs.BidRequestKey) as NoofBid, cp.companykey,  
 (SELECT CONVERT(varchar, rs.DefaultRespondByDate, 1)) As sstartddate,  lp.title as BidRequestStatus, @total  as TotalRecord,  
   row_number() over('+@Sort+') as  rownum from [BidVendor] as bv  
     
   '+@qrywhere+'    
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)   
      print(@qrytotal + @qry)               
      exec( @qrytotal + @qry)            
END  
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- site_Vendor_SelectIndexPaging 50,1,1063,'Accountant/CPA,Air Conditioning','order by star asc','',0,0

CREATE PROCEDURE [dbo].[site_Vendor_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,     
@resourceKey int,                      
@Search nvarchar(max),                              
@Sort nvarchar(max),
@service nvarchar(max),
@checkstar nvarchar(max),
@invited nvarchar(max)= null
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
	
  set @qrywhere = 'where (lu.Title in (''Company Vendor'',''Vendor'')) and  
   (u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Approved'') or (u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Pending'') and ic.invited is not null)) 
  and  ((u.Name like  ''%'+ @Search +'%'') or (i.FirstName + '' '' + i.LastName like ''%'+ @Search +'%'')) and 
  (u.companykey in (select vs.vendorkey from Vendorservice vs where vs.servicekey in (select s.servicekey from [service] s where s.title like ''%'+ @service +'%'')) or ( '''+@service+''' = '''' ))' 

if(@checkstar <> '0')
Begin
	set @qrywhere = @qrywhere + 'and (isnull((select top 1 1 from StarVendor where vendorkey = u.CompanyKey and ResourceKey = ' + Convert(varchar,@resourceKey) + '),0) = ' + @checkstar + ')'
End
if(@invited is not null)
Begin
	set @qrywhere = @qrywhere + 'and (invited is not null)'
End
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u
   inner join (select xc.CompanyKey, isnull((select top 1 xr.firstname  from Resource xr where xr.PrimaryContact = 1 and xr.CompanyKey = xc.CompanyKey), '''') as firstname, isnull((select top 1 xr.LastName  from Resource xr where xr.PrimaryContact = 1 and


 xr.CompanyKey = xc.CompanyKey), '''') as lastname from Company xc) i
	on u.CompanyKey = i.CompanyKey
   inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
   left join  (select CompanyVendor.VendorKey, 1 as invited from CompanyVendor where CompanyVendor.CompanyKey = (select rc.companykey from [Resource] rc where rc.ResourceKey = ' + Convert(varchar,@resourceKey) + ')) iC on ic.VendorKey =u.Companykey
   '+@qrywhere + ''

set @qry = '   select * from (select *,row_number() over('+@Sort+') as  rownum from ( 
 select u.Name, u.CompanyKey, isnull((select top 1 1 from StarVendor where vendorkey = u.CompanyKey and ResourceKey = ' + Convert(varchar,@resourceKey) + '),0) as star
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] 
 inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey
    FOR XML PATH('''')),1,1,'''')) as SeriveTitle , i.FirstName + '' '' + i.LastName as Work,
    @total  as TotalRecord, isnull(invited,0) as invited from [Company] u 
      inner join (select xc.CompanyKey, isnull((select top 1 xr.firstname  from Resource xr where xr.PrimaryContact = 1 and xr.CompanyKey = xc.CompanyKey), '''') as firstname, isnull((select top 1 xr.LastName  from Resource xr where xr.PrimaryContact = 1 


   and xr.CompanyKey = xc.CompanyKey), '''') as lastname from Company xc) i
	on u.CompanyKey = i.CompanyKey
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey 	
	  left join  (select CompanyVendor.VendorKey, 1 as invited from CompanyVendor where CompanyVendor.CompanyKey = (select rc.companykey from [Resource] rc where rc.ResourceKey = ' + Convert(varchar,@resourceKey) + ')) iC on ic.VendorKey =u.Companykey
   '+@qrywhere+'
   
  ) j ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_SelectIndexPagingNew]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
    
    
    
-- site_Vendor_SelectIndexPagingNew 500,1,7363,'','order by Name asc','',0    
    
CREATE PROCEDURE [dbo].[site_Vendor_SelectIndexPagingNew]    
@PageSize int,                               
@PageIndex int,         
@resourceKey int,                          
@Search nvarchar(max),                                  
@Sort nvarchar(max),    
@service nvarchar(max),    
@checkstar nvarchar(max),
@Duplicate nvarchar(max),
@invited nvarchar(max) = null    
AS    
BEGIN    
  declare @qrywhere varchar(max)                        
  declare @qrytotal varchar(max)
    declare @qryduplicate varchar(max)  
  declare @qry varchar(max)        
        declare @qryInvited varchar(max)       
     
  set @qrywhere = 'where (lu.Title in (''Company Vendor'',''Vendor'')) and      
   (u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Approved'') or (u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Pending'')))     
  and  ((u.Name like  ''%'+ @Search +'%'') or (i.FirstName + '' '' + i.LastName like ''%'+ @Search +'%'')) and     
  (u.companykey in (select vs.vendorkey from Vendorservice vs where vs.servicekey in (select s.servicekey from [service] s where s.title like ''%'+ @service +'%'')) or ( '''+@service+''' = '''' ))'     
     
     
   set @qryInvited = 'where (lu.Title in (''Company Vendor'',''Vendor'')) and      
   ((u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Pending'')))     
  and  ((u.Name like  ''%'+ @Search +'%'') or (i.FirstName + '' '' + i.LastName like ''%'+ @Search +'%'')) and     
  (u.companykey in (select vs.vendorkey from Vendorservice vs where vs.servicekey in (select s.servicekey from [service] s where s.title like ''%'+ @service +'%'')) or ( '''+@service+''' = '''' ))'  
  
     set @qryduplicate = 'where      
   ((u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Duplicate'')))     
  and  ((u.Name like  ''%'+ @Search +'%'') or (i.FirstName + '' '' + i.LastName like ''%'+ @Search +'%'')) and     
  (u.companykey in (select vs.vendorkey from Vendorservice vs where vs.servicekey in (select s.servicekey from [service] s where s.title like ''%'+ @service +'%'')) or ( '''+@service+''' = '''' ))' 


    
if(@checkstar <> '0')    
Begin    
 set @qrywhere = @qrywhere + 'and (isnull((select top 1 1 from StarVendor where vendorkey = u.CompanyKey and ResourceKey = ' + Convert(varchar,@resourceKey) + '),0) = ' + @checkstar + ')'    
End    
if(@invited  = '1')    
Begin    
 set @qrywhere = @qryInvited    
End    
 if(@invited  is null )    
Begin    
 set @qrywhere = @qrywhere    
End 
if(@Duplicate  = '1')    
Begin    
 set @qrywhere = @qryduplicate    
End 
if(@Duplicate  = null)    
Begin    
 set @qrywhere = @qrywhere    
End 

  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u    
   inner join (select xc.CompanyKey, isnull((select top 1 xr.firstname  from Resource xr where xr.PrimaryContact = 1 and xr.CompanyKey = xc.CompanyKey), '''') as firstname, isnull((select top 1 xr.LastName  from Resource xr where xr.PrimaryContact = 1 and
  
    
    
    
 xr.CompanyKey = xc.CompanyKey), '''') as lastname from Company xc) i    
 on u.CompanyKey = i.CompanyKey    
   inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey    
   left join  Resource rc on rc.CompanyKey = u.CompanyKey    
   '+@qrywhere + ''    
    
set @qry = 'select * from (select *,row_number() over('+@Sort+') as  rownum from (     
 select u.Name, u.CompanyKey, isnull((select top 1 1 from StarVendor where vendorkey = u.CompanyKey and ResourceKey = ' + Convert(varchar,@resourceKey) + '),0) as star    
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service]     
 inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey    
    FOR XML PATH('''')),1,1,'''')) as SeriveTitle , i.FirstName + '' '' + i.LastName as Work,    
 (select case when (u.Status = 100) then 1 else 0 End) as invited,  (select case when (u.Status = 104) then 1 else 0 End) as Duplicate,  
    @total  as TotalRecord from [Company] u     
      inner join (select xc.CompanyKey, isnull((select top 1 xr.firstname  from Resource xr where xr.PrimaryContact = 1 and xr.CompanyKey = xc.CompanyKey), '''') as firstname, isnull((select top 1 xr.LastName  from Resource xr where xr.PrimaryContact = 1 
  
    
    
    
   and xr.CompanyKey = xc.CompanyKey), '''') as lastname from Company xc) i    
 on u.CompanyKey = i.CompanyKey    
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey      
   left join Resource rc on rc.CompanyKey = u.CompanyKey    
   '+@qrywhere+'    
       
  ) j ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)     
      print(@qrytotal + @qry)                 
      exec( @qrytotal + @qry)              
END  


select  *  from  Company
GO
/****** Object:  StoredProcedure [dbo].[site_vendor_SelectOneByvendorKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_vendor_SelectOneByvendorKey]  
 @CompanyKey INT,  
 @errorCode INT OUTPUT  
AS  
SET NOCOUNT ON  
  
select ps.CompanyKey, ps.Status as invited ,sv.VendorKey, LegalName,rs.FirstName + ' ' + rs.LastName as Name,ps.Name as CompanyName ,rs.HomePhone2 as Work,ps.Work2,ps.Fax,Website  
,ps.Address,ps.Address2,ps.City,ps.State,ps.Zip,rs.CellPhone, rs.Email,ps.name   
from [Company] ps  
left join  Resource rs on rs.CompanyKey = ps.CompanyKey  
left join Service s on s.ServiceKey = ps.CompanyKey  
left join StarVendor sv on sv.VendorKey = rs.CompanyKey  
left join  CompanyVendor cv on  cv.VendorKey = rs.CompanyKey  
where ps.CompanyKey= @CompanyKey   
---vendoe  service  table  Inner  join  pending.  
-- Get the Error Code for the statement just executed.  
SELECT @errorCode = @@ERROR  
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_SelectworkorderFormanager]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- [site_Vendor_SelectworkorderFormanager] 50,1,'order by p.title desc',5237  
CREATE PROCEDURE [dbo].[site_Vendor_SelectworkorderFormanager]  
@PageSize int,                             
@PageIndex int,                                                         
@Sort nvarchar(max),  
@CompanyKey  nvarchar(max)   
AS  
BEGIN  
  declare @qrywhere varchar(max)                      
  declare @qrytotal varchar(max)                       
  declare @qry varchar(max)      
      
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'')   
  set @qrywhere = '  
 inner join BidRequest rs on rs.BidRequestKey = bv.BidRequestKey  
inner join  Company cp on cp.CompanyKey =  bv.VendorKey  
inner  join  property p on  p.PropertyKey = rs.PropertyKey  
inner join  LookUp lp on lp.LookUpKey = rs.BidRequestStatus  
    
  where (bv.VendorKey= '+@CompanyKey+') and ModuleKey in (select M.Modulekey from Module M where M.Title = ''Work Orders'') and (rs.BidRequestStatus != 600)'  
    
  set @qrytotal =   'declare @total int  select  @total  = count(1) from [BidVendor] bv '+@qrywhere + ''   
  
  set @qry = '   select * from (  select rs.BidRequestKey, p.title as Propertyname, rs.Title,(SELECT CONVERT(varchar, rs.BidDueDate, 1)) As BidDueDate,  
  (select count(1) from BidVendor where BidVendor.BidRequestKey = rs.BidRequestKey) as NoofBid,cp.companykey,  
  (SELECT CONVERT(varchar, rs.StartDate, 1)) As sstartddate, lp.title as BidRequestStatus, @total  as TotalRecord,  
   row_number() over('+@Sort+') as  rownum from [BidVendor] as bv  
     
   '+@qrywhere+'    
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)   
      print(@qrytotal + @qry)               
      exec( @qrytotal + @qry)            
END  
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_starvendorfeedbackpaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[site_Vendor_starvendorfeedbackpaging] 50,1,'order by rs.VendorKey desc',3307

CREATE PROCEDURE [dbo].[site_Vendor_starvendorfeedbackpaging]
@PageSize int,                           
@PageIndex int,                                                       
@Sort nvarchar(max),
@CompanyKey  nvarchar(max)	
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'') 
  set @qrywhere = '

   inner join  starvendor sv on sv.VendorKey = rs.VendorKey
   where (sv.VendorKey= '+@CompanyKey+')'
  
  set @qrytotal =   'declare @total int  select  @total  = count(1) from [VendorRating] rs '+@qrywhere + '' 

  set @qry = '   select * from (  select rs.VendorRatingKey,rs.VendorKey, rs.ResourceKey,
  rs.RatingOne,rs.RatingTwo,rs.RatingThree,rs.RatingFour,rs.RatingFive, rs.Message , (SELECT CONVERT(varchar, rs.LastModificationTime, 1)) as lastmodtime , @total  as TotalRecord,
   row_number() over('+@Sort+') as  rownum from [VendorRating] as rs
   
   '+@qrywhere+'  
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ********************************
-- * Stored Procedure Code
-- ********************************
CREATE PROCEDURE [dbo].[site_Vendor_Update]
    @companyKey     INT,
	@companyName    varchar(150),
	@Work			varchar(50),
	@email          varchar(150),
	@Address		varchar(100),
	@Address2		varchar(100),
	@City			varchar(50),
	@StateKey		varchar(2),
	@zip			varchar(11),
	
	
	@status INT							
	
AS
SET NOCOUNT ON

UPDATE [Company]   
SET

	[Name] = @companyName,
	[Address] = @Address,
	[Address2] = @Address2,
	[City] = @City,
	[State] = @StateKey,
	[Work] = @work,
	[Zip] = @zip

	
	
	
WHERE [Company].[CompanyKey] = @companyKey

 update [Resource] set Email = @email where CompanyKey = @companyKey
GO
/****** Object:  StoredProcedure [dbo].[site_Vendor_Update_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ********************************  
-- * Stored Procedure Code  
-- ********************************  
CREATE PROCEDURE [dbo].[site_Vendor_Update_New]  
    @companyKey     INT,  
 @companyName    varchar(150),  
 @FirstName   varchar(150),  
 @LastName   varchar(150),  
 @email          varchar(150),  
 @Address  varchar(100),  
 @Address2  varchar(100),  
 @City   varchar(50),  
 @StateKey  varchar(2),  
 @zip   varchar(11),  
 @Work nvarchar(max),
 @CellPhone   varchar(100),  
  
   
   
 @status INT         
   
AS  
SET NOCOUNT ON  
  
UPDATE [Company]     
SET  
  
 [Name] = @companyName,  
 [Address] = @Address,  
 [Address2] = @Address2,  
 [City] = @City,  
 [State] = @StateKey,  
 [Zip] = @zip  
 --,  
 --CellPhone=@CellPhone  
  
   
   
   
WHERE [Company].[CompanyKey] = @companyKey  
  
 update [Resource] set Email = @email,  
 FirstName = @FirstName,  
 LastName = @LastName,  
 [Address] = @Address,  
 [Address2] = @Address2,  
 [City] = @City,  
 [State] = @StateKey,  
 [Zip] = @zip,
 [HomePhone2]= @Work,  
 CellPhone=@CellPhone  
 where CompanyKey = @companyKey
GO
/****** Object:  StoredProcedure [dbo].[site_VendorDocument_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--[site_VendorDocument_SelectAll] 10889,100 
CREATE procedure [dbo].[site_VendorDocument_SelectAll]

@InsuranceKey int,
@ModuleKey int

AS
SET NOCOUNT ON
begin


if(@ModuleKey = 100)
begin

select * from Document as d where (ModuleKey = (select ModuleKey from Module where Controller = 'PMBidRequests') or ModuleKey = 100)  and d.ObjectKey = @InsuranceKey
end
else
begin
select * from Document as d where (ModuleKey = (select ModuleKey from Module where Controller = 'PMWorkOrders') or ModuleKey = 106)  and d.ObjectKey = @InsuranceKey
end









end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorDocument_SelectAll_V2]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--[site_VendorDocument_SelectAll_V2] 3121
CREATE procedure [dbo].[site_VendorDocument_SelectAll_V2]
@InsuranceKey int
AS
SET NOCOUNT ON
BEGIN
	if ((select COUNT(1) from BidRequest  Where BidRequestkey = @InsuranceKey and ModuleKey=100) > 0)
	begin	
		select d.FileName,d.DocumentKey from Document as d where ModuleKey = (select ModuleKey from Module where Controller = 'PMBidRequests')  and d.ObjectKey = @InsuranceKey
	end
else
	begin	
		select d.FileName,d.DocumentKey from Document as d where ModuleKey = (select ModuleKey from Module where Controller = 'PMWorkOrders')  and d.ObjectKey = @InsuranceKey
	end
END
GO
/****** Object:  StoredProcedure [dbo].[site_VendorDocument_SelectAll_VendorView]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[site_VendorDocument_SelectAll_VendorView]

@CompanyKey int

AS
SET NOCOUNT ON
begin



select  c.CompanyKey,p.CompanyKey,d.DocumentKey,
		d.FileName, d.ModuleKey, d.FileSize from Document d
		join Property p on p.PropertyKey = d.ObjectKey
		join Company c on c.CompanyKey = p.CompanyKey
		where d.ModuleKey in (select ModuleKey from Module where Controller = 'PMProperties' and Title = 'Properties')
		and c.CompanyKey = @CompanyKey  
	
end
GO
/****** Object:  StoredProcedure [dbo].[site_Vendorinformaion_BidRequest]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
-- site_Vendorinformaion_BidRequest 2544  
CREATE PROCEDURE [dbo].[site_Vendorinformaion_BidRequest]  
  
@BidRequestKey int  
  
AS  
SET NOCOUNT ON  
begin  
  
declare @Firstname nvarchar(500),  
@lastname nvarchar(500),  
@Email nvarchar(500)  
  
select top 1 @Firstname = isnull(Firstname, ''), @lastname = isnull(lastname, ''), @Email = isnull(email, '') from [Resource] r  
where r.CompanyKey = (select vendorkey from bidvendor where bidvendor.BidVendorKey = @BidRequestKey)  
  
select c.Name as CompanyName,c.CompanyKey,@Firstname + ' ' + @lastname as ContactPerson ,c.Work as  WorkPhone1,c.Work as WorkPhone2,c.Fax,@Email as Email,c.Address as Address1,c.Address2 as Address2,  
c.City as City,s.Title as State ,c.Zip as Zip, i.InsuranceKey,i.InsuranceAmount as InsuranceAmount, convert(varchar(10),i.EndDate,101) as InsuranceExprie ,i.StartDate as InsuranceDate    
from BidVendor as bv  
left join Company as c on bv.VendorKey = c.CompanyKey  
left join  State as s on s.StateKey = c.State  
left join Insurance as i on i.VendorKey = bv.VendorKey  
where bv.BidVendorKey = @BidRequestKey  
  
end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_AcceptEmailSendDetail]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE Procedure [dbo].[site_VendorManager_AcceptEmailSendDetail]  
@CompanyKey int  
AS  
BEGIN  
  
select  top(1)us.UserKey, rs.Email, us.UserName, us.ResetExpirationDate, cp.Name from Company as cp  
inner join Resource as rs on rs.CompanyKey = cp.CompanyKey  
inner join [user] as us on us.ResourceKey = rs.ResourceKey where cp.CompanyKey = @CompanyKey  
 order by  us.UserKey desc
  
END --- site_VendorManager_AcceptEmailSendDetail 8398
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Approve_Pending]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_VendorManager_Approve_Pending 3307,0
CREATE procedure [dbo].[site_VendorManager_Approve_Pending]
@CompanyKey int,
@errorCode int OUTPUT
As
Begin
	declare @status int
	declare @st int
	declare @RKey int

	select @st = LookUpTypeKey from LookUpType where Title = 'status'
	select @status = LookUpKey from LookUp where LookUpTypeKey = @st and Title = 'Approved'

	update Company set Status = @status where CompanyKey = @CompanyKey
	select @RKey = FIRST_VALUE(ResourceKey) over(order by ResourceKey) from Resource where CompanyKey = @CompanyKey
	update Resource set Status = @status where ResourceKey = @RKey
	
	update [User] set Status = @status where ResourceKey = @RKey
End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Approved_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- site_VendorManager_Approved_SelectIndexPaging 50,1,'','order by  name desc'





CREATE PROCEDURE [dbo].[site_VendorManager_Approved_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)
    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (u.Status in(select LookUpKey from lookUp where LookuptypeKey in(select LookUpTypeKey from LookUpType where Title = ''status'')
and Title = ''Approved''))
and (u.CompanyTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')
	 and Title in (''Vendor'',''Company Vendor'')))
	 and ((u.Name like  ''%'+@Search+'%'') and r.ResourceTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')
	 and Title in (''Vendor'',''Company Vendor'')) or ((u.Name like ''%'+@Search+'%'') or (r.FirstName + '' '' + r.LastName like ''%'+@Search+'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] 
  inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+@Search+'%'') 
  or ( ''%'+@Search+'%'' = '''' )))' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u
   
	inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
		  inner join  Resource as r on R.CompanyKey = U.CompanyKey
		  inner join CompanyVendor cv on cv.VendorKey = u.CompanyKey
		  inner join LookUp as look on look.LookUpKey = u.Status
   '+@qrywhere + ''

set @qry = '   select * from ( 
 select u.Name,u.CompanyKey,look.Title as Favorite,r.Work,r.Email 
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey
    FOR XML PATH('''')
),1,1,'''')) as title , r.FirstName + '' '' + r.LastName as VendorName,
   row_number() over('+@Sort+') as  rownum, @total  as TotalRecord from [Company] u 
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
		  inner join  Resource as r on R.CompanyKey = U.CompanyKey
		  inner join CompanyVendor cv on cv.VendorKey = u.CompanyKey
		  inner join LookUp as look on look.LookUpKey = u.Status
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_BidReq_BidReqKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--site_VendorManager_BidReq_BidReqKey 3253,2054

CREATE Procedure [dbo].[site_VendorManager_BidReq_BidReqKey]
@CompanyKey int,
@BidRequestKey int
As
Begin
select br.BidRequestKey,br.PropertyKey, 		
		br.ResourceKey, br.ServiceKey,c.CompanyKey,
		br.Title, br.BidDueDate,br.StartDate,
		br.EndDate, br.Description,br.DateAdded, 	
		br.LastModificationTime, bv.RespondByDate, s.Title as ServiceName,pr.Title as PropertyName,pr.NumberOfUnits,
		pr.Address,pr.Address2,pr.City,pr.State,pr.Zip,
		c.Name as CompanyName,r.FirstName+' '+r.LastName as VendorName,r.Email,r.CellPhone, br.BidRequestStatus from [BidRequest] br 
		inner join BidVendor bv on bv.BidRequestKey = br.BidRequestKey
		inner join Service s on s.ServiceKey = br.ServiceKey
		inner join Property pr on pr.PropertyKey = br.PropertyKey
		inner join Company c on c.CompanyKey = bv.VendorKey
		inner join Resource r on r.ResourceKey = br.ResourceKey
   where (bv.VendorKey = @CompanyKey and ModuleKey in (select ModuleKey from Module
   where Title = 'Bid Requests') and br.BidRequestKey = @BidRequestKey)
End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_BidReq_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_VendorManager_BidReq_SelectIndexPaging] 3253,50,1,'','order by  Bidrequest.title desc',0





CREATE PROCEDURE [dbo].[site_VendorManager_BidReq_SelectIndexPaging]
@companyKey int,
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@errorCode int OUTPUT
    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (bv.VendorKey = '+ Convert(varchar,@companyKey)+' and ModuleKey in (select ModuleKey from Module
   where Title = ''Bid Requests'')  and ((BidRequest.Title like  ''%'+ @Search +'%'')
  or ( '''+@Search+''' = '''' )))' 
  
  set @qrytotal =   'declare @total int select  @total  = count(*) from [BidRequest]
	inner join BidVendor bv on BidRequest.BidRequestKey = bv.BidRequestKey
		inner join property pr on pr.PropertyKey = BidRequest.propertykey
   '+@qrywhere+''

set @qry = '   
	
	select * from (select [BidRequest].[BidRequestKey], ' +
		'		[BidRequest].[PropertyKey], ' +
		'		[BidRequest].[ResourceKey], ' +
		'		[BidRequest].[ServiceKey], ' +
		'		[BidRequest].[Title], ' +
		'		[BidRequest].[BidDueDate], ' +
		'		[BidRequest].[StartDate], ' +
		'		[BidRequest].[EndDate], ' +
		'		[BidRequest].[Description], ' +
		'		[BidRequest].[DateAdded], ' +
		'		[BidRequest].[LastModificationTime], ' +
		'		[BidRequest].[BidRequestStatus],l.Title as BidStatus, pr.Title as Propertyname, pr.NumberOfUnits, ' +
		'	row_number() over(' + @Sort +') as  rownum, @total as TotalRecord from [BidRequest]' +
		'	inner join BidVendor bv on BidRequest.BidRequestKey = bv.BidRequestKey' +
		'	inner join property pr on pr.PropertyKey = BidRequest.propertykey
		inner join Lookup l on l.LookupKey = [BidRequest].[BidRequestStatus]
      
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          

	  set @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_CheckDuplicatedCompanyNameByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_VendorManager_CheckDuplicatedCompanyNameByResourceKey] 'NewCompany','3357',0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_VendorManager_CheckDuplicatedCompanyNameByCompanyKey]
	 
	@CompanyName varchar(150),
	@CompanyKey int,
	@CompStatus int OUTPUT

AS
	 
SET NOCOUNT ON

	if not exists (Select * from Company where Name = @CompanyName except select * from Company where CompanyKey = @CompanyKey)
		begin
		SET @CompStatus = 1
		end
	else
		begin
		SET @CompStatus = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_CheckDuplicatedEmailAndCompanyName]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
-- [site_VendorManager_CheckDuplicatedEmailAndCompanyName] 'Xyz@123.com','Abc',0,0  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
  
CREATE PROCEDURE [dbo].[site_VendorManager_CheckDuplicatedEmailAndCompanyName]  
    
 @Email varchar(150),   
 @CompanyName varchar(150),  
 @EmailStatus int OUTPUT,  
 @CompStatus int OUTPUT  
  
AS  
    
SET NOCOUNT ON  
  
 if not exists (Select * from Resource  r   
 inner  join Company c on  c.CompanyKey = r.CompanyKey   
 where r.Email = @Email and c.Status != 104)  
  begin  
  SET @EmailStatus = 1  
  end  
 else  
  begin  
  SET @EmailStatus = 0  
  end  
  
 if not exists (select * from Company where Name = @CompanyName)  
  begin  
   SET @CompStatus = 1  
  end  
  else  
  begin  
   Set @CompStatus = 0  
  end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_CheckDuplicatedEmailByResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_VendorManager_CheckDuplicatedEmailAndCompanyName] 'xyz@demo.com','Abc',0,0
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[site_VendorManager_CheckDuplicatedEmailByResourceKey]
	 
	@Email varchar(150),
	@ResourceKey int,
	@EmailStatus int OUTPUT

AS
	 
SET NOCOUNT ON

	if not exists (Select * from Resource where Email = @Email except select * from Resource where ResourceKey = @ResourceKey)
		begin
		SET @EmailStatus = 1
		end
	else
		begin
		SET @EmailStatus = 0
		end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Document_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[site_VendorManager_Document_SelectAll]

@InsuranceKey int,
@ModuleKey int

AS
SET NOCOUNT ON
begin



if(@ModuleKey = 100)
begin

select * from Document as d where ModuleKey = (select ModuleKey from Module where Controller = 'PMBidRequests')  and d.ObjectKey = @InsuranceKey
end
else
begin
select * from Document as d where ModuleKey = (select ModuleKey from Module where Controller = 'PMWorkOrders')  and d.ObjectKey = @InsuranceKey
end









end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_getUserBy_R_C_key]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_VendorManager_getUserBy_R_C_key 3253 ,4269

CREATE Procedure [dbo].[site_VendorManager_getUserBy_R_C_key]
@CompanyKey int,
@ResourceKey int
As
Begin

Select c.CompanyKey,r.ResourceKey,c.Name,r.Email,r.CellPhone,r.Address,r.City,r.FirstName,r.LastName,r.PrimaryContact,
u.UserKey,u.Username,u.Password,u.FirstTimeAccess,u.Status from Resource r
join Company c on c.CompanyKey = r.CompanyKey
join "User" u on u.ResourceKey = r.ResourceKey
where   r.PrimaryContact = 1 and
c.CompanyKey = @CompanyKey and r.ResourceKey = @ResourceKey


End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_InviteVendor]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
  
  
  
  
  
CREATE PROCEDURE [dbo].[site_VendorManager_InviteVendor]  
  
 @CompanyName    varchar(500),  
 @Address  varchar(500),  
 @Address2  varchar(500),  
 @City   varchar(500),  
 @StateKey  varchar(2),  
 @zip   varchar(150),  
 @FirstName  varchar(150),  
 @LastName  varchar(150),  
 @Work2   varchar(150),  
  @Password varchar(50),  
 @Email          varchar(500),  
 @Description    varchar(500),  
 @Fax   varchar(500),  
 @Website  varchar(500),           
 @Title       varchar(500),  
 @CompanyKey int = 0,  
 @Resource    int,  
 @companyvalue INT OUTPUT  
  
AS  
SET NOCOUNT ON  
  
declare @vendorkey int  
declare @companytype int  
declare @status int  
declare @insurancekey int  
  
declare @Resourcevalue int  
declare @PortalKey int  
select @companytype = LookUpKey from LookUp where Title = 'Company Vendor'  
Select @status = First_Value(LookUpKey) over(PARTITION BY Title order by lookUpTypeKey) from LookUp where Title = 'Pending'  
select @PortalKey = First_Value(PortalKey) over(PARTITION BY Title order by PortalKey) from Portal where PortalID = 'vendor'  
  
  
  insert into Company(Name,[State],[Address],Address2,City,Zip,Fax,Website,[Status],[Description],CompanyTypeKey,CompanyID,PortalKey)  
                        values(@CompanyName,@StateKey,@Address,@Address2,@City,@zip,@Fax,@Website,101,@Description  
         ,@companytype,NEWID(),3)  
  
           
     set @vendorkey = @@identity  
     select  @companyvalue = @@IDENTITY  
     declare @ResourceTypeKey int  
     select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'  
       
    Insert into Resource (CompanyKey,FirstName, LastName,ResourceTypeKey,CellPhone, Email,Fax, Address, Address2, City, State, Zip,DateAdded,LastModificationTime,PrimaryContact, Status)   
       values   
       (@vendorkey,@FirstName,@LastName,@ResourceTypeKey, @Work2, @Email, @Fax, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),1,101)  

	     declare @ResourceKey int   
      set @ResourceKey = @@IDENTITY  
     insert into [User](ResourceKey,Username,Password,DateAdded,LastModificationTime,Status)  
      values(@ResourceKey,@Email,@Password,getdate(),GETDATE(),101)  


    insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,1)  



    if(@CompanyKey = 0)  
    BEGIN  
    insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values((select r.companykey from Resource r where r.ResourceKey = @Resourcekey),@vendorkey,getdate(),101)  
    END  
    ELSE  
    BEGIN  
    insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values((select r.companykey from Resource r where r.ResourceKey = @Resourcekey),@vendorkey,getdate(),101)  
    END
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_InviteVendor_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[site_VendorManager_InviteVendor_New]  
  --site_VendorManager_InviteVendor_New 'adasddpo','','','',0,'','','','','','Oe58gljdfcwjVTIy6GQJc1Gh370CamYQwVbQATi6pgM=','','',0,0,9627,1062,0
 @CompanyName    varchar(500),  
 @Address  varchar(500),  
 @Address2  varchar(500),  
 @City   varchar(500),  
 @StateKey  varchar(2),  
 @zip   varchar(150),  
 @FirstName  varchar(150),  
 @LastName  varchar(150),  
 @Work2   varchar(150),  
 @Email          varchar(500),  
 @Password	nvarchar(500),
 @Description    varchar(500),  
 @Fax   varchar(500),  
 @Website  varchar(500),           
 @Title       varchar(500),  
 @CompanyKey int = 0,  
 @Resource    int,  
 @companyvalue INT OUTPUT  
  
AS  
SET NOCOUNT ON  
  
    if(@StateKey='0')
  begin
  set @StateKey=null
  end
declare @vendorkey int  
declare @companytype int  
declare @status int  
declare @insurancekey int  
  
declare @Resourcevalue int  
declare @PortalKey int  
select @companytype = LookUpKey from LookUp where Title = 'Company Vendor'  
Select @status = First_Value(LookUpKey) over(PARTITION BY Title order by lookUpTypeKey) from LookUp where Title = 'Pending'  
select @PortalKey = First_Value(PortalKey) over(PARTITION BY Title order by PortalKey) from Portal where PortalID = 'vendor'  
  
  
  insert into Company(Name,[State],[Address],Address2,City,Zip,Fax,Website,[Status],[Description],CompanyTypeKey,CompanyID,PortalKey)  
                        values(@CompanyName,@StateKey,@Address,@Address2,@City,@zip,@Fax,@Website,@status,@Description  
         ,@companytype,NEWID(),3)  
  
           
     set @vendorkey = @@identity  
     select  @companyvalue = @@IDENTITY  
     declare @ResourceTypeKey int  
     select  @ResourceTypeKey = LookUpKey  from LookUp where Title = 'Vendor'  
       
    Insert into Resource (CompanyKey,FirstName, LastName,ResourceTypeKey,CellPhone, Email,Fax, Address, Address2, City, State, Zip,DateAdded,LastModificationTime,PrimaryContact, Status)   
       values   
       (@vendorkey,@FirstName,@LastName,@ResourceTypeKey, @Work2, @Email, @Fax, @Address, @Address2, @City, @StateKey, @Zip, getdate(), GETDATE(),1,@status)  

	     declare @ResourceKey int   
      set @ResourceKey = @@IDENTITY  
     insert into [User](ResourceKey,Username,Password,DateAdded,LastModificationTime,Status)  
      values(@ResourceKey,@Email,@Password,getdate(),GETDATE(),@status)  


    insert into ServiceArea (VendorKey,Address,Address2,City,State,Zip,Radius) values(@vendorkey,@Address,@Address2,@City,@StateKey,@zip,1)  



    if(@CompanyKey = 0)  
    BEGIN  
    insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values((select r.companykey from Resource r where r.ResourceKey = @Resourcekey),@vendorkey,getdate(),@status)  
    END  
    ELSE  
    BEGIN  
    insert into CompanyVendor(CompanyKey,VendorKey,LastModificationTime,Status)values((select r.companykey from Resource r where r.ResourceKey = @Resourcekey),@vendorkey,getdate(),@status)  
    END  
  
      
  
  
   
    
  
  
    
   
  
  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_MarkDuplicate_Unapproved]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[site_VendorManager_MarkDuplicate_Unapproved]
@CompanyKey int,
@errorCode int OUTPUT
As
Begin
	declare @status int
	declare @st int

	select @st = LookUpTypeKey from LookUpType where Title = 'status'
	select @status = LookUpKey from LookUp where LookUpTypeKey = @st and Title = 'Duplicate'

	update Company set Status = @status where CompanyKey = @CompanyKey
End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Notes_BidRequestSelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




CREATE PROCEDURE [dbo].[site_VendorManager_Notes_BidRequestSelectAll]

@BidRequestKey int

AS
SET NOCOUNT ON
begin
select  NoteKey,Description,convert(varchar, LastModificationTime, 101) as LastModificationTime from Note where ObjectKey = @BidRequestKey
end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Pending_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- site_VendorManager_Pending_SelectIndexPaging 50,1,'','order by  name desc'





CREATE PROCEDURE [dbo].[site_VendorManager_Pending_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)
    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (u.Status in(select LookUpKey from lookUp where LookuptypeKey in(select LookUpTypeKey from LookUpType where Title = ''status'')
and Title = ''Pending''))
and (u.CompanyTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')
	 and Title in (''Vendor'',''Company Vendor'')))
	 and ((u.Name like  ''%'+@Search+'%'') and r.ResourceTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')
	 and Title in (''Vendor'',''Company Vendor'')) or ((u.Name like ''%'+@Search+'%'') or (r.FirstName + '' '' + r.LastName like ''%'+@Search+'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] 
  inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+@Search+'%'') 
  or ( ''%'+@Search+'%'' = '''' )))' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u
   
	inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
		  inner join  Resource as r on R.CompanyKey = U.CompanyKey
		  inner join CompanyVendor cv on cv.VendorKey = u.CompanyKey
		  inner join LookUp as look on look.LookUpKey = u.Status
   '+@qrywhere + ''

set @qry = '   select * from ( 
 select u.Name,u.CompanyKey,look.Title as Favorite,r.Work,r.Email,r.Cellphone
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey
    FOR XML PATH('''')
),1,1,'''')) as title , r.FirstName + '' '' + isNull(r.LastName,'''') as VendorName,
   row_number() over('+@Sort+') as  rownum, @total  as TotalRecord from [Company] u 
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
		  inner join  Resource as r on R.CompanyKey = U.CompanyKey
		  inner join CompanyVendor cv on cv.VendorKey = u.CompanyKey
		  inner join LookUp as look on look.LookUpKey = u.Status
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Resource_SelectByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


---site_VendorManager_Resource_SelectByCompanyKey 6375,0

CREATE Procedure [dbo].[site_VendorManager_Resource_SelectByCompanyKey]  
@CompanyKey int,  
@errorCode int output  
AS  
Begin  
SELECT    
 [Resource].[ResourceKey],     
 [Resource].[CompanyKey],     
 [Resource].[ResourceTypeKey],     
 [Resource].[FirstName],     
 [Resource].[LastName],     
 [Resource].[Title],     
 [Resource].[Email],     
 [Resource].[Email2],     
 [Resource].[CellPhone],     
 [Resource].[HomePhone],     
 [Resource].[HomePhone2],     
 [Resource].[Work],     
 [Resource].[Work2],     
 [Resource].[Fax],     
 [Resource].[Address],     
 [Resource].[Address2],     
 [Resource].[City],     
 [Resource].[State],     
 [Resource].[Zip],     
 [Resource].[PrimaryContact],     
 [Resource].[Description],     
 [Resource].[DateAdded],     
 [Resource].[LastModificationTime],     
 [Resource].[Status] ,    
 (select top(1) radius from  ServiceArea where  vendorkey =@CompanyKey ) as Radius,    
 'XXXX XXXX XXXX ' + RIGHT(PM.MaskedCCNumber, 4) as MaskedCCNumber    
 ,    
 us.Username,    
 us.AccountLocked,    
 c.Name as CompanyName,    
 s.Title as StateName    
     
FROM    
 [Resource]     
 inner  join [User] as us on us.ResourceKey = Resource.ResourceKey    
 inner  join Company as c on c.CompanyKey = Resource.CompanyKey    
 left join State as s on s.StateKey = Resource.State    
 left join PaymentMethod as PM on c.CompanyKey = PM.CompanyKey    
WHERE [Resource].[CompanyKey] = @CompanyKey and [Resource].PrimaryContact = 1    
-- Get the Error Code for the statement just executed.    
SELECT @errorCode = @@ERROR  
End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Resource_SelectOneByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  -- site_VendorManager_Resource_SelectOneByCompanyKey 6292, 0  



CREATE PROCEDURE [dbo].[site_VendorManager_Resource_SelectOneByCompanyKey]    
 @CompanyKey INT,    
 @errorCode INT OUTPUT    
AS    
SET NOCOUNT ON    
SELECT    
 [Resource].[ResourceKey],     
 [Resource].[CompanyKey],     
 [Resource].[ResourceTypeKey],     
 [Resource].[FirstName],     
 [Resource].[LastName],     
 [Resource].[Title],     
 [Resource].[Email],     
 [Resource].[Email2],     
 [Resource].[CellPhone],     
 [Resource].[HomePhone],     
 [Resource].[HomePhone2],     
 [Resource].[Work],     
 [Resource].[Work2],     
 [Resource].[Fax],     
 [Resource].[Address],     
 [Resource].[Address2],     
 [Resource].[City],     
 [Resource].[State],     
 [Resource].[Zip],     
 [Resource].[PrimaryContact],     
 [Resource].[Description],     
 [Resource].[DateAdded],     
 [Resource].[LastModificationTime],     
 [Resource].[Status] ,    
 (select top(1) radius from  ServiceArea where  vendorkey =@CompanyKey ) as Radius,    
 'XXXX XXXX XXXX ' + RIGHT(PM.MaskedCCNumber, 4) as MaskedCCNumber    
 ,    
 us.Username,    
 us.AccountLocked,    
 c.Name as CompanyName,    
 s.Title as StateName    
     
FROM    
 [Resource]     
 inner  join [User] as us on us.ResourceKey = Resource.ResourceKey    
 inner  join Company as c on c.CompanyKey = Resource.CompanyKey    
 left join State as s on s.StateKey = Resource.State    
 left join PaymentMethod as PM on c.CompanyKey = PM.CompanyKey    
WHERE [Resource].[CompanyKey] = @CompanyKey and [Resource].PrimaryContact = 1    
-- Get the Error Code for the statement just executed.    
SELECT @errorCode = @@ERROR  
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Resource_SelectOneForInvite]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_VendorManager_Resource_SelectOneForInvite  7544,0


CREATE PROCEDURE [dbo].[site_VendorManager_Resource_SelectOneForInvite]    
 @CompanyKey INT,    
 @errorCode INT OUTPUT    
AS    
SET NOCOUNT ON    
SELECT   
 [Resource].[ResourceKey],     
 [Resource].[CompanyKey],     
 [Resource].[ResourceTypeKey],     
 [Resource].[FirstName],     
 [Resource].[LastName],     
 [Resource].[Title],     
 [Resource].[Email],     
 [Resource].[Email2],     
 [Resource].[CellPhone],     
 [Resource].[HomePhone],     
 [Resource].[HomePhone2],     
 [Resource].[Work],     
 [Resource].[Work2],     
 [Resource].[Fax],     
 [Resource].[Address],     
 [Resource].[Address2],     
 [Resource].[City],     
 [Resource].[State] as StateName,  
 [Resource].[State],     
 [Resource].[Zip],     
 [Resource].[PrimaryContact],     
 [Resource].[Description],     
 [Resource].[DateAdded],     
 [Resource].[LastModificationTime],     
 [Resource].[Status] ,    
 us.Username,    
 us.AccountLocked,  
 c.Name as CompanyName,  
 pm.MaskedCCNumber  
FROM    
 [Resource]     
 left join [User] as us on us.ResourceKey = Resource.ResourceKey    
 left join Company as c on c.CompanyKey = Resource.CompanyKey    
 left join State as s on s.StateKey = Resource.State    
 left Join  PaymentMethod  pm on pm.CompanyKey =  Resource.CompanyKey  
WHERE [Resource].[CompanyKey] = @CompanyKey    
-- Get the Error Code for the statement just executed.    
SELECT @errorCode = @@ERROR
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- site_VendorManager_SelectIndexPaging 50,1,'','order by  name desc'





CREATE PROCEDURE [dbo].[site_VendorManager_SelectIndexPaging]
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max)
    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (lu.Title = ''Company Vendor'') and  ((u.Name like  ''%'+ @Search +'%'') or (r.FirstName + '' '' + r.LastName like ''%'+ @Search +'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] 
  inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+ @Search +'%'') 
  or ( '''+@Search+''' = '''' ))' 
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u
   
	inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey
	inner join CompanyVendor as vc on vc.VendorKey = u.CompanyKey 	 
	inner join LookUp as look on look.LookUpKey = vc.Status
		  inner join  Resource as r on R.CompanyKey = U.CompanyKey
   '+@qrywhere + ''

set @qry = '   select * from ( 
 select u.Name, u.CompanyKey,look.Title as Favorite 
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey
    FOR XML PATH('''')
),1,1,'''')) as title , r.FirstName + '' '' + r.LastName as Work,
   row_number() over('+@Sort+') as  rownum, @total  as TotalRecord from [Company] u 
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey 	    
	  inner join CompanyVendor as vc on vc.VendorKey = u.CompanyKey 	 
	  inner join LookUp as look on look.LookUpKey = vc.Status
	  inner join  Resource as r on R.CompanyKey = U.CompanyKey
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          
END
GO
/****** Object:  StoredProcedure [dbo].[site_vendorManager_SelectOneByvendorKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
        
        
        
        -- site_vendorManager_SelectOneByvendorKey 6292,0
CREATE PROCEDURE [dbo].[site_vendorManager_SelectOneByvendorKey]        
 @CompanyKey INT,        
 @errorCode INT OUTPUT        
AS        
SET NOCOUNT ON        
        
 select s.Title ,Vs.VendorKey,Vs.ServiceKey,ps.CompanyKey, (select top(1) radius from  ServiceArea where  vendorkey =@CompanyKey ) as Radius, ps.Name as CompanyName,LegalName,rs.FirstName + ' ' + rs.LastName as Name,ps.Work,ps.Work2,ps.Fax,Website,ps.Address,ps.Address2,ps.City,ps.State,ps.Zip,rs.CellPhone, rs.Email,ps.name from [Company] ps        
inner join  Resource rs on rs.CompanyKey = ps.CompanyKey        
left join VendorService as Vs on ps.CompanyKey=Vs.VendorKey     
left join Service s on s.ServiceKey = Vs.ServiceKey         
--inner  join ServiceArea as SeA on ps.CompanyKey=SeA.VendorKey       
where  Ps.CompanyKey= @CompanyKey        
---vendoe  service  table  Inner  join  pending.        
-- Get the Error Code for the statement just executed.        
SELECT @errorCode = @@ERROR        
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_vendorManager_SelectOneByvendorKeyForInviteView]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


      
      
      
      
CREATE PROCEDURE [dbo].[site_vendorManager_SelectOneByvendorKeyForInviteView]      
 @CompanyKey INT,      
 @errorCode INT OUTPUT      
AS      
SET NOCOUNT ON      
      
 select ps.CompanyKey, ps.Name as CompanyName,LegalName,rs.FirstName + ' ' + rs.LastName as Name,ps.Work,ps.Work2,ps.Fax,Website,ps.Address,ps.Address2,ps.City,ps.State,ps.Zip,rs.CellPhone, rs.Email,ps.name from [Company] ps      
inner join  Resource rs on rs.CompanyKey = ps.CompanyKey
--inner  join ServiceArea as SeA on ps.CompanyKey=SeA.VendorKey     
where  Ps.CompanyKey= @CompanyKey      
---vendoe  service  table  Inner  join  pending.      
-- Get the Error Code for the statement just executed.      
SELECT @errorCode = @@ERROR      
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Service_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[site_VendorManager_Service_Delete]
	@CompanyKey int,
	@VendorServiceKey  int
	

AS
SET NOCOUNT ON
  delete  from  VendorService   where  VendorServiceKey = @VendorServiceKey and VendorKey = @CompanyKey;

select @@ERROR as Error
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Unapproved_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
    
    
    
    
    
    
    
-- site_VendorManager_Unapproved_SelectIndexPaging 50,1,'','order by Name asc','1',1062    
    
    
    
    
    
CREATE PROCEDURE [dbo].[site_VendorManager_Unapproved_SelectIndexPaging]    
@PageSize int,                               
@PageIndex int,                               
@Search nvarchar(max),                                  
@Sort nvarchar(max),    
@Duplicate nvarchar(max),  
@ResourceKey int = 0    
        
AS    
BEGIN    
  declare @qrywhere varchar(max)                        
  declare @qrytotal varchar(max)                         
  declare @qry varchar(max)        
          declare @qryduplicate varchar(max)  
        set @qrywhere = 'where (u.Status in(select LookUpKey from lookUp where LookuptypeKey in(select LookUpTypeKey from LookUpType where Title = ''status'')    
and (Title = ''Unapproved'')))    
and (u.CompanyTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')    
  and Title in (''Vendor'',''Company Vendor'')))    
  and ((u.Name like ''%'+@Search+'%'') and r.ResourceTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')    
  and Title in (''Vendor'',''Company Vendor'')) or ((u.Name like ''%'+@Search+'%'') or (r.FirstName + '' '' + r.LastName like ''%'+@Search+'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service]     
  left join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+@Search+'%'')     
  or ( ''%'+@Search+'%'' = '''' )))'   
  
       set @qryduplicate = 'where (u.Status in(select LookUpKey from lookUp where LookuptypeKey in(select LookUpTypeKey from LookUpType where Title = ''status'')    
and (Title = ''Duplicate'')))    
and (u.CompanyTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')    
  and Title in (''Vendor'',''Company Vendor'')))    
  and ((u.Name like ''%'+@Search+'%'') and r.ResourceTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')    
  and Title in (''Vendor'',''Company Vendor'')) or ((u.Name like ''%'+@Search+'%'') or (r.FirstName + '' '' + r.LastName like ''%'+@Search+'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service]     
  left join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+@Search+'%'')     
  or ( ''%'+@Search+'%'' = '''' )))' 
  


if(@Duplicate  = '1')      
Begin  
 set @qrywhere = @qryduplicate      
End   
  

    
  
       
   

  
  
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u    
       
 left join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey    
    left join  Resource as r on R.CompanyKey = U.CompanyKey    
    left join CompanyVendor cv on cv.VendorKey = u.CompanyKey    
    left join LookUp as look on look.LookUpKey = u.Status    
        
   '+@qrywhere + ''    
    


set @qry = '   select * from (     
 select u.Name,u.CompanyKey,look.Title as Favorite,r.Work,r.Email     
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] left join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey    
    FOR XML PATH('''')    
),1,1,'''')) as title , r.FirstName + '' '' + r.LastName as VendorName,    
(select (CASE WHEN (ab.ModuleKey = 705 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 1 ELSE 0 END)) AS priority,    
  (CASE WHEN (ab.ModuleKey = 705 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN ab.Id ELSE 0 END)as NotificationId,    
  (CASE WHEN (ab.ModuleKey = 705 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN ab.NotificationType ELSE null END)as NotificationType,    
   row_number() over('+@Sort+') as  rownum, @total  as TotalRecord from [Company] u     
      left join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey    
    left join  Resource as r on R.CompanyKey = U.CompanyKey    
    left join CompanyVendor cv on cv.VendorKey = u.CompanyKey    
    left join LookUp as look on look.LookUpKey = u.Status    
    LEFT Outer Join ABNotification ab on ab.ObjectKey = u.CompanyKey and ab.ForResource = '+Convert(varchar,@ResourceKey)+'    
   '+@qrywhere+'    
       
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)     
      print(@qrytotal + @qry)      
   exec( @qrytotal + @qry)              
END 
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Unapproved_SelectIndexPagingPriority]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
-- site_VendorManager_Unapproved_SelectIndexPagingPriority 10,1,'','order by name desc',1062  
  
  
CREATE PROCEDURE [dbo].[site_VendorManager_Unapproved_SelectIndexPagingPriority]  
@PageSize int,                             
@PageIndex int,                             
@Search nvarchar(max),                                
@Sort nvarchar(max),
@Duplicate nvarchar(max),
@ResourceKey int  
      
AS  
BEGIN  
  declare @qrywhere varchar(max) 
    declare @qryduplicate varchar(max) 
  declare @qrytotal varchar(max)                       
  declare @qry varchar(max)      
      
if(@Duplicate  = null)    
Begin    
 set @qrywhere = @qrywhere    
End 
if(@Duplicate  = '1')    
Begin    
 set @qrywhere = @qryduplicate    
End 



  set @qrywhere = 'where (u.Status in(select LookUpKey from lookUp where LookuptypeKey in(select LookUpTypeKey from LookUpType where Title = ''status'')  
and (Title = ''Unapproved'')))  
and (u.CompanyTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')  
  and Title in (''Vendor'',''Company Vendor'')))  
  and ((u.Name like ''%'+@Search+'%'') and r.ResourceTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')  
  and Title in (''Vendor'',''Company Vendor'')) or ((u.Name like ''%'+@Search+'%'') or (r.FirstName + '' '' + r.LastName like ''%'+@Search+'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service]   
  inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+@Search+'%'')   
  or ( ''%'+@Search+'%'' = '''' ))) '   
    

	 set @qryduplicate = 'where (u.Status = (select cs.LookUpKey from lookup cs where cs.LookUpTypeKey = 1 and cs.Title = ''Duplicate''))  
  and ((u.Name like ''%'+@Search+'%'') and r.ResourceTypeKey in (select LookUpKey from LookUp where LookUpTypeKey in(select LookUpTypeKey from LookUpType where Title = ''Company Type'')  
   or ((u.Name like ''%'+@Search+'%'') or (r.FirstName + '' '' + r.LastName like ''%'+@Search+'%'') or ( (select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service]   
  inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey FOR XML PATH('''')),1,1,'''')) like ''%'+@Search+'%'')   
  or ( ''%'+@Search+'%'' = '''' ))) '   
    


  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Company] as u  
     
 inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey  
    inner join  Resource as r on R.CompanyKey = U.CompanyKey  
    inner join CompanyVendor cv on cv.VendorKey = u.CompanyKey  
    inner join LookUp as look on look.LookUpKey = u.Status  
      
   '+@qrywhere  
  
set @qry = '   ;with cusTable as (   
 select u.Name,u.CompanyKey,look.Title as Favorite,r.Work,r.Email   
 ,(select STUFF((select '','' + Convert(nvarchar(max), [Service].Title) from [Service] inner join [VendorService] as vs on vs.servicekey = [Service].servicekey where vs.VendorKey  = u.CompanyKey  
    FOR XML PATH('''')  
),1,1,'''')) as title , r.FirstName + '' '' + r.LastName as VendorName,  
 (select (CASE WHEN (ab.ModuleKey = 705 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN 1 ELSE 0 END)) AS priority,  
  (CASE WHEN (ab.ModuleKey = 705 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN ab.Id ELSE 0 END)as NotificationId,  
  (CASE WHEN (ab.ModuleKey = 705 and ab.ForResource = '+CONVERT(varchar,@ResourceKey)+' and ab.Status = 900) THEN ab.NotificationType ELSE null END)as NotificationType,  
    @total  as TotalRecord from [Company] u   
      inner join LookUp as lu on lu.LookUpKey = u.CompanyTypeKey  
    inner join  Resource as r on R.CompanyKey = U.CompanyKey  
    inner join CompanyVendor cv on cv.VendorKey = u.CompanyKey  
    inner join LookUp as look on look.LookUpKey = u.Status  
    LEFT Outer Join ABNotification ab on ab.ObjectKey = u.CompanyKey and ab.status = 900 and ab.ForResource = '+Convert(varchar,@ResourceKey)+'  
   '+@qrywhere+'  
  ) , q2 as( select * from(select *,ROW_NUMBER() over (partition by priority '+@Sort+') as rownum1 from cusTable)i)  
  select * from (select *,ROW_NUMBER() over (order by priority desc) as rownum from q2)k  
 where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize)   
   
      print(@qrytotal + @qry)  
  exec( @qrytotal + @qry)  
END  
GO
/****** Object:  StoredProcedure [dbo].[site_vendorManager_Unapproved_SelectOneByvendorKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- site_vendorManager_SelectOneByvendorKey 3334,0

CREATE PROCEDURE [dbo].[site_vendorManager_Unapproved_SelectOneByvendorKey]
	@CompanyKey INT,
	@errorCode INT OUTPUT
AS
SET NOCOUNT ON

 select ps.CompanyKey, ps.Name as CompanyName,LegalName,rs.FirstName + ' ' + rs.LastName as VendorName ,l2.Title as Favorite,(select top(1) radius from  ServiceArea where  vendorkey =@CompanyKey ) as Radius,
 ps.Work,ps.Work2,ps.Fax,Website,ps.Address,ps.Address2,ps.City,ps.State,ps.Zip,rs.CellPhone, rs.Email,ps.name from [Company] ps
left join  Resource rs on rs.CompanyKey = ps.CompanyKey
left join Service s on s.ServiceKey = ps.CompanyKey
left join LookUp l on l.LookUpKey = ps.CompanyTypeKey
left join LookUp l2 on l2.LookUpKey = ps.Status
where ps.Status in(select LookUpKey from lookUp where LookuptypeKey in(select LookUpTypeKey from LookUpType where Title = 'status')
and Title = 'Unapproved') and Ps.CompanyKey= @CompanyKey
---vendoe  service  table  Inner  join  pending.
-- Get the Error Code for the statement just executed.
SELECT @errorCode = @@ERROR
print(@errorCode)
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_Update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[site_VendorManager_Update]
    @companyKey     INT,


	@companyName    varchar(150),
	@Work			varchar(50),
	@Work2			varchar(50),
	@email          varchar(150),
	@Address		varchar(100),
	@Address2		varchar(100),
	@City			varchar(50),
	@StateKey		varchar(2),
	@zip			varchar(11),
	@Fax			varchar(50),
	@Website		varchar(200),
	@Radius int,
	
	@status INT							
	
AS
SET NOCOUNT ON

UPDATE [Company]   
SET

	[Name] = @companyName,
	[Address] = @Address,
	[Address2] = @Address2,
	[City] = @City,
	[State] = @StateKey,
	[Work] = @work,
	[Work2] = @Work2,
	[Zip] = @zip,
	[Fax] = @Fax,
	[Website] = @Website

	
	
	
WHERE [Company].[CompanyKey] = @companyKey

 update [Resource] set Email = @email where CompanyKey = @companyKey

 update ServiceArea set Radius=@Radius where VendorKey=@companyKey
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_User_ChangePassword]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[site_VendorManager_User_ChangePassword]
	--@email varchar(200),
	@UserId int,
	@NewPassword varchar(max),
	@errorCode INT OUTPUT
	
AS
Begin
update [user] set Password = @NewPassword, FirstTimeAccess = 0  where UserKey = @UserId 

SELECT @errorCode = @@ERROR

End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_WorkOrder_BidReqKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_VendorManager_WorkOrder_BidReqKey 3272,2020
CREATE Procedure [dbo].[site_VendorManager_WorkOrder_BidReqKey]
@CompanyKey int,
@BidRequestKey int
As
Begin
select br.BidRequestKey,br.PropertyKey, 		
		br.ResourceKey, br.ServiceKey,c.CompanyKey,
		br.Title, br.BidDueDate,br.StartDate,
		br.EndDate, br.Description,br.DateAdded, 	
		br.LastModificationTime, bv.RespondByDate, s.Title as ServiceName,pr.Title as PropertyName,pr.NumberOfUnits,
		pr.Address,pr.Address2,pr.City,pr.State,pr.Zip,
		c.Name as CompanyName,r.FirstName+' '+r.LastName as VendorName,r.Email,r.CellPhone,
		br.PropertyKey, br.BidRequestStatus from [BidRequest] br 
		inner join BidVendor bv on bv.BidRequestKey = br.BidRequestKey
		inner join Service s on s.ServiceKey = br.ServiceKey
		inner join Property pr on pr.PropertyKey = br.PropertyKey
		inner join Company c on c.CompanyKey = bv.VendorKey
		inner join Resource r on r.ResourceKey = br.ResourceKey
   where (bv.VendorKey = @CompanyKey and ModuleKey in (select ModuleKey from Module
   where Title = 'Work Orders') and br.BidRequestKey = @BidRequestKey)
End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManager_WorkOrder_SelectIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [site_VendorManager_WorkOrder_SelectIndexPaging] 3216,50,1,'','order by  Bidrequest.title desc',0





CREATE PROCEDURE [dbo].[site_VendorManager_WorkOrder_SelectIndexPaging]
@companyKey int,
@PageSize int,                           
@PageIndex int,                           
@Search nvarchar(max),                              
@Sort nvarchar(max),
@errorCode int OUTPUT
    
AS
BEGIN
  declare @qrywhere varchar(max)                    
  declare @qrytotal varchar(max)                     
  declare @qry varchar(max)    
    
  set @qrywhere = 'where (bv.VendorKey = '+ Convert(varchar,@companyKey)+' and ModuleKey in (select ModuleKey from
  Module where Title = ''Work Orders'')  and ((BidRequest.Title like  ''%'+ @Search +'%'')
  or ( '''+@Search+''' = '''' )))' 
  
  set @qrytotal =   'declare @total int select  @total  = count(*) from [BidRequest]
	inner join BidVendor bv on BidRequest.BidRequestKey = bv.BidRequestKey
	inner  join  PropertyResource prs on  Prs.PropertyKey = BidRequest.PropertyKey
    inner join property pr on pr.PropertyKey = BidRequest.propertykey
   '+@qrywhere+''

set @qry = '   
	
	select * from (select [BidRequest].[BidRequestKey], ' +
		'		[BidRequest].[PropertyKey], ' +
		'		[BidRequest].[ResourceKey], ' +
		'		[BidRequest].[ServiceKey], ' +
		'		[BidRequest].[Title], ' +
		'		[BidRequest].[BidDueDate], ' +
		'		[BidRequest].[StartDate], ' +
		'		[BidRequest].[EndDate], ' +
		'		[BidRequest].[Description], ' +
		'		[BidRequest].[DateAdded], ' +
		'		[BidRequest].[LastModificationTime], ' +
		'		[BidRequest].[BidRequestStatus],l.Title as BidStatus, pr.Title as Propertyname, pr.NumberOfUnits, ' +
		'	row_number() over(' + @Sort +') as  rownum, @total as TotalRecord from [BidRequest]' +
		'	inner join BidVendor bv on BidRequest.BidRequestKey = bv.BidRequestKey' +
		'	inner join property pr on pr.PropertyKey = BidRequest.propertykey
		inner  join  PropertyResource prs on  Prs.PropertyKey = BidRequest.PropertyKey
		inner join Lookup l on l.LookupKey = [BidRequest].[BidRequestStatus]
      
   '+@qrywhere+'
   
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @pageSize  ) + 1 )+ ' and '  + Convert(varchar(10),( (@pageIndex-1) * @pageSize  ) + @pageSize) 
      print(@qrytotal + @qry)             
      exec( @qrytotal + @qry)          

	  set @errorCode = @@ERROR
END
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManagerDocument_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_VendorManagerDocument_Delete]
	@DocumentKey int,
	@errorCode int output
	

AS
SET NOCOUNT ON
  delete  from  Document where  DocumentKey = @DocumentKey;

select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManagerDocument_SelectAllByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- site_VendorManagerDocument_SelectAllByCompanyKey 3307

CREATE PROCEDURE [dbo].[site_VendorManagerDocument_SelectAllByCompanyKey]

@CompanyKey int

AS
SET NOCOUNT ON
begin
select i.InsuranceKey, i.VendorKey, i.PolicyNumber,i.InsuranceAmount,i.AgentName,i.Email,c.Name as CompanyName,d.DocumentKey,
		d.FileName, d.ModuleKey, d.FileSize,i.StartDate,i.EndDate,i.RenewalDate from Insurance i
	 join Company c on c.CompanyKey = i.VendorKey
	left join Document d on d.ObjectKey = i.InsuranceKey
		where d.ModuleKey in (select ModuleKey from Module where Title = 'Insurance') and c.CompanyKey = @CompanyKey  
		

end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManagerDocument_SelectAllByCompanyKeyV2]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- site_VendorManagerDocument_SelectAllByCompanyKey 6497

CREATE PROCEDURE [dbo].[site_VendorManagerDocument_SelectAllByCompanyKeyV2]

@CompanyKey int

AS
SET NOCOUNT ON
begin
select i.InsuranceKey, i.VendorKey, i.PolicyNumber,i.InsuranceAmount,i.AgentName,i.Email,c.Name as CompanyName,d.DocumentKey,
		d.FileName, d.ModuleKey, d.FileSize,convert(varchar(10),i.StartDate,101) as StartDate,convert(varchar(10),i.EndDate,101) as EndDate
		,convert(varchar(10),i.RenewalDate,101) as RenewalDate from Insurance i
	 join Company c on c.CompanyKey = i.VendorKey
	left join Document d on d.ObjectKey = i.InsuranceKey
		where c.CompanyKey = @CompanyKey  
		

end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManagerDocument_SelectByCompanyAndInsuranceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_VendorManagerDocument_SelectByCompanyAndInsuranceKey 3307,1006

CREATE PROCEDURE [dbo].[site_VendorManagerDocument_SelectByCompanyAndInsuranceKey]

@CompanyKey int,
@InsuranceKey int

AS
SET NOCOUNT ON
begin
select i.InsuranceKey, i.VendorKey, i.PolicyNumber,i.InsuranceAmount,i.AgentName,i.Email,c.Name as CompanyName,d.DocumentKey,
		d.FileName, d.ModuleKey, d.FileSize, i.StartDate,i.EndDate,i.RenewalDate from Insurance i
		join Company c on c.CompanyKey = i.VendorKey
		join Document d on d.ObjectKey = i.InsuranceKey
		where c.CompanyKey = @CompanyKey and i.InsuranceKey = @InsuranceKey
		and d.ModuleKey in (select ModuleKey from Module where Title = 'Insurance')
end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManagerDocument_SelectByCompanyAndInsuranceKeyV2]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- site_VendorManagerDocument_SelectByCompanyAndInsuranceKey 3307,1006

CREATE PROCEDURE [dbo].[site_VendorManagerDocument_SelectByCompanyAndInsuranceKeyV2]

@CompanyKey int,
@InsuranceKey int

AS
SET NOCOUNT ON
begin
select i.InsuranceKey, i.VendorKey, i.PolicyNumber,i.InsuranceAmount,i.AgentName,i.Email,c.Name as CompanyName,d.DocumentKey,
		d.FileName, d.ModuleKey, d.FileSize, convert(varchar(10),i.StartDate,101) as StartDate,convert(varchar(10),i.EndDate,101) as EndDate,
		convert(varchar(10),i.RenewalDate,101) as RenewalDate from Insurance i
		join Company c on c.CompanyKey = i.VendorKey
		left join Document d on d.ObjectKey = i.InsuranceKey
		where c.CompanyKey = @CompanyKey and i.InsuranceKey = @InsuranceKey
		--and d.ModuleKey in (select ModuleKey from Module where Title = 'Insurance')
end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManagerDocument_SelectByCompanyAndInsuranceKeyV2_New]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- site_VendorManagerDocument_SelectByCompanyAndInsuranceKeyV2_New 3217,2021  
  
CREATE PROCEDURE [dbo].[site_VendorManagerDocument_SelectByCompanyAndInsuranceKeyV2_New]  
  
@CompanyKey int,  
@InsuranceKey int  
  
AS  
SET NOCOUNT ON  
begin  
declare @ResourceKey int  
select  @ResourceKey = ResourceKey from Resource where CompanyKey = @CompanyKey  
select distinct i.InsuranceKey, i.VendorKey, i.PolicyNumber,i.InsuranceAmount,i.AgentName,i.Email,c.Name as CompanyName,d.DocumentKey,  
  d.FileName, d.ModuleKey, d.FileSize, convert(varchar(10),i.StartDate,101) as StartDate,convert(varchar(10),i.EndDate,101) as EndDate,  
  convert(varchar(10),i.RenewalDate,101) as RenewalDate,  
  (select (case when (ab.ModuleKey = 302 and ab.ForResource = @ResourceKey and ab.Status = 900)then 1 Else 0 End)) As priority,  
  (select top 1 Id from ABNotification ab1 where ab.ModuleKey = 302 and ab1.ObjectKey = ab.ObjectKey and ab.Status = 900 order by ab1.Id desc) As NotificationId,  
  (select top 1 NotificationType from ABNotification ab1 where ab.ModuleKey = 302 and ab1.ObjectKey = ab.ObjectKey and ab.Status = 900 order by ab1.Id desc) As NotificationType  
  
  from Insurance i  
  join Company c on c.CompanyKey = i.VendorKey  
  left join Document d on d.ObjectKey = i.InsuranceKey  
  Left Outer Join ABNotification ab on ab.ObjectKey = i.InsuranceKey and ab.ForResource = @ResourceKey  
  where c.CompanyKey = @CompanyKey and i.InsuranceKey = @InsuranceKey  
  --and d.ModuleKey in (select ModuleKey from Module where Title = 'Insurance')  
end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorManagerService_GetAllByCompanyKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--site_VendorManagerService_GetAllByCompanyKey 3218
CREATE  PROCEDURE [dbo].[site_VendorManagerService_GetAllByCompanyKey]
@ServiceKey int
AS
SET NOCOUNT ON
begin
select s.Title,vs.ServiceKey,vs.VendorServiceKey,vs.VendorKey from Service  as s 
				inner join VendorService as vs on vs.ServiceKey = s.ServiceKey
				inner join Company as c on c.CompanyKey = vs.VendorKey
				where c.CompanyKey = @ServiceKey

end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorProperty_GetAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[site_VendorProperty_GetAll]
@ResourceKey int
AS
begin
select PropertyKey, TRIM(Title) as Title 
from [Property] 
where CompanyKey in (select r.CompanyKey from Resource r where r.ResourceKey = @ResourceKey)
order by Title asc
end
GO
/****** Object:  StoredProcedure [dbo].[site_vendorRating_Insert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
--USP_Resource_Delete 1006,0  
CREATE PROCEDURE [dbo].[site_vendorRating_Insert]  
 @Message nvarchar(max),  
 @Rating1 int,
 @Rating2 int, 
 @Rating3 int, 
 @ResourceKey int,  
 @BidRequestKey int,  
 @errorCode int output  
   
  
AS  
SET NOCOUNT ON  
  declare  @vendorKey int  
   
  select @vendorKey = (select top(1)  VendorKey   from  BidVendor where  BidRequestKey = @BidRequestKey)  
  
  
 
  insert  into   VendorRating  (VendorKey, ResourceKey, RatingOne, RatingTwo, RatingThree, RatingFour,RatingFive, LastModificationTime,Message)  
  values (@vendorKey,@ResourceKey,@Rating1,@Rating2,@Rating3,null,null,getdate(),@Message)  

   
select @errorCode  = @@ERROR  
-- Get the Error Code for the statement just executed.  
GO
/****** Object:  StoredProcedure [dbo].[site_Vendors_invoicesIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [site_Vendors_invoicesIndexPaging] 50,1,'','order by rs.Email  desc'   
CREATE PROCEDURE [dbo].[site_Vendors_invoicesIndexPaging]    
@ReportPageSize int,                               
@PageIndex int,                               
@Search nvarchar(max),                                  
@Sort nvarchar(max)   
   
AS     
BEGIN    
  declare @qrywhere varchar(max)                        
  declare @qrytotal varchar(max)                         
  declare @qry varchar(max)        
        
  --set @qrywhere = 'where (FirstName like  ''%'+ @Search +'%'') or (LastName like ''%'+ @Search +'%'')  or (CellPhone like ''%'+ @Search +'%'')  or FirstName + ' ' LastName like ''%'+ @Search +'%'')     
  set @qrywhere = ' where (Iv.Balance != 0 ) And (Cy.LegalName like ''%' + @Search + '%'' Or ''' + @Search + ''' = '''')'
 
    
     
  set @qrytotal =   'declare @total int  select  @total  = count(*) from [Invoice] as Iv  inner Join Company Cy on Cy.CompanyKey=Iv.VendorKey '+@qrywhere + ''     
    
  set @qry = '   select * from ( select   (select top 1 rs.FirstName +'' ''+rs.LastName from Resource rs where rs.CompanyKey = Cy.CompanyKey and rs.primarycontact = 1) as Name, (select top 1 rs.Email from Resource rs where rs.CompanyKey = Cy.CompanyKey an
d rs.primarycontact = 1) as Email,Iv.Balance As Balance,Iv.TransactionDate As InvoiceDate,Cy.Name As CompanyName,
  @total  as TotalRecord,    
   row_number() over('+@Sort+') as  rownum from [Invoice] as Iv    
   inner Join Company Cy on Cy.CompanyKey=Iv.VendorKey
       
   '+@qrywhere+'      
  ) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)     
      print(@qrytotal + @qry)                 
      exec( @qrytotal + @qry)              
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendors_with_the_most_bids_acceptedIndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  
-- [site_Vendors_with_the_most_bids_acceptedIndexPaging] 50,1
CREATE PROCEDURE [dbo].[site_Vendors_with_the_most_bids_acceptedIndexPaging]      
@ReportPageSize int,
@PageIndex int
AS
BEGIN
  declare @qrytotal varchar(max)                           
  declare @qry varchar(max)       
  
     
set @qrytotal = 'declare @total int  select @total = count(vendorname)  from ( select count(BidKey) as AcceptedBids, c.name as vendorname from bid b 
inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey 
inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
inner join company c on c.companykey = bv.vendorkey
where br.modulekey = 106 and b.BidStatus = 802   group by c.name) i'   
      
set @qry = '
select * from (select count(BidKey) as AcceptedBids, c.name as vendorname,
@total  as TotalRecord, row_number() over(order by count(BidKey) desc) as  rownum  
  from bid b 
inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey 
inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
inner join company c on c.companykey = bv.vendorkey
where br.modulekey = 106 and b.BidStatus = 802   group by c.name  
) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)       
print(@qrytotal + @qry)                   
exec( @qrytotal + @qry)  
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendors_with_the_most_bids_not_accepted_IndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--site_Vendors_with_the_most_bids_not_accepted_IndexPaging 100,1
CREATE PROCEDURE [dbo].[site_Vendors_with_the_most_bids_not_accepted_IndexPaging]          
@ReportPageSize int,                                     
@PageIndex int
AS    
BEGIN
  declare @qrytotal varchar(max)                           
  declare @qry varchar(max)       
  
     
set @qrytotal = 'declare @total int  select @total = count(vendorname)  from ( select count(BidKey) as RejectedBids, c.name as vendorname from bid b 
inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey 
inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
inner join company c on c.companykey = bv.vendorkey
where b.BidStatus = 803 or bv.BidVendorStatus = 803   group by c.name) i'   
      
set @qry = '
select * from (select count(BidKey) as RejectedBids, c.name as vendorname,
@total  as TotalRecord, row_number() over(order by count(BidKey) desc) as  rownum  
  from bid b 
inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey 
inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
inner join company c on c.companykey = bv.vendorkey
where b.BidStatus = 803 or bv.BidVendorStatus = 803   group by c.name  
) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)       
print(@qrytotal + @qry)                   
exec( @qrytotal + @qry)  
END
GO
/****** Object:  StoredProcedure [dbo].[site_Vendors_with_the_most_bids_submitted_IndexPaging]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- [site_Vendors_with_the_most_bids_submitted_IndexPaging] 50,1
CREATE PROCEDURE [dbo].[site_Vendors_with_the_most_bids_submitted_IndexPaging]      
@ReportPageSize int,                                 
@PageIndex int
AS                                
BEGIN      
  declare @qrytotal varchar(max)                           
  declare @qry varchar(max)       
  
     
set @qrytotal = 'declare @total int  select @total = count(vendorname)  from ( select count(BidKey) as SubmittedBids, c.name as vendorname from bid b 
inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey 
inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
inner join company c on c.companykey = bv.vendorkey
where bv.BidVendorStatus = 701   group by c.name) i'   
      
set @qry = '
select * from (select count(BidKey) as SubmittedBids, c.name as vendorname,
@total  as TotalRecord, row_number() over(order by count(BidKey) desc) as  rownum  
  from bid b 
inner join bidvendor bv on bv.bidvendorkey = b.bidvendorkey 
inner join bidrequest br on br.bidrequestkey = bv.bidrequestkey 
inner join company c on c.companykey = bv.vendorkey
where bv.BidVendorStatus = 701   group by c.name  
) i where rownum between  '+Convert(nvarchar(10),( (@pageIndex-1) * @ReportPageSize  ) + 1 ) + ' and '  + Convert(varchar(10),( (@pageIndex-1) * @ReportPageSize  ) + @ReportPageSize)       
print(@qrytotal + @qry)                   
exec( @qrytotal + @qry)  
END
GO
/****** Object:  StoredProcedure [dbo].[site_vendorservic_Delete]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_vendorservic_Delete]
	@servicekey int,
	@sername  varchar(150),
	@errorCode int output
	

AS
SET NOCOUNT ON
  delete  from  Service   where  ServiceKey =  @servicekey and Title = @sername

select @errorCode  = @@ERROR
-- Get the Error Code for the statement just executed.
GO
/****** Object:  StoredProcedure [dbo].[site_VendorService_BidRequestVendorServiceInsert]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE procedure [dbo].[site_VendorService_BidRequestVendorServiceInsert]
@VendorKey int,
@ServiceKey int
As
begin

insert into VendorService (VendorKey, ServiceKey, SortOrder) values (@VendorKey, @ServiceKey, '')

end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorService_GetAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[site_VendorService_GetAll]
@ServiceKey int
AS
SET NOCOUNT ON
begin
select s.Title from Service  as s 
				inner join VendorService as vs on vs.ServiceKey = s.ServiceKey
				inner join Company as c on c.CompanyKey = vs.VendorKey
				where c.CompanyKey = @ServiceKey

end
GO
/****** Object:  StoredProcedure [dbo].[site_Vendorservice_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[site_Vendorservice_SelectAll]

@CompanyKey int

AS
SET NOCOUNT ON
begin
select  ServiceKey, Title  from [Service] where ServiceKey = @CompanyKey
end
GO
/****** Object:  StoredProcedure [dbo].[site_VendorService_update]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[site_VendorService_update]  
   
   @ServiceTitle1 varchar(500),    
   @vendorkey int,  
   @errorCode INT OUTPUT  
  
AS  
SET NOCOUNT ON  
begin  
     
delete  from  VendorService where  VendorKey = @vendorkey
  declare  vendorcur cursor for      
      
 select item from  SplitString(@ServiceTitle1,',')      
      
 declare @servicekey int      
      
 open vendorcur       
      
 fetch  next from vendorcur into @servicekey      
    while @@FETCH_STATUS = 0        
    begin       
    insert into VendorService (servicekey,vendorkey)values(@servicekey,@vendorkey)       
      
 fetch  next from vendorcur into @servicekey      
    end      
 close vendorcur      
 deallocate vendorcur      
  
SELECT @errorCode = @@ERROR  
End
GO
/****** Object:  StoredProcedure [dbo].[site_VendorWorkOrderDocument_SelectAll]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================          
-- Author:  <Author,,Name>          
-- Create date: <Create Date,,>          
-- Description: <Description,,>          
-- =============================================          
CREATE PROCEDURE [dbo].[site_VendorWorkOrderDocument_SelectAll]          
 -- Add the parameters for the stored procedure here          
 @InsuranceKey int           
AS          
BEGIN          
 -- SET NOCOUNT ON added to prevent extra result sets from          
 -- interfering with SELECT statements.          
 SET NOCOUNT ON;          
          
    -- Insert statements for procedure here          
declare @BidReqKey int , @BidParentReqKey int, @BidVendorKey int,@ModuleKey int  
  
  
          
set @BidReqKey= (select BidRequestKey from BidVendor where bidvendorkey=@InsuranceKey )          
          
select  @ModuleKey  =  (Select  ModuleKey  from  BidRequest Where BidRequestKey =@BidReqKey )  
  
if(@ModuleKey = 106)  
begin  
  
declare @doccount  int 

select @doccount  = (select count(DocumentKey) from document where ObjectKey=@InsuranceKey)  


if(@doccount is null or  @doccount =0)
begin

declare @ParentReqKey int
set @ParentReqKey = (select ParentBidRequestKey from BidRequest where bidrequestkey=@BidReqKey)          
declare  @bidVenkey  int
select @bidVenkey = (select  BidVendorkey  from  BidVendor where  BidRequestKey = @ParentReqKey and  BidVendorStatus = 802)
select * from document where ObjectKey=@bidVenkey 

end
else
begin
select * from document where ObjectKey=@InsuranceKey
end

end  
else  
begin  
set @BidParentReqKey = (select ParentBidRequestKey from BidRequest where bidrequestkey=@BidReqKey)          
          
declare  @countvendorkey int     
declare @bvkey int     
select  @countvendorkey  = (select count(bidvendorkey) from BidVendor where Bidrequestkey=@BidParentReqKey)    
if(@countvendorkey <= 1)    
begin    
select @bvkey= (select bidvendorkey from BidVendor where Bidrequestkey=@BidParentReqKey)    
    
end    
else    
begin    
select @bvkey= (select BidVendorKey from BidVendor where Bidrequestkey=@BidParentReqKey and IsAssigned = 1)    
end    
 select * from document where ObjectKey=@bvkey    
  
  
end  
         
END 


GO
/****** Object:  StoredProcedure [dbo].[USP_Resource_AStaffEdit]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[USP_Resource_AStaffEdit]
	 
	@FirstName varchar(50), 
	@LastName varchar(50), 
	@Email varchar(150), 
	@Email2 varchar(150),
	@CellPhone varchar(50),
	@Work varchar(50),
	@Work2 varchar(50),
	@Fax varchar(50),
	@Address varchar(100),
	@Address2 varchar(100),
	@City varchar(50), 
	@State varchar(50),
	@Status int,
	@Zip varchar(11),
	@PrimaryContact bit,
	@Description varchar(50),
    @lst varchar(150),
	@ResourceKey INT

AS
SET NOCOUNT ON

Update [Resource] set ResourceTypeKey = @lst, FirstName = @FirstName, LastName = @LastName, Email = @Email, Email2 = @Email2, CellPhone = @CellPhone, Work = @Work, Work2 = @Work2, Fax = @Fax,
	Address = @Address, Address2 = @Address2, City = @City, State = @State, Status = @Status, Zip = @Zip, PrimaryContact = @PrimaryContact, Description = @Description 
	where ResourceKey = @ResourceKey
GO
/****** Object:  StoredProcedure [dbo].[USP_Resource_SelectResourceKey]    Script Date: 1/18/2021 3:48:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure  [dbo].[USP_Resource_SelectResourceKey]
@PropertyKey int
as
begin  
Select  max(PropertyResourceKey) as PropertyResourceKey from  PropertyResource  where  PropertyKey =154

end
GO
